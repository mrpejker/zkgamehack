var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { singleton } from "tsyringe";
import { BlockHashMerkleTreeWitness, NetworkState } from "@proto-kit/protocol";
import { StateTransitionArrayMapper } from "./StateTransitionMapper";
export let UnprovenBlockMetadataMapper = class UnprovenBlockMetadataMapper {
    constructor(stArrayMapper) {
        this.stArrayMapper = stArrayMapper;
    }
    mapIn(input) {
        return {
            afterNetworkState: new NetworkState(
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            NetworkState.fromJSON(input.afterNetworkState)),
            stateRoot: BigInt(input.stateRoot),
            blockHashRoot: BigInt(input.blockHashRoot),
            blockHashWitness: new BlockHashMerkleTreeWitness(
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            BlockHashMerkleTreeWitness.fromJSON(input.blockHashWitness)),
            blockStateTransitions: this.stArrayMapper.mapIn(input.blockStateTransitions),
            blockHash: BigInt(input.blockHash),
        };
    }
    mapOut(input) {
        return {
            stateRoot: input.stateRoot.toString(),
            blockHash: input.blockHash.toString(),
            blockHashRoot: input.blockHashRoot.toString(),
            blockHashWitness: BlockHashMerkleTreeWitness.toJSON(input.blockHashWitness),
            blockStateTransitions: this.stArrayMapper.mapOut(input.blockStateTransitions),
            afterNetworkState: NetworkState.toJSON(input.afterNetworkState),
        };
    }
};
UnprovenBlockMetadataMapper = __decorate([
    singleton(),
    __metadata("design:paramtypes", [StateTransitionArrayMapper])
], UnprovenBlockMetadataMapper);
