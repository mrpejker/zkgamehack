var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Prisma } from "@prisma/client";
import { inject, injectable } from "tsyringe";
import { BatchMapper } from "./mappers/BatchMapper";
export let PrismaBatchStore = class PrismaBatchStore {
    constructor(connection, batchMapper) {
        this.connection = connection;
        this.batchMapper = batchMapper;
    }
    async getBlockAt(height) {
        const batch = await this.connection.prismaClient.batch.findFirst({
            where: {
                height,
            },
            include: {
                blocks: {
                    select: {
                        hash: true,
                    },
                },
            },
        });
        if (batch === null) {
            return undefined;
        }
        const blocks = batch.blocks.map((block) => block.hash);
        return this.batchMapper.mapIn([batch, blocks]);
    }
    async getCurrentBlockHeight() {
        const batch = await this.connection.prismaClient.batch.aggregate({
            _max: {
                height: true,
            },
        });
        return (batch?._max.height ?? -1) + 1;
    }
    async pushBlock(block) {
        const height = await this.getCurrentBlockHeight();
        const [entity] = this.batchMapper.mapOut(block);
        await this.connection.prismaClient.batch.create({
            data: {
                proof: entity.proof,
                height,
                blocks: {
                    connect: block.bundles.map((hash) => ({
                        hash,
                    })),
                },
            },
            include: {
                blocks: true,
            },
        });
    }
    async getLatestBlock() {
        const batch = await this.connection.prismaClient.batch.findFirst({
            orderBy: {
                height: Prisma.SortOrder.desc,
            },
            include: {
                blocks: {
                    select: {
                        hash: true,
                    },
                },
            },
            take: 1,
        });
        if (batch === null) {
            return undefined;
        }
        return this.batchMapper.mapIn([
            batch,
            batch.blocks.map((block) => block.hash),
        ]);
    }
};
PrismaBatchStore = __decorate([
    injectable(),
    __param(0, inject("Database")),
    __metadata("design:paramtypes", [Object, BatchMapper])
], PrismaBatchStore);
