var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { SettlementMapper } from "./mappers/SettlementMapper";
export let PrismaSettlementStorage = class PrismaSettlementStorage {
    constructor(connection, settlementMapper) {
        this.connection = connection;
        this.settlementMapper = settlementMapper;
    }
    async pushSettlement(settlement) {
        const { prismaClient } = this.connection;
        const dbSettlement = this.settlementMapper.mapOut(settlement);
        await prismaClient.settlement.create({
            data: {
                ...dbSettlement[0],
                batches: {
                    connect: dbSettlement[1].map((batchHeight) => ({
                        height: batchHeight,
                    })),
                },
            },
            include: {
                batches: true,
            },
        });
    }
};
PrismaSettlementStorage = __decorate([
    injectable(),
    __param(0, inject("Database")),
    __metadata("design:paramtypes", [Object, SettlementMapper])
], PrismaSettlementStorage);
