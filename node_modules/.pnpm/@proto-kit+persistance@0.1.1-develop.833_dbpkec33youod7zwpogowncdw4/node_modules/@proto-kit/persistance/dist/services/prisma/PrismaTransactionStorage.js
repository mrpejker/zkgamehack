var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { TransactionMapper } from "./mappers/TransactionMapper";
export let PrismaTransactionStorage = class PrismaTransactionStorage {
    constructor(connection, transactionMapper) {
        this.connection = connection;
        this.transactionMapper = transactionMapper;
    }
    async getPendingUserTransactions() {
        const { prismaClient } = this.connection;
        const txs = await prismaClient.transaction.findMany({
            where: {
                executionResult: {
                    is: null,
                },
                isMessage: {
                    equals: false,
                },
            },
        });
        return txs.map((tx) => this.transactionMapper.mapIn(tx));
    }
    async pushUserTransaction(tx) {
        const { prismaClient } = this.connection;
        const result = await prismaClient.transaction.createMany({
            data: [this.transactionMapper.mapOut(tx)],
            skipDuplicates: true,
        });
        return result.count === 1;
    }
    async findTransaction(hash) {
        const { prismaClient } = this.connection;
        const tx = await prismaClient.transaction.findFirst({
            where: {
                hash,
            },
            include: {
                executionResult: {
                    include: {
                        block: {
                            include: {
                                batch: true,
                            },
                        },
                    },
                },
            },
        });
        if (tx === null) {
            return undefined;
        }
        const transaction = this.transactionMapper.mapIn(tx);
        const block = tx.executionResult?.block?.hash;
        const batch = tx.executionResult?.block?.batch?.height;
        return {
            transaction,
            block,
            batch,
        };
    }
};
PrismaTransactionStorage = __decorate([
    injectable(),
    __param(0, inject("Database")),
    __metadata("design:paramtypes", [Object, TransactionMapper])
], PrismaTransactionStorage);
