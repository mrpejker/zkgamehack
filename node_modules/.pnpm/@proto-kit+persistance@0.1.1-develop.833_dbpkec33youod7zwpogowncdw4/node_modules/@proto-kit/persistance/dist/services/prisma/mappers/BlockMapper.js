var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { singleton } from "tsyringe";
import { NetworkState } from "@proto-kit/protocol";
import { Field } from "o1js";
export let BlockMapper = class BlockMapper {
    mapIn(input) {
        return {
            transactions: [],
            networkState: {
                before: new NetworkState(
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                NetworkState.fromJSON(input.beforeNetworkState)),
                during: new NetworkState(
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                NetworkState.fromJSON(input.duringNetworkState)),
            },
            hash: Field(input.hash),
            height: Field(input.height),
            fromEternalTransactionsHash: Field(input.fromEternalTransactionsHash),
            toEternalTransactionsHash: Field(input.toEternalTransactionsHash),
            fromBlockHashRoot: Field(input.fromBlockHashRoot),
            fromMessagesHash: Field(input.fromMessagesHash),
            toMessagesHash: Field(input.toMessagesHash),
            transactionsHash: Field(input.transactionsHash),
            previousBlockHash: input.parentHash !== null ? Field(input.parentHash) : undefined,
        };
    }
    mapOut(input) {
        return {
            height: Number(input.height.toBigInt()),
            beforeNetworkState: NetworkState.toJSON(input.networkState.before),
            duringNetworkState: NetworkState.toJSON(input.networkState.during),
            fromEternalTransactionsHash: input.fromEternalTransactionsHash.toString(),
            toEternalTransactionsHash: input.toEternalTransactionsHash.toString(),
            fromBlockHashRoot: input.fromBlockHashRoot.toString(),
            fromMessagesHash: input.fromMessagesHash.toString(),
            toMessagesHash: input.toMessagesHash.toString(),
            hash: input.hash.toString(),
            transactionsHash: input.transactionsHash.toString(),
            parentHash: input.previousBlockHash?.toString() ?? null,
            batchHeight: null,
        };
    }
};
BlockMapper = __decorate([
    singleton()
], BlockMapper);
