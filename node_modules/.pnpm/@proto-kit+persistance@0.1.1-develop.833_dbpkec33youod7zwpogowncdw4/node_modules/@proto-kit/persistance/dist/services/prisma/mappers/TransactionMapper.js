var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { singleton, injectable } from "tsyringe";
import { PendingTransaction, } from "@proto-kit/sequencer";
import { Bool } from "o1js";
import { StateTransitionArrayMapper } from "./StateTransitionMapper";
export let TransactionMapper = class TransactionMapper {
    mapIn(input) {
        return PendingTransaction.fromJSON({
            ...input,
            signature: {
                r: input.signature_r,
                s: input.signature_s,
            },
        });
    }
    mapOut(input) {
        const json = input.toJSON();
        return {
            methodId: json.methodId,
            nonce: json.nonce,
            sender: json.sender,
            argsFields: json.argsFields,
            auxiliaryData: json.auxiliaryData,
            isMessage: json.isMessage,
            signature_r: json.signature.r,
            signature_s: json.signature.s,
            hash: input.hash().toString(),
        };
    }
};
TransactionMapper = __decorate([
    singleton(),
    injectable()
], TransactionMapper);
export let TransactionExecutionResultMapper = class TransactionExecutionResultMapper {
    constructor(transactionMapper, stArrayMapper) {
        this.transactionMapper = transactionMapper;
        this.stArrayMapper = stArrayMapper;
    }
    mapIn(input) {
        const executionResult = input[0];
        return {
            tx: this.transactionMapper.mapIn(input[1]),
            status: Bool(executionResult.status),
            statusMessage: executionResult.statusMessage ?? undefined,
            stateTransitions: this.stArrayMapper.mapIn(executionResult.stateTransitions),
            protocolTransitions: this.stArrayMapper.mapIn(executionResult.protocolTransitions),
        };
    }
    mapOut(input) {
        const tx = this.transactionMapper.mapOut(input.tx);
        const executionResult = {
            status: input.status.toBoolean(),
            statusMessage: input.statusMessage ?? null,
            stateTransitions: this.stArrayMapper.mapOut(input.stateTransitions),
            protocolTransitions: this.stArrayMapper.mapOut(input.protocolTransitions),
            txHash: tx.hash,
        };
        return [executionResult, tx];
    }
};
TransactionExecutionResultMapper = __decorate([
    singleton(),
    __metadata("design:paramtypes", [TransactionMapper,
        StateTransitionArrayMapper])
], TransactionExecutionResultMapper);
