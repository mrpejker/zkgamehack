import { PendingTransaction, TransactionExecutionResult } from "@proto-kit/sequencer";
import { Transaction as DBTransaction, TransactionExecutionResult as DBTransactionExecutionResult } from "@prisma/client";
import { ObjectMapper } from "../../../ObjectMapper";
import { StateTransitionArrayMapper } from "./StateTransitionMapper";
export declare class TransactionMapper implements ObjectMapper<PendingTransaction, DBTransaction> {
    mapIn(input: DBTransaction): PendingTransaction;
    mapOut(input: PendingTransaction): DBTransaction;
}
export declare class TransactionExecutionResultMapper implements ObjectMapper<TransactionExecutionResult, [
    Omit<DBTransactionExecutionResult, "blockHash">,
    DBTransaction
]> {
    private readonly transactionMapper;
    private readonly stArrayMapper;
    constructor(transactionMapper: TransactionMapper, stArrayMapper: StateTransitionArrayMapper);
    mapIn(input: [Omit<DBTransactionExecutionResult, "blockHash">, DBTransaction]): TransactionExecutionResult;
    mapOut(input: TransactionExecutionResult): [Omit<DBTransactionExecutionResult, "blockHash">, DBTransaction];
}
//# sourceMappingURL=TransactionMapper.d.ts.map