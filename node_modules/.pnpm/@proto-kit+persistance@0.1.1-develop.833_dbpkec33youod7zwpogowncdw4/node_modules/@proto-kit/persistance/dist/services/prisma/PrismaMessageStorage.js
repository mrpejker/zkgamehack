var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { TransactionMapper } from "./mappers/TransactionMapper";
export let PrismaMessageStorage = class PrismaMessageStorage {
    constructor(connection, transactionMapper) {
        this.connection = connection;
        this.transactionMapper = transactionMapper;
    }
    async getMessages(fromMessageHash) {
        const { prismaClient } = this.connection;
        const batch = await prismaClient.incomingMessageBatch.findFirst({
            where: {
                fromMessageHash,
            },
            include: {
                messages: {
                    include: {
                        transaction: true,
                    },
                },
            },
        });
        if (batch === null) {
            return [];
        }
        const dbTransactions = batch.messages.map((message) => {
            return message.transaction;
        });
        return dbTransactions.map((dbTx) => this.transactionMapper.mapIn(dbTx));
    }
    async pushMessages(fromMessageHash, toMessageHash, messages) {
        const transactions = messages.map((message) => this.transactionMapper.mapOut(message));
        const { prismaClient } = this.connection;
        await prismaClient.$transaction([
            prismaClient.transaction.createMany({
                data: transactions,
                skipDuplicates: true,
            }),
            prismaClient.incomingMessageBatch.create({
                data: {
                    fromMessageHash,
                    toMessageHash,
                    messages: {
                        createMany: {
                            data: transactions.map((transaction) => ({
                                transactionHash: transaction.hash,
                            })),
                        },
                    },
                },
            }),
        ]);
    }
};
PrismaMessageStorage = __decorate([
    injectable(),
    __param(0, inject("Database")),
    __metadata("design:paramtypes", [Object, TransactionMapper])
], PrismaMessageStorage);
