var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { injectable } from "tsyringe";
export let SettlementMapper = class SettlementMapper {
    mapIn(input) {
        const [settlement, batches] = input;
        return {
            batches,
            // TODO Add this back in after we make the transactions traceable
            // transactionHash: settlement.transactionHash,
            promisedMessagesHash: settlement.promisedMessagesHash,
        };
    }
    mapOut(input) {
        return [
            {
                promisedMessagesHash: input.promisedMessagesHash,
                transactionHash: "", // input.transactionHash,
            },
            input.batches,
        ];
    }
};
SettlementMapper = __decorate([
    injectable()
], SettlementMapper);
