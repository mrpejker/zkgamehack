import { HistoricalBlockStorage, Block, BlockResult, BlockQueue, BlockStorage, BlockWithResult, BlockWithPreviousResult } from "@proto-kit/sequencer";
import type { PrismaConnection } from "../../PrismaDatabaseConnection";
import { TransactionExecutionResultMapper, TransactionMapper } from "./mappers/TransactionMapper";
import { BlockResultMapper } from "./mappers/BlockResultMapper";
import { BlockMapper } from "./mappers/BlockMapper";
export declare class PrismaBlockStorage implements BlockQueue, BlockStorage, HistoricalBlockStorage {
    private readonly connection;
    private readonly transactionResultMapper;
    private readonly transactionMapper;
    private readonly blockResultMapper;
    private readonly blockMapper;
    constructor(connection: PrismaConnection, transactionResultMapper: TransactionExecutionResultMapper, transactionMapper: TransactionMapper, blockResultMapper: BlockResultMapper, blockMapper: BlockMapper);
    private getBlockByQuery;
    getBlockAt(height: number): Promise<Block | undefined>;
    getBlock(hash: string): Promise<Block | undefined>;
    pushBlock(block: Block): Promise<void>;
    pushMetadata(metadata: BlockResult): Promise<void>;
    getCurrentBlockHeight(): Promise<number>;
    getLatestBlock(): Promise<BlockWithResult | undefined>;
    getNewBlocks(): Promise<BlockWithPreviousResult[]>;
}
//# sourceMappingURL=PrismaBlockStorage.d.ts.map