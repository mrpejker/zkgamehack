import { RedisClientType } from "redis";
import { SequencerModule, StorageDependencyMinimumDependencies } from "@proto-kit/sequencer";
import { DependencyFactory } from "@proto-kit/common";
export interface RedisConnectionConfig {
    host: string;
    password?: string;
    port?: number;
    username?: string;
}
export interface RedisConnection {
    get redisClient(): RedisClientType;
}
export declare class RedisConnectionModule extends SequencerModule<RedisConnectionConfig> implements DependencyFactory, RedisConnection {
    private client?;
    get redisClient(): RedisClientType;
    dependencies(): Pick<StorageDependencyMinimumDependencies, "asyncMerkleStore" | "blockTreeStore" | "unprovenMerkleStore">;
    clearDatabase(): Promise<void>;
    init(): Promise<void>;
    start(): Promise<void>;
    close(): Promise<void>;
    pruneDatabase(): Promise<void>;
}
//# sourceMappingURL=RedisConnection.d.ts.map