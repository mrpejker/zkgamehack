import { createClient } from "redis";
import { SequencerModule, } from "@proto-kit/sequencer";
import { RedisMerkleTreeStore } from "./services/redis/RedisMerkleTreeStore";
export class RedisConnectionModule extends SequencerModule {
    get redisClient() {
        if (this.client === undefined) {
            throw new Error("Redis client not initialized yet, wait for .start() to be called");
        }
        return this.client;
    }
    dependencies() {
        return {
            asyncMerkleStore: {
                useFactory: () => new RedisMerkleTreeStore(this),
            },
            unprovenMerkleStore: {
                useFactory: () => new RedisMerkleTreeStore(this, "unproven"),
            },
            blockTreeStore: {
                useFactory: () => new RedisMerkleTreeStore(this, "blockHash"),
            },
        };
    }
    async clearDatabase() {
        await this.redisClient.flushAll();
    }
    async init() {
        const { host, port, password, username } = this.config;
        this.client = createClient({
            url: `redis://${host}:${port ?? 6379}`,
            password,
            username,
        });
        try {
            await this.redisClient.connect();
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Connection to Redis failed: ${error.message}`);
            }
            throw error;
        }
    }
    async start() {
        await this.init();
    }
    async close() {
        await this.redisClient.disconnect();
    }
    async pruneDatabase() {
        await this.redisClient.flushDb();
    }
}
