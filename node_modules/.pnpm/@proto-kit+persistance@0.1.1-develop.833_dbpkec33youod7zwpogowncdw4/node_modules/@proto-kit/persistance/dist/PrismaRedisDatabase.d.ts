import { SequencerModule, StorageDependencyMinimumDependencies, Database } from "@proto-kit/sequencer";
import { ChildContainerProvider } from "@proto-kit/common";
import { PrismaClient } from "@prisma/client";
import { RedisClientType } from "redis";
import { PrismaConnection, PrismaDatabaseConfig, PrismaDatabaseConnection } from "./PrismaDatabaseConnection";
import { RedisConnection, RedisConnectionConfig, RedisConnectionModule } from "./RedisConnection";
export interface PrismaRedisCombinedConfig {
    prisma: PrismaDatabaseConfig;
    redis: RedisConnectionConfig;
}
export declare class PrismaRedisDatabase extends SequencerModule<PrismaRedisCombinedConfig> implements PrismaConnection, RedisConnection, Database {
    prisma: PrismaDatabaseConnection;
    redis: RedisConnectionModule;
    constructor();
    get prismaClient(): PrismaClient;
    get redisClient(): RedisClientType;
    create(childContainerProvider: ChildContainerProvider): void;
    dependencies(): StorageDependencyMinimumDependencies;
    start(): Promise<void>;
    close(): Promise<void>;
    pruneDatabase(): Promise<void>;
}
//# sourceMappingURL=PrismaRedisDatabase.d.ts.map