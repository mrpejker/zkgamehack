{"version":3,"sources":["../../../src/build/flying-shuttle/inline-static-env.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\nimport globOriginal from 'next/dist/compiled/glob'\nimport { getNextPublicEnvironmentVariables } from '../webpack/plugins/define-env-plugin'\nimport { Sema } from 'next/dist/compiled/async-sema'\n\nconst glob = promisify(globOriginal)\n\nexport async function inlineStaticEnv({ distDir }: { distDir: string }) {\n  const staticEnv = getNextPublicEnvironmentVariables()\n\n  const serverDir = path.join(distDir, 'server')\n  const serverChunks = await glob('**/*.js', {\n    cwd: serverDir,\n  })\n  const clientDir = path.join(distDir, 'static')\n  const clientChunks = await glob('**/*.js', {\n    cwd: clientDir,\n  })\n\n  const inlineSema = new Sema(8)\n\n  for (const [parentDir, files] of [\n    [serverDir, serverChunks],\n    [clientDir, clientChunks],\n  ] as const) {\n    await Promise.all(\n      files.map(async (file) => {\n        await inlineSema.acquire()\n        const filepath = path.join(parentDir, file)\n        const content = await fs.promises.readFile(filepath, 'utf8')\n\n        await fs.promises.writeFile(\n          filepath,\n          content.replace(/[\\w]{1,}\\.env\\.NEXT_PUBLIC_[\\w]{1,}/g, (match) => {\n            let normalizedMatch = `process.env.${match.split('.').pop()}`\n\n            if (staticEnv[normalizedMatch]) {\n              return JSON.stringify(staticEnv[normalizedMatch])\n            }\n            return match\n          })\n        )\n        inlineSema.release()\n      })\n    )\n  }\n}\n"],"names":["inlineStaticEnv","glob","promisify","globOriginal","distDir","staticEnv","getNextPublicEnvironmentVariables","serverDir","path","join","serverChunks","cwd","clientDir","clientChunks","inlineSema","Sema","parentDir","files","Promise","all","map","file","acquire","filepath","content","fs","promises","readFile","writeFile","replace","match","normalizedMatch","split","pop","JSON","stringify","release"],"mappings":";;;;+BASsBA;;;eAAAA;;;2DATP;6DACE;sBACS;6DACD;iCACyB;2BAC7B;;;;;;AAErB,MAAMC,OAAOC,IAAAA,eAAS,EAACC,aAAY;AAE5B,eAAeH,gBAAgB,EAAEI,OAAO,EAAuB;IACpE,MAAMC,YAAYC,IAAAA,kDAAiC;IAEnD,MAAMC,YAAYC,aAAI,CAACC,IAAI,CAACL,SAAS;IACrC,MAAMM,eAAe,MAAMT,KAAK,WAAW;QACzCU,KAAKJ;IACP;IACA,MAAMK,YAAYJ,aAAI,CAACC,IAAI,CAACL,SAAS;IACrC,MAAMS,eAAe,MAAMZ,KAAK,WAAW;QACzCU,KAAKC;IACP;IAEA,MAAME,aAAa,IAAIC,eAAI,CAAC;IAE5B,KAAK,MAAM,CAACC,WAAWC,MAAM,IAAI;QAC/B;YAACV;YAAWG;SAAa;QACzB;YAACE;YAAWC;SAAa;KAC1B,CAAW;QACV,MAAMK,QAAQC,GAAG,CACfF,MAAMG,GAAG,CAAC,OAAOC;YACf,MAAMP,WAAWQ,OAAO;YACxB,MAAMC,WAAWf,aAAI,CAACC,IAAI,CAACO,WAAWK;YACtC,MAAMG,UAAU,MAAMC,WAAE,CAACC,QAAQ,CAACC,QAAQ,CAACJ,UAAU;YAErD,MAAME,WAAE,CAACC,QAAQ,CAACE,SAAS,CACzBL,UACAC,QAAQK,OAAO,CAAC,wCAAwC,CAACC;gBACvD,IAAIC,kBAAkB,CAAC,YAAY,EAAED,MAAME,KAAK,CAAC,KAAKC,GAAG,GAAG,CAAC;gBAE7D,IAAI5B,SAAS,CAAC0B,gBAAgB,EAAE;oBAC9B,OAAOG,KAAKC,SAAS,CAAC9B,SAAS,CAAC0B,gBAAgB;gBAClD;gBACA,OAAOD;YACT;YAEFhB,WAAWsB,OAAO;QACpB;IAEJ;AACF"}