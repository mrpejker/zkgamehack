{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { AppBuildManifest } from './webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { ExportAppOptions } from '../export/types'\nimport type { Revalidate } from '../server/lib/revalidate'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport crypto from 'crypto'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n  NEXT_RESUME_HEADER,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDelete } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport { validateTurboNextConfig } from '../lib/turbopack-warning'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_BUILD_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../shared/lib/constants'\nimport {\n  getSortedRoutes,\n  isDynamicRoute,\n  getSortedRouteObjects,\n} from '../shared/lib/router/utils'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../telemetry/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport { hadUnsupportedValue } from './analysis/get-page-static-info'\nimport {\n  createPagesMapping,\n  getPageFromPath,\n  getStaticInfoIncludingLayouts,\n  sortByPageExts,\n} from './entries'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  computeFromManifest,\n  getJsPageSizeInKb,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinNotFoundPage,\n  collectRoutesUsingEdgeRuntime,\n  collectMeta,\n  // getSupportedBrowsers,\n} from './utils'\nimport type { PageInfo, PageInfos, AppConfig, PrerenderedRoute } from './utils'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport {\n  loadBindings,\n  lockfilePatchPromise,\n  teardownTraceSubscriber,\n  teardownHeapProfiler,\n  createDefineEnv,\n} from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n  recordFetchMetrics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport {\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  type EntryIssuesMap,\n  handleRouteType,\n  handlePagesErrorRoute,\n  formatIssue,\n  isRelevantWarning,\n} from '../server/dev/turbopack-utils'\nimport { TurbopackManifestLoader } from '../server/dev/turbopack/manifest-loader'\nimport type { Entrypoints } from '../server/dev/turbopack/types'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { createProgress } from './progress'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\nimport {\n  detectChangedEntries,\n  type DetectedEntriesResult,\n} from './flying-shuttle/detect-changed-entries'\nimport { storeShuttle } from './flying-shuttle/store-shuttle'\nimport { stitchBuilds } from './flying-shuttle/stitch-builds'\nimport { inlineStaticEnv } from './flying-shuttle/inline-static-env'\nimport { FallbackMode, fallbackModeToFallbackField } from '../lib/fallback'\nimport { RenderingMode } from './rendering-mode'\n\ntype Fallback = null | boolean | string\n\nexport interface SsgRoute {\n  dataRoute: string | null\n  experimentalBypassFor?: RouteHas[]\n\n  /**\n   * The headers that should be served along side this prerendered route.\n   */\n  initialHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be served along side this prerendered route.\n   */\n  initialStatus?: number\n\n  /**\n   * The revalidation configuration for this route.\n   */\n  initialRevalidateSeconds: Revalidate\n\n  /**\n   * The prefetch data route associated with this page. If not defined, this\n   * page does not support prefetching.\n   */\n  prefetchDataRoute: string | null | undefined\n\n  /**\n   * The dynamic route that this statically prerendered route is based on. If\n   * this is null, then the route was not based on a dynamic route.\n   */\n  srcRoute: string | null\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n}\n\nexport interface DynamicSsgRoute {\n  dataRoute: string | null\n  dataRouteRegex: string | null\n  experimentalBypassFor?: RouteHas[]\n  fallback: Fallback\n\n  /**\n   * When defined, it describes the revalidation configuration for the fallback\n   * route.\n   */\n  fallbackRevalidate: Revalidate | undefined\n\n  /**\n   * The headers that should used when serving the fallback.\n   */\n  fallbackHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be used when serving the fallback.\n   */\n  fallbackStatus?: number\n  prefetchDataRoute: string | null | undefined\n  prefetchDataRouteRegex: string | null | undefined\n  routeRegex: string\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n}\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: SsgRoute }\n  dynamicRoutes: { [route: string]: DynamicSsgRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex?: string\n  routeKeys?: { [key: string]: string }\n}\n\nexport type ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<Redirect>\n  rewrites?:\n    | Array<ManifestRewriteRoute>\n    | {\n        beforeFiles: Array<ManifestRewriteRoute>\n        afterFiles: Array<ManifestRewriteRoute>\n        fallback: Array<ManifestRewriteRoute>\n      }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: Array<ManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: Array<{\n      http?: true\n      domain: string\n      locales?: string[]\n      defaultLocale: string\n    }>\n    locales: string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    contentTypeHeader: typeof RSC_CONTENT_TYPE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n  }\n  skipMiddlewareUrlNormalize?: boolean\n  caseSensitive?: boolean\n  /**\n   * Configuration related to Partial Prerendering.\n   */\n  ppr?: {\n    /**\n     * The chained response for the PPR resume.\n     */\n    chain: {\n      /**\n       * The headers that will indicate to Next.js that the request is for a PPR\n       * resume.\n       */\n      headers: Record<string, string>\n    }\n  }\n}\n\nfunction pageToRoute(page: string) {\n  const routeRegex = getNamedRouteRegex(page, true)\n  return {\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: { buildId: string; distDir: string; locales: string[] }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\ninterface FunctionsConfigManifest {\n  version: number\n  functions: Record<string, Record<string, string | number>>\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\ninterface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Should be the same as matchRemotePattern()\n    protocol: p.protocol,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n  }))\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n      await recursiveCopy(\n        path.join(distDir, SERVER_DIRECTORY, 'pages'),\n        path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'pages'\n        ),\n        { overwrite: true }\n      )\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPages',\n] as const\ntype StaticWorker = typeof import('./worker') & Worker\nexport function createStaticWorker(\n  config: NextConfigComplete,\n  onActivity?: () => void\n): StaticWorker {\n  return new Worker(staticWorkerPath, {\n    logger: Log,\n    numWorkers: getNumberOfWorkers(config),\n    onActivity,\n    forkOptions: {\n      env: process.env,\n    },\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span\n): Promise<void> {\n  const exportApp = require('../export')\n    .default as typeof import('../export').default\n\n  const pagesWorker = createStaticWorker(config)\n  const appWorker = createStaticWorker(config)\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      numWorkers: getNumberOfWorkers(config),\n    },\n    nextBuildSpan\n  )\n\n  pagesWorker.end()\n  appWorker.end()\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nconst IS_TURBOPACK_BUILD = process.env.TURBOPACK && process.env.TURBOPACK_BUILD\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  runLint = true,\n  noMangling = false,\n  appDirOnly = false,\n  turboNextBuild = false,\n  experimentalBuildMode: 'default' | 'compile' | 'generate',\n  traceUploadUrl: string | undefined\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      isTurboBuild: String(turboNextBuild),\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n                reactProductionProfiling,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      const { flyingShuttle } = config.experimental\n      const isFullFlyingShuttle = flyingShuttle?.mode === 'full'\n      const isStoreOnlyFlyingShuttle = flyingShuttle?.mode === 'store-only'\n\n      const shuttleDir = path.join(distDir, 'cache', 'shuttle')\n\n      if (flyingShuttle) {\n        await fs.mkdir(shuttleDir, {\n          recursive: true,\n        })\n      }\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64()\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(dir, config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, expFeatureInfo } = await getStartServerInfo(dir, false)\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        expFeatureInfo,\n      })\n\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds)\n      const shouldLint = !ignoreESLint && runLint\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompileMode)\n        await startTypeChecking(typeCheckingOptions)\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const buildLintEvent: EventBuildFeatureUsage = {\n        featureName: 'build-lint',\n        invocationCount: shouldLint ? 1 : 0,\n      }\n      telemetry.record({\n        eventName: EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent,\n      })\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      let pagesPaths =\n        !appDirOnly && pagesDir\n          ? await nextBuildSpan.traceChild('collect-pages').traceAsyncFn(() =>\n              recursiveReadDir(pagesDir, {\n                pathnameFilter: validFileMatcher.isPageFile,\n              })\n            )\n          : []\n\n      let changedPagePathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (pagesPaths && isFullFlyingShuttle) {\n        changedPagePathsResult = await detectChangedEntries({\n          pagesPaths,\n          pageExtensions: config.pageExtensions,\n          distDir,\n          shuttleDir,\n          config,\n        })\n        console.log(\n          JSON.stringify(\n            {\n              changedPagePathsResult: changedPagePathsResult.changed.pages,\n            },\n            null,\n            2\n          )\n        )\n        pagesPaths = changedPagePathsResult.changed.pages\n      }\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const includes = [\n        middlewareDetectionRegExp,\n        instrumentationHookDetectionRegExp,\n      ]\n\n      const rootPaths = Array.from(await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      const hasInstrumentationHook = rootPaths.some((p) =>\n        p.includes(INSTRUMENTATION_HOOK_FILENAME)\n      )\n      const hasMiddlewareFile = rootPaths.some((p) =>\n        p.includes(MIDDLEWARE_FILENAME)\n      )\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = {\n        previewModeId: crypto.randomBytes(16).toString('hex'),\n        previewModeSigningKey: crypto.randomBytes(32).toString('hex'),\n        previewModeEncryptionKey: crypto.randomBytes(32).toString('hex'),\n      }\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n      let changedAppPathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (appDir) {\n        let appPaths = await nextBuildSpan\n          .traceChild('collect-app-paths')\n          .traceAsyncFn(() =>\n            recursiveReadDir(appDir, {\n              pathnameFilter: (absolutePath) =>\n                validFileMatcher.isAppRouterPage(absolutePath) ||\n                // For now we only collect the root /not-found page in the app\n                // directory as the 404 fallback\n                validFileMatcher.isRootNotFound(absolutePath),\n              ignorePartFilter: (part) => part.startsWith('_'),\n            })\n          )\n\n        if (appPaths && isFullFlyingShuttle) {\n          changedAppPathsResult = await detectChangedEntries({\n            appPaths,\n            pageExtensions: config.pageExtensions,\n            distDir,\n            shuttleDir,\n            config,\n          })\n          console.log(\n            JSON.stringify(\n              {\n                changedAppPathsResult: changedAppPathsResult.changed.app,\n              },\n              null,\n              2\n            )\n          )\n          appPaths = changedAppPathsResult.changed.app\n        }\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      // Turbopack already handles conflicting app and page routes.\n      if (!IS_TURBOPACK_BUILD) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error'].startsWith(PAGES_DIR_ALIAS)\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = getSortedRoutes([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const dynamicRoutes: Array<ReturnType<typeof pageToRoute>> = []\n          const staticRoutes: typeof dynamicRoutes = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(pageToRoute(route))\n            } else if (!isReservedPage(route)) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n            },\n            skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize,\n            ppr: isAppPPREnabled\n              ? {\n                  chain: {\n                    headers: {\n                      [NEXT_RESUME_HEADER]: '1',\n                    },\n                  },\n                }\n              : undefined,\n          } satisfies RoutesManifest\n        })\n\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map((r) =>\n          buildCustomRoute('rewrite', r)\n        )\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          afterFiles: rewrites.afterFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          fallback: rewrites.fallback.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n        }\n      }\n      let clientRouterFilters:\n        | undefined\n        | ReturnType<typeof createClientRouterFilter>\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        const filterPaths: string[] = []\n\n        if (isFullFlyingShuttle) {\n          filterPaths.push(\n            ...[\n              // client filter always has all app paths\n              ...(changedAppPathsResult?.unchanged?.app || []),\n              ...(changedAppPathsResult?.changed?.app || []),\n            ].map((entry) =>\n              normalizeAppPath(getPageFromPath(entry, config.pageExtensions))\n            ),\n            ...(changedPagePathsResult?.unchanged.pages.length\n              ? changedPagePathsResult.changed?.pages || []\n              : []\n            ).map((item) => getPageFromPath(item, config.pageExtensions))\n          )\n        } else {\n          filterPaths.push(...appPaths)\n        }\n\n        clientRouterFilters = createClientRouterFilter(\n          filterPaths,\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await recursiveDelete(distDir, /^cache/)\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      // These are written to distDir, so they need to come after creating and cleaning distDr.\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const outputFileTracingRoot = config.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      async function turbopackBuild(): Promise<{\n        duration: number\n        buildTraceContext: undefined\n        shutdownPromise: Promise<void>\n      }> {\n        if (!IS_TURBOPACK_BUILD) {\n          throw new Error(\"next build doesn't support turbopack yet\")\n        }\n\n        await validateTurboNextConfig({\n          dir,\n          isDev: false,\n        })\n\n        const startTime = process.hrtime()\n        const bindings = await loadBindings(config?.experimental?.useWasmBinary)\n        const dev = false\n\n        // const supportedBrowsers = await getSupportedBrowsers(dir, dev)\n        const supportedBrowsers = [\n          'last 1 Chrome versions, last 1 Firefox versions, last 1 Safari versions, last 1 Edge versions',\n        ]\n\n        const project = await bindings.turbo.createProject(\n          {\n            projectPath: dir,\n            rootPath:\n              config.experimental?.turbo?.root ||\n              config.outputFileTracingRoot ||\n              dir,\n            nextConfig: config,\n            jsConfig: await getTurbopackJsConfig(dir, config),\n            watch: false,\n            dev,\n            env: process.env as Record<string, string>,\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config,\n              dev,\n              distDir,\n              fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // Implemented separately in Turbopack, doesn't have to be passed here.\n              middlewareMatchers: undefined,\n            }),\n            buildId: NextBuildContext.buildId!,\n            encryptionKey: NextBuildContext.encryptionKey!,\n            previewProps: NextBuildContext.previewProps!,\n            browserslistQuery: supportedBrowsers.join(', '),\n          },\n          {\n            memoryLimit: config.experimental.turbo?.memoryLimit,\n          }\n        )\n\n        await fs.mkdir(path.join(distDir, 'server'), { recursive: true })\n        await fs.mkdir(path.join(distDir, 'static', buildId), {\n          recursive: true,\n        })\n        await fs.writeFile(\n          path.join(distDir, 'package.json'),\n          JSON.stringify(\n            {\n              type: 'commonjs',\n            },\n            null,\n            2\n          )\n        )\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const entrypointsSubscription = project.entrypointsSubscribe()\n        const currentEntrypoints: Entrypoints = {\n          global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n\n            middleware: undefined,\n            instrumentation: undefined,\n          },\n\n          app: new Map(),\n          page: new Map(),\n        }\n\n        const currentEntryIssues: EntryIssuesMap = new Map()\n\n        const manifestLoader = new TurbopackManifestLoader({\n          buildId,\n          distDir,\n          encryptionKey,\n        })\n\n        const entrypointsResult = await entrypointsSubscription.next()\n        if (entrypointsResult.done) {\n          throw new Error('Turbopack did not return any entrypoints')\n        }\n        entrypointsSubscription.return?.().catch(() => {})\n\n        const entrypoints = entrypointsResult.value\n\n        const topLevelErrors: {\n          message: string\n        }[] = []\n        for (const issue of entrypoints.issues) {\n          topLevelErrors.push({\n            message: formatIssue(issue),\n          })\n        }\n\n        if (topLevelErrors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${\n              topLevelErrors.length\n            } issues:\\n${topLevelErrors.map((e) => e.message).join('\\n')}`\n          )\n        }\n\n        await handleEntrypoints({\n          entrypoints,\n          currentEntrypoints,\n          currentEntryIssues,\n          manifestLoader,\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          logErrors: false,\n        })\n\n        const progress = createProgress(\n          currentEntrypoints.page.size + currentEntrypoints.app.size + 1,\n          'Building'\n        )\n        const promises: Promise<any>[] = []\n        const sema = new Sema(10)\n        const enqueue = (fn: () => Promise<void>) => {\n          promises.push(\n            (async () => {\n              await sema.acquire()\n              try {\n                await fn()\n              } finally {\n                sema.release()\n                progress()\n              }\n            })()\n          )\n        }\n\n        if (!appDirOnly) {\n          for (const [page, route] of currentEntrypoints.page) {\n            enqueue(() =>\n              handleRouteType({\n                dev,\n                page,\n                pathname: page,\n                route,\n\n                currentEntryIssues,\n                entrypoints: currentEntrypoints,\n                manifestLoader,\n                devRewrites: undefined,\n                productionRewrites: customRoutes.rewrites,\n                logErrors: false,\n              })\n            )\n          }\n        }\n\n        for (const [page, route] of currentEntrypoints.app) {\n          enqueue(() =>\n            handleRouteType({\n              page,\n              dev: false,\n              pathname: normalizeAppPath(page),\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        enqueue(() =>\n          handlePagesErrorRoute({\n            dev: false,\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: undefined,\n            productionRewrites: customRoutes.rewrites,\n            logErrors: false,\n          })\n        )\n        await Promise.all(promises)\n\n        await manifestLoader.writeManifests({\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          entrypoints: currentEntrypoints,\n        })\n\n        const errors: {\n          page: string\n          message: string\n        }[] = []\n        const warnings: {\n          page: string\n          message: string\n        }[] = []\n        for (const [page, entryIssues] of currentEntryIssues) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                page,\n                message: formatIssue(issue),\n              })\n            } else {\n              if (isRelevantWarning(issue)) {\n                warnings.push({\n                  page,\n                  message: formatIssue(issue),\n                })\n              }\n            }\n          }\n        }\n\n        const shutdownPromise = project.shutdown()\n\n        if (warnings.length > 0) {\n          Log.warn(\n            `Turbopack build collected ${warnings.length} warnings:\\n${warnings\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        if (errors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${errors.length} errors:\\n${errors\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        return {\n          duration: process.hrtime(startTime)[0],\n          buildTraceContext: undefined,\n          shutdownPromise,\n        }\n      }\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      let shutdownPromise = Promise.resolve()\n      if (!isGenerateMode) {\n        if (turboNextBuild) {\n          const {\n            duration: compilerDuration,\n            shutdownPromise: p,\n            ...rest\n          } = await turbopackBuild()\n          shutdownPromise = p\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          Log.event('Compiled successfully')\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              durationInSeconds: compilerDuration,\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = buildTraceWorker\n                  .collectBuildTraces({\n                    dir,\n                    config,\n                    distDir,\n                    // Serialize Map as this is sent to the worker.\n                    edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(new Map()),\n                    staticPages: [],\n                    hasSsrAmpPages: false,\n                    buildTraceContext,\n                    outputFileTracingRoot,\n                    isFlyingShuttle: Boolean(flyingShuttle),\n                  })\n                  .catch((err) => {\n                    console.error(err)\n                    process.exit(1)\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            Log.event('Compiled successfully')\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      if (isFullFlyingShuttle) {\n        // we need to copy the chunks from the shuttle folder\n        // to the distDir (we copy all server split chunks currently)\n        // this has to come before we require any page chunks as webpack\n        // cache could reference previous runtimes/chunks\n        if (await fileExists(path.join(shuttleDir, 'server'))) {\n          await recursiveCopy(\n            path.join(shuttleDir, 'server'),\n            path.join(distDir, 'server'),\n            {\n              filter(item) {\n                // we copy page chunks separately to not copy stale entries\n                return !item.match(/^[/\\\\](pages|app)[/\\\\]/)\n              },\n              overwrite: true,\n            }\n          )\n        }\n      }\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n      const appBuildManifestPath = path.join(distDir, APP_BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const hybridAmpPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalPaths = new Map<string, PrerenderedRoute[]>()\n      const staticPaths = new Map<string, PrerenderedRoute[]>()\n      const appNormalizedPaths = new Map<string, string>()\n      const fallbackModes = new Map<string, FallbackMode>()\n      const appDefaultConfigs = new Map<string, AppConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      let pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n      const appBuildManifest = appDir\n        ? await readManifest<AppBuildManifest>(appBuildManifestPath)\n        : undefined\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const worker = createStaticWorker(config)\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true,\n          }\n        }\n\n        const { configFileName, publicRuntimeConfig, serverRuntimeConfig } =\n          config\n        const runtimeEnvConfig = { publicRuntimeConfig, serverRuntimeConfig }\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await worker.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                runtimeEnvConfig,\n                checkingApp: false,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            worker.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              runtimeEnvConfig,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n              isAppPPRFallbacksEnabled: config.experimental.pprFallbacks,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise = worker.hasCustomGetInitialProps(\n          {\n            page: appPageToCheck,\n            distDir,\n            runtimeEnvConfig,\n            checkingApp: true,\n          }\n        )\n\n        const namedExportsPromise = worker.getDefinedNamedExports({\n          page: appPageToCheck,\n          distDir,\n          runtimeEnvConfig,\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false\n\n        const computedManifestData = await computeFromManifest(\n          { build: buildManifest, app: appBuildManifest },\n          distDir,\n          config.experimental.gzipSize\n        )\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n                const [size, totalSize] = await getJsPageSizeInKb(\n                  pageType,\n                  actualPage,\n                  distDir,\n                  buildManifest,\n                  appBuildManifest,\n                  config.experimental.gzipSize,\n                  computedManifestData\n                )\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let isHybridAmp = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinNotFoundPage(pagePath)\n                  ? require.resolve(\n                      'next/dist/client/components/not-found-error'\n                    )\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const isInsideAppDir = pageType === 'app'\n                const staticInfo = pagePath\n                  ? await getStaticInfoIncludingLayouts({\n                      isInsideAppDir,\n                      pageFilePath,\n                      pageExtensions: config.pageExtensions,\n                      appDir,\n                      config,\n                      isDev: false,\n                      // If this route is an App Router page route, inherit the\n                      // route segment configs (e.g. `runtime`) from the layout by\n                      // passing the `originalAppPath`, which should end with `/page`.\n                      page: isInsideAppDir ? originalAppPath! : page,\n                    })\n                  : undefined\n\n                if (staticInfo?.extraConfig) {\n                  functionsConfigManifest.functions[page] =\n                    staticInfo.extraConfig\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return worker.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            runtimeEnvConfig,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            cacheHandler: config.cacheHandler,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            maxMemoryCacheSize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                            isAppPPRFallbacksEnabled:\n                              config.experimental.pprFallbacks,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                            isSSG = true\n                            isStatic = true\n\n                            staticPaths.set(originalAppPath, [])\n                          }\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            staticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const isDynamic = isDynamicRoute(page)\n                            const hasGenerateStaticParams =\n                              workerResult.prerenderedRoutes &&\n                              workerResult.prerenderedRoutes.length > 0\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              staticPaths.set(originalAppPath, [\n                                {\n                                  path: page,\n                                  encoded: page,\n                                  fallbackRouteParams: [],\n                                },\n                              ])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              staticPaths.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallbackMode) {\n                            fallbackModes.set(\n                              originalAppPath,\n                              workerResult.prerenderFallbackMode\n                            )\n                          }\n\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          // TODO: add handling for statically rendering edge\n                          // pages and allow edge with Prerender outputs\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (\n                          workerResult.isStatic === false &&\n                          (workerResult.isHybridAmp || workerResult.isAmpOnly)\n                        ) {\n                          hasSsrAmpPages = true\n                        }\n\n                        if (workerResult.isHybridAmp) {\n                          isHybridAmp = true\n                          hybridAmpPages.add(page)\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            additionalPaths.set(\n                              page,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                          }\n\n                          if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.BLOCKING_STATIC_RENDER\n                          ) {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.PRERENDER\n                          ) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  size,\n                  totalSize,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  isHybridAmp,\n                  ssgPageRoutes,\n                  initialRevalidateSeconds: false,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyPrelude: undefined,\n                })\n              })\n            })\n        )\n\n        if (hadUnsupportedValue) {\n          Log.error(\n            `Invalid config value exports detected, these can cause unexpected behavior from the configs not being applied. Please fix them to continue`\n          )\n          process.exit(1)\n        }\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist()\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      const { cacheHandler } = config\n\n      const instrumentationHookEntryFiles: string[] = []\n      if (hasInstrumentationHook) {\n        instrumentationHookEntryFiles.push(\n          path.join(SERVER_DIRECTORY, `${INSTRUMENTATION_HOOK_FILENAME}.js`)\n        )\n        // If there's edge routes, append the edge instrumentation hook\n        if (edgeRuntimeAppCount || edgeRuntimePagesCount) {\n          instrumentationHookEntryFiles.push(\n            path.join(\n              SERVER_DIRECTORY,\n              `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n            )\n          )\n        }\n      }\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              experimental: {\n                ...config.experimental,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n\n                // @ts-expect-error internal field TODO: fix this, should use a separate mechanism to pass the info.\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              path.join(\n                SERVER_DIRECTORY,\n                MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n              ),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    APP_BUILD_MANIFEST,\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              REACT_LOADABLE_MANIFEST,\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              ...instrumentationHookEntryFiles,\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      if (!hasSsrAmpPages) {\n        requiredServerFilesManifest.ignore.push(\n          path.relative(\n            dir,\n            path.join(\n              path.dirname(\n                require.resolve(\n                  'next/dist/compiled/@ampproject/toolbox-optimizer'\n                )\n              ),\n              '**/*'\n            )\n          )\n        )\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (!isGenerateMode && !buildTracesPromise) {\n        buildTracesPromise = collectBuildTraces({\n          dir,\n          config,\n          distDir,\n          edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n          staticPages: [...staticPages],\n          nextBuildSpan,\n          hasSsrAmpPages,\n          buildTraceContext,\n          outputFileTracingRoot,\n          isFlyingShuttle: Boolean(flyingShuttle),\n        }).catch((err) => {\n          console.error(err)\n          process.exit(1)\n        })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = getSortedRoutes([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n\n        // await writeManifest(routesManifestPath, routesManifest)\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      if (!isGenerateMode) {\n        if (flyingShuttle) {\n          await buildTracesPromise\n\n          if (isStoreOnlyFlyingShuttle) {\n            console.log('skipping stitching builds due to store-only mode')\n          } else {\n            console.log('stitching builds...')\n            const stitchResult = await stitchBuilds(\n              {\n                config,\n                buildId,\n                distDir,\n                shuttleDir,\n                rewrites,\n                redirects,\n                edgePreviewProps: {\n                  __NEXT_PREVIEW_MODE_ID:\n                    NextBuildContext.previewProps!.previewModeId,\n                  __NEXT_PREVIEW_MODE_ENCRYPTION_KEY:\n                    NextBuildContext.previewProps!.previewModeEncryptionKey,\n                  __NEXT_PREVIEW_MODE_SIGNING_KEY:\n                    NextBuildContext.previewProps!.previewModeSigningKey,\n                },\n                encryptionKey,\n                allowedErrorRate:\n                  config.experimental.clientRouterFilterAllowedRate,\n              },\n              {\n                changed: {\n                  pages: changedPagePathsResult?.changed.pages || [],\n                  app: changedAppPathsResult?.changed.app || [],\n                },\n                unchanged: {\n                  pages: changedPagePathsResult?.unchanged.pages || [],\n                  app: changedAppPathsResult?.unchanged.app || [],\n                },\n                pageExtensions: config.pageExtensions,\n              }\n            )\n            // reload pagesManifest since it's been updated on disk\n            if (stitchResult.pagesManifest) {\n              pagesManifest = stitchResult.pagesManifest\n            }\n          }\n\n          console.log('storing shuttle')\n          await storeShuttle({\n            config,\n            distDir,\n            shuttleDir,\n          })\n\n          console.log('inlining static env')\n          await inlineStaticEnv({ distDir })\n        }\n      }\n\n      const prerenderManifest: PrerenderManifest = {\n        version: 4,\n        routes: {},\n        dynamicRoutes: {},\n        notFoundRoutes: [],\n        preview: previewProps,\n      }\n\n      const tbdPrerenderRoutes: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = staticPaths.has(UNDERSCORE_NOT_FOUND_ROUTE_ENTRY)\n      const hasStaticApp404 = hasApp404 && isApp404Static\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            new Map(\n              Array.from(additionalPaths.entries()).map(\n                ([page, routes]): [string, string[]] => {\n                  return [page, routes.map((route) => route.path)]\n                }\n              )\n            )\n          )\n          const exportApp = require('../export')\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalPaths.forEach((routes, page) => {\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page,\n                    query: { __nextSsgPath: route.encoded },\n                  }\n                })\n              })\n\n              if (useStaticPages404) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              staticPaths.forEach((routes, originalAppPath) => {\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n                const isDynamicError = appConfig?.dynamic === 'error'\n\n                const isRoutePPREnabled = appConfig\n                  ? checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                  : undefined\n\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page: originalAppPath,\n                    query: { __nextSsgPath: route.encoded },\n                    _fallbackRouteParams: route.fallbackRouteParams,\n                    _isDynamicError: isDynamicError,\n                    _isAppDir: true,\n                    _isRoutePPREnabled: isRoutePPREnabled,\n                  }\n                })\n              })\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? 'true' : undefined,\n                      },\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const exportOptions: ExportAppOptions = {\n            nextConfig: exportConfig,\n            enabledDirectories,\n            silent: true,\n            buildExport: true,\n            debugOutput,\n            pages: combinedPages,\n            outdir: path.join(distDir, 'export'),\n            statusMessage: 'Generating static pages',\n            numWorkers: getNumberOfWorkers(exportConfig),\n          }\n\n          const exportResult = await exportApp(\n            dir,\n            exportOptions,\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          if (debugOutput || process.env.NEXT_SSG_FETCH_METRICS === '1') {\n            recordFetchMetrics(exportResult)\n          }\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          prerenderManifest.notFoundRoutes = Array.from(\n            exportResult.ssgNotFoundPaths\n          )\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          staticPaths.forEach((prerenderedRoutes, originalAppPath) => {\n            const page = appNormalizedPaths.get(originalAppPath) || ''\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {}\n\n            let hasRevalidateZero =\n              appConfig.revalidate === 0 ||\n              exportResult.byPath.get(page)?.revalidate === 0\n\n            if (hasRevalidateZero && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isAppRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const isRoutePPREnabled: true | undefined =\n              !isAppRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                ? true\n                : undefined\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION_HEADER },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n            ]\n\n            // We should collect all the dynamic routes into a single array for\n            // this page. Including the full fallback route (the original\n            // route), any routes that were generated with unknown route params\n            // should be collected and included in the dynamic routes part\n            // of the manifest instead.\n            const routes: string[] = []\n            const dynamicRoutes: string[] = []\n\n            // Sort the outputted routes to ensure consistent output. Any route\n            // though that has unknown route params will be pulled and sorted\n            // independently. This is because the routes with unknown route\n            // params will contain the dynamic path parameters, some of which\n            // may conflict with the actual prerendered routes.\n            let unknownPrerenderRoutes: PrerenderedRoute[] = []\n            let knownPrerenderRoutes: PrerenderedRoute[] = []\n            for (const prerenderedRoute of prerenderedRoutes) {\n              if (\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                unknownPrerenderRoutes.push(prerenderedRoute)\n              } else {\n                knownPrerenderRoutes.push(prerenderedRoute)\n              }\n            }\n\n            unknownPrerenderRoutes = getSortedRouteObjects(\n              unknownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n            knownPrerenderRoutes = getSortedRouteObjects(\n              knownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n\n            prerenderedRoutes = [\n              ...knownPrerenderRoutes,\n              ...unknownPrerenderRoutes,\n            ]\n\n            for (const prerenderedRoute of prerenderedRoutes) {\n              // TODO: check if still needed?\n              // Exclude the /_not-found route.\n              if (prerenderedRoute.path === UNDERSCORE_NOT_FOUND_ROUTE) {\n                continue\n              }\n\n              if (\n                isRoutePPREnabled &&\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                // If the route has unknown params, then we need to add it to\n                // the list of dynamic routes.\n                dynamicRoutes.push(prerenderedRoute.path)\n              } else {\n                // If the route doesn't have unknown params, then we need to\n                // add it to the list of routes.\n                routes.push(prerenderedRoute.path)\n              }\n            }\n\n            // Handle all the static routes.\n            for (const route of routes) {\n              if (isDynamicRoute(page) && route === page) continue\n              if (route === UNDERSCORE_NOT_FOUND_ROUTE) continue\n\n              const {\n                revalidate = appConfig.revalidate ?? false,\n                metadata = {},\n                hasEmptyPrelude,\n                hasPostponed,\n              } = exportResult.byPath.get(route) ?? {}\n\n              pageInfos.set(route, {\n                ...(pageInfos.get(route) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              if (revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route)\n\n                let dataRoute: string | null\n                if (isAppRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null | undefined\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const meta = collectMeta(metadata)\n\n                prerenderManifest.routes[route] = {\n                  initialStatus: meta.status,\n                  initialHeaders: meta.headers,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalPPR: isRoutePPREnabled,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                }\n              } else {\n                hasRevalidateZero = true\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isSSG: false,\n                  isStatic: false,\n                })\n              }\n            }\n\n            if (!hasRevalidateZero && isDynamicRoute(page)) {\n              // When PPR fallbacks aren't used, we need to include it here. If\n              // they are enabled, then it'll already be included in the\n              // prerendered routes.\n              if (!isRoutePPREnabled || !config.experimental.pprFallbacks) {\n                dynamicRoutes.push(page)\n              }\n\n              for (const route of dynamicRoutes) {\n                const normalizedRoute = normalizePagePath(route)\n\n                const { metadata, revalidate } =\n                  exportResult.byPath.get(route) ?? {}\n\n                let dataRoute: string | null = null\n                if (!isAppRouteHandler) {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | undefined\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isDynamicAppRoute: true,\n                  // if PPR is turned on and the route contains a dynamic segment,\n                  // we assume it'll be partially prerendered\n                  hasPostponed: isRoutePPREnabled,\n                })\n\n                const fallbackMode =\n                  fallbackModes.get(originalAppPath) ?? FallbackMode.NOT_FOUND\n\n                // When we're configured to serve a prerender, we should use the\n                // fallback revalidate from the export result. If it can't be\n                // found, mark that we should keep the shell forever (`false`).\n                let fallbackRevalidate: Revalidate | undefined =\n                  isRoutePPREnabled && fallbackMode === FallbackMode.PRERENDER\n                    ? revalidate ?? false\n                    : undefined\n\n                const fallback: Fallback = fallbackModeToFallbackField(\n                  fallbackMode,\n                  route\n                )\n\n                const meta =\n                  metadata &&\n                  isRoutePPREnabled &&\n                  fallbackMode === FallbackMode.PRERENDER\n                    ? collectMeta(metadata)\n                    : {}\n\n                prerenderManifest.dynamicRoutes[route] = {\n                  experimentalPPR: isRoutePPREnabled,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalBypassFor: bypassFor,\n                  routeRegex: normalizeRouteRegex(\n                    getNamedRouteRegex(route, false).re.source\n                  ),\n                  dataRoute,\n                  fallback,\n                  fallbackRevalidate,\n                  fallbackStatus: meta.status,\n                  fallbackHeaders: meta.headers,\n                  dataRouteRegex: !dataRoute\n                    ? null\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          dataRoute.replace(/\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.rsc$')\n                      ),\n                  prefetchDataRoute,\n                  prefetchDataRouteRegex: !prefetchDataRoute\n                    ? undefined\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          prefetchDataRoute.replace(/\\.prefetch\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(\n                          /\\(\\?:\\\\\\/\\)\\?\\$$/,\n                          '\\\\.prefetch\\\\.rsc$'\n                        )\n                      ),\n                }\n              }\n            }\n          })\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(exportOptions.outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound =\n                  prerenderManifest.notFoundRoutes.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (\n                      isSsg &&\n                      prerenderManifest.notFoundRoutes.includes(curPath)\n                    ) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      exportOptions.outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const hasAmp = hybridAmpPages.has(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (hasAmp && (!isSsg || (isSsg && !isDynamic))) {\n              const ampPage = `${file}.amp`\n              await moveExportedPage(page, ampPage, ampPage, isSsg, 'html')\n\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, 'json')\n              }\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    prerenderManifest.routes[localePage] = {\n                      initialRevalidateSeconds:\n                        exportResult.byPath.get(localePage)?.revalidate ??\n                        false,\n                      experimentalPPR: undefined,\n                      renderingMode: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${file}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                    }\n                  }\n                } else {\n                  prerenderManifest.routes[page] = {\n                    initialRevalidateSeconds:\n                      exportResult.byPath.get(page)?.revalidate ?? false,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds =\n                    exportResult.byPath.get(page)?.revalidate ?? false\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                for (const route of additionalPaths.get(page) ?? []) {\n                  const pageFile = normalizePagePath(route.path)\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'html',\n                      true\n                    )\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'json',\n                      true\n                    )\n                  }\n\n                  const initialRevalidateSeconds =\n                    exportResult.byPath.get(route.path)?.revalidate ?? false\n\n                  if (typeof initialRevalidateSeconds === 'undefined') {\n                    throw new Error(\"Invariant: page wasn't built\")\n                  }\n\n                  prerenderManifest.routes[route.path] = {\n                    initialRevalidateSeconds,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route.path)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = initialRevalidateSeconds\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(exportOptions.outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n      }\n\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner = createSpinner(`Collecting build traces`)\n\n      // ensure the worker is not left hanging\n      worker.end()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          prerenderManifest.dynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, false).re.source\n            ),\n            experimentalPPR: undefined,\n            renderingMode: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            fallbackRevalidate: undefined,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(\n                dataRoute.replace(/\\.json$/, ''),\n                false\n              ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.json$')\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales || [],\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (config.output === 'export') {\n        await writeFullyStaticExport(\n          config,\n          dir,\n          enabledDirectories,\n          configOutDir,\n          nextBuildSpan\n        )\n      }\n\n      if (config.output === 'standalone') {\n        await writeStandaloneDirectory(\n          nextBuildSpan,\n          distDir,\n          pageKeys,\n          denormalizedAppPages,\n          outputFileTracingRoot,\n          requiredServerFilesManifest,\n          middlewareManifest,\n          hasInstrumentationHook,\n          staticPages,\n          loadedEnvFiles,\n          appDir\n        )\n      }\n\n      if (postBuildSpinner) postBuildSpinner.stopAndPersist()\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          distPath: distDir,\n          buildId: buildId,\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          appBuildManifest,\n          buildManifest,\n          middlewareManifest,\n          gzipSize: config.experimental.gzipSize,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n\n      await shutdownPromise\n    })\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n    teardownHeapProfiler()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        sync: true,\n      })\n    }\n  }\n}\n"],"names":["createStaticWorker","build","pageToRoute","page","routeRegex","getNamedRouteRegex","regex","normalizeRouteRegex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","path","join","ciEnvironment","isCI","hasNextSupport","hasCache","existsSync","console","log","Log","prefixes","warn","writeFileUtf8","filePath","content","fs","writeFile","readFileUtf8","readFile","writeManifest","manifest","formatManifest","readManifest","JSON","parse","writePrerenderManifest","PRERENDER_MANIFEST","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","route","normalizeLocalePath","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","devalue","CLIENT_STATIC_FILES_PATH","writeFunctionsConfigManifest","SERVER_DIRECTORY","FUNCTIONS_CONFIG_MANIFEST","writeRequiredServerFilesManifest","requiredServerFiles","SERVER_FILES_MANIFEST","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","hostname","makeRe","port","dot","IMAGES_MANIFEST","version","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","copyTracedFiles","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","mkdir","dirname","recursive","copyFile","recursiveCopy","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","defaultConfig","memoryBasedWorkersCount","Math","max","min","floor","os","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","onActivity","Worker","logger","numWorkers","forkOptions","env","process","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","exportApp","default","pagesWorker","appWorker","buildExport","nextConfig","silent","outdir","end","getBuildId","isGenerateMode","generateBuildId","nanoid","IS_TURBOPACK_BUILD","TURBOPACK","TURBOPACK_BUILD","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","experimentalBuildMode","traceUploadUrl","isCompileMode","loadedConfig","trace","undefined","buildMode","isTurboBuild","String","__NEXT_VERSION","NextBuildContext","mappedPages","traceFn","loadEnvConfig","turborepoAccessTraceResult","TurborepoAccessTraceResult","turborepoTraceAccess","loadConfig","PHASE_PRODUCTION_BUILD","NEXT_DEPLOYMENT_ID","deploymentId","hasCustomExportOutput","setGlobal","flyingShuttle","isFullFlyingShuttle","mode","isStoreOnlyFlyingShuttle","shuttleDir","customRoutes","loadCustomRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","telemetry","Telemetry","publicDir","pagesDir","findPagesDir","app","encryptionKey","generateEncryptionKeyBase64","isSrcDir","startsWith","hasPublicDir","record","eventCliSession","webpackVersion","cliCommand","hasNowJson","findUp","cwd","isCustomServer","turboFlag","eventNextPlugins","then","events","eventSwcPlugins","envInfo","expFeatureInfo","getStartServerInfo","logStartInfo","networkUrl","appUrl","ignoreESLint","Boolean","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","startTypeChecking","error","flush","exit","buildLintEvent","featureName","invocationCount","eventName","EVENT_BUILD_FEATURE_USAGE","payload","validFileMatcher","createValidFileMatcher","pageExtensions","pagesPaths","recursiveReadDir","pathnameFilter","isPageFile","changedPagePathsResult","detectChangedEntries","stringify","changed","middlewareDetectionRegExp","RegExp","MIDDLEWARE_FILENAME","instrumentationHookDetectionRegExp","INSTRUMENTATION_HOOK_FILENAME","rootDir","rootPaths","Array","from","getFilesInDir","some","include","test","sortByPageExts","replace","hasMiddlewareFile","previewProps","previewModeId","crypto","randomBytes","toString","previewModeSigningKey","previewModeEncryptionKey","createPagesMapping","isDev","pagesType","PAGE_TYPES","PAGES","pagePaths","mappedAppPages","changedAppPathsResult","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","normalizeAppPath","pagePath","appPath","add","generateInterceptionRoutesRewrites","basePath","totalAppPagesCount","numConflictingAppPaths","conflictingPublicFiles","hasPages404","PAGES_DIR_ALIAS","hasApp404","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","hasCustomErrorPage","hasPublicUnderScoreNextDir","Error","PUBLIC_DIR_MIDDLEWARE_CONFLICT","hasPublicPageFile","fileExists","FileType","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","isAppPPREnabled","checkIsAppPPREnabled","ppr","routesManifestPath","ROUTES_MANIFEST","routesManifest","sortedRoutes","getSortedRoutes","staticRoutes","isDynamicRoute","isReservedPage","pages404","caseSensitive","caseSensitiveRoutes","r","buildCustomRoute","dataRoutes","i18n","rsc","header","RSC_HEADER","varyHeader","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_ROUTER_PREFETCH_HEADER","prefetchHeader","didPostponeHeader","NEXT_DID_POSTPONE_HEADER","contentTypeHeader","RSC_CONTENT_TYPE_HEADER","suffix","RSC_SUFFIX","prefetchSuffix","RSC_PREFETCH_SUFFIX","skipMiddlewareUrlNormalize","chain","NEXT_RESUME_HEADER","clientRouterFilters","clientRouterFilter","nonInternalRedirects","internal","filterPaths","unchanged","entry","getPageFromPath","item","createClientRouterFilter","clientRouterFilterRedirects","clientRouterFilterAllowedRate","distDirCreated","err","isError","code","isWriteable","cleanDistDir","recursiveDelete","recordFrameworkVersion","updateBuildDiagnostics","buildStage","pagesManifestPath","PAGES_MANIFEST","turbopackBuild","validateTurboNextConfig","startTime","hrtime","bindings","loadBindings","useWasmBinary","dev","supportedBrowsers","project","turbo","createProject","projectPath","rootPath","root","jsConfig","getTurbopackJsConfig","watch","defineEnv","createDefineEnv","isTurbopack","fetchCacheKeyPrefix","middlewareMatchers","browserslistQuery","memoryLimit","type","entrypointsSubscription","entrypointsSubscribe","currentEntrypoints","global","document","middleware","instrumentation","Map","currentEntryIssues","manifestLoader","TurbopackManifestLoader","entrypointsResult","next","done","return","catch","entrypoints","value","topLevelErrors","issue","issues","message","formatIssue","e","handleEntrypoints","devRewrites","productionRewrites","logErrors","progress","createProgress","size","promises","sema","Sema","enqueue","fn","acquire","release","handleRouteType","handlePagesErrorRoute","Promise","all","writeManifests","errors","warnings","entryIssues","values","severity","isRelevantWarning","shutdownPromise","shutdown","duration","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","setAttribute","info","traceMemoryUsage","buildOptions","compilerDuration","rest","event","eventBuildCompleted","durationInSeconds","serverBuildPromise","webpackBuild","res","buildTraceWorker","collectBuildTraces","edgeRuntimeRoutes","collectRoutesUsingEdgeRuntime","hasSsrAmpPages","isFlyingShuttle","edgeBuildPromise","postCompileSpinner","createSpinner","buildManifestPath","BUILD_MANIFEST","appBuildManifestPath","APP_BUILD_MANIFEST","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalPaths","staticPaths","appNormalizedPaths","fallbackModes","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","appPathRoutes","appPathsManifest","APP_PATHS_MANIFEST","key","APP_PATH_ROUTES_MANIFEST","NEXT_PHASE","worker","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","isAppPPRFallbacksEnabled","pprFallbacks","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","computeFromManifest","gzipSize","MIDDLEWARE_MANIFEST","actionManifest","SERVER_REFERENCE_MANIFEST","entriesWithAction","id","node","workers","edge","pageType","checkPageSpan","actualPage","normalizePagePath","totalSize","getJsPageSizeInKb","isRoutePPREnabled","isSSG","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","normalizePathSep","originalAppPath","originalPath","normalizedPath","pageFilePath","isAppBuiltinNotFoundPage","isInsideAppDir","staticInfo","getStaticInfoIncludingLayouts","extraConfig","pageRuntime","runtime","RSC_MODULE_TYPES","client","edgeInfo","isEdgeRuntime","manifestKey","isPageStaticSpan","workerResult","parentId","getId","cacheHandler","isrFlushToDisk","maxMemoryCacheSize","cacheMaxMemorySize","set","warnOnce","prerenderedRoutes","appConfig","revalidate","isDynamic","hasGenerateStaticParams","encoded","fallbackRouteParams","dynamic","prerenderFallbackMode","hasStaticProps","isAmpOnly","FallbackMode","BLOCKING_STATIC_RENDER","PRERENDER","hasServerProps","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","delete","STATIC_STATUS_PAGES","initialRevalidateSeconds","pageDuration","ssgPageDurations","hasEmptyPrelude","hadUnsupportedValue","errorPageResult","nonStaticErrorPage","returnValue","stopAndPersist","bold","yellow","instrumentationHookEntryFiles","requiredServerFilesManifest","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","sri","SUBRESOURCE_INTEGRITY_MANIFEST","REACT_LOADABLE_MANIFEST","BUILD_ID_FILE","NEXT_FONT_MANIFEST","nonNullable","ignore","buildDataRoute","useStaticPages404","pg","writeBuildId","optimizeCss","globOrig","cssFilePaths","reject","features","nextScriptWorkers","feature","stitchResult","stitchBuilds","edgePreviewProps","__NEXT_PREVIEW_MODE_ID","__NEXT_PREVIEW_MODE_ENCRYPTION_KEY","__NEXT_PREVIEW_MODE_SIGNING_KEY","allowedErrorRate","storeShuttle","inlineStaticEnv","notFoundRoutes","preview","tbdPrerenderRoutes","usedStaticStatusPages","forEach","has","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","detectConflictingPaths","exportConfig","exportPathMap","defaultMap","query","__nextFallback","__nextSsgPath","get","isDynamicError","checkIsRoutePPREnabled","_fallbackRouteParams","_isDynamicError","_isAppDir","_isRoutePPREnabled","isSsg","isFallback","locale","__nextLocale","exportOptions","statusMessage","exportResult","NEXT_SSG_FETCH_METRICS","recordFetchMetrics","writeTurborepoAccessTraceResult","traces","turborepoAccessTraceResults","ssgNotFoundPaths","serverBundle","getPagePath","unlink","hasRevalidateZero","byPath","isAppRouteHandler","isAppRouteRoute","bypassFor","ACTION_HEADER","unknownPrerenderRoutes","knownPrerenderRoutes","prerenderedRoute","getSortedRouteObjects","UNDERSCORE_NOT_FOUND_ROUTE","metadata","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","meta","collectMeta","initialStatus","status","initialHeaders","renderingMode","RenderingMode","PARTIALLY_STATIC","STATIC","experimentalPPR","experimentalBypassFor","isDynamicAppRoute","fallbackMode","NOT_FOUND","fallbackRevalidate","fallbackModeToFallbackField","fallbackStatus","fallbackHeaders","dataRouteRegex","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","split","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","pageInfo","durationInfo","byPage","durationsByPath","hasHtmlOutput","ampPage","localePage","pageFile","rm","force","postBuildSpinner","buildTracesSpinner","analysisEnd","eventBuildOptimize","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","eventBuildFeatureUsage","usages","eventPackageUsedInGetServerSideProps","packagesUsedInServerSideProps","tbdRoute","allowedRevalidateHeaderKeys","EXPORT_MARKER","hasExportPathMap","exportTrailingSlash","trailingSlash","EXPORT_DETAIL","verifyPartytownSetup","printCustomRoutes","printTreeView","distPath","lockfilePatchPromise","cur","flushAllTraces","teardownTraceSubscriber","teardownHeapProfiler","uploadTrace","projectDir","sync"],"mappings":";;;;;;;;;;;;;;;IAqnBgBA,kBAAkB;eAAlBA;;IA8DhB,OA07FC;eA17F6BC;;;QA3qBvB;qBAE4C;4BACtB;+DACV;2BACI;oBACoB;2DAC5B;wBACQ;8BACO;gEACV;+DACD;0BACI;2BACF;6DACJ;2BAUV;4BAC8B;8BACR;0EAGtB;6BAQqB;iCACI;sCACK;kCACG;4BA6BjC;uBAKA;+DAEgB;mCAEW;yBACN;gEACG;sCAKxB;wBAUA;yBAEmB;mCACU;yBAM7B;2BACoB;iCACK;6BACJ;6DACP;gEACK;uBACkC;wBAarD;8BAEsB;qCACO;gEAChB;+BAEU;+BACA;kCACG;qBAO1B;4BAC4B;+BACL;4BACE;0BACC;kCAQ1B;8BACsB;8BACsB;kCAClB;iCACD;0CACS;8BACF;2BACL;oDACiB;gCAEpB;oCACI;gCAEJ;kCAKxB;4BAC0C;wBAEX;gCAS/B;gCACiC;kCAEP;0BACF;wBACE;iCACW;oEAEpB;qBAIjB;sCAIA;8BACsB;8BACA;iCACG;0BAC0B;+BAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2K9B,SAASC,YAAYC,IAAY;IAC/B,MAAMC,aAAaC,IAAAA,8BAAkB,EAACF,MAAM;IAC5C,OAAO;QACLA;QACAG,OAAOC,IAAAA,qCAAmB,EAACH,WAAWI,EAAE,CAACC,MAAM;QAC/CC,WAAWN,WAAWM,SAAS;QAC/BC,YAAYP,WAAWO,UAAU;IACnC;AACF;AAEA,SAASC,YAAYC,OAAe;IAClC,MAAMC,WAAWC,aAAI,CAACC,IAAI,CAACH,SAAS;IACpC,IAAII,QAAcC,IAAI,IAAI,CAACD,QAAcE,cAAc,EAAE;QACvD,MAAMC,WAAWC,IAAAA,cAAU,EAACP;QAE5B,IAAI,CAACM,UAAU;YACb,kGAAkG;YAClG,sBAAsB;YACtBE,QAAQC,GAAG,CACT,CAAC,EAAEC,KAAIC,QAAQ,CAACC,IAAI,CAAC,+HAA+H,CAAC;QAEzJ;IACF;IACA,OAAOZ;AACT;AAEA,eAAea,cAAcC,QAAgB,EAAEC,OAAe;IAC5D,MAAMC,YAAE,CAACC,SAAS,CAACH,UAAUC,SAAS;AACxC;AAEA,SAASG,aAAaJ,QAAgB;IACpC,OAAOE,YAAE,CAACG,QAAQ,CAACL,UAAU;AAC/B;AAEA,eAAeM,cACbN,QAAgB,EAChBO,QAAW;IAEX,MAAMR,cAAcC,UAAUQ,IAAAA,8BAAc,EAACD;AAC/C;AAEA,eAAeE,aAA+BT,QAAgB;IAC5D,OAAOU,KAAKC,KAAK,CAAC,MAAMP,aAAaJ;AACvC;AAEA,eAAeY,uBACb3B,OAAe,EACfsB,QAAyC;IAEzC,MAAMD,cAAcnB,aAAI,CAACC,IAAI,CAACH,SAAS4B,8BAAkB,GAAGN;AAC9D;AAEA,eAAeO,uBACbC,iBAAkD,EAClD,EACEC,OAAO,EACP/B,OAAO,EACPgC,OAAO,EACiD;IAE1D,MAAMC,WAAW,IAAIC,IACnB;WACKC,OAAOC,OAAO,CAACN,kBAAkBO,MAAM,CACxC,4BAA4B;SAC3BC,MAAM,CAAC,CAAC,GAAG,EAAEC,QAAQ,EAAE,CAAC,GAAKA,YAAY,MACzCC,GAAG,CAAC,CAAC,CAACC,MAAM,GAAKC,IAAAA,wCAAmB,EAACD,OAAOT,SAASW,QAAQ;WAC7DR,OAAOS,IAAI,CAACd,kBAAkBe,aAAa;KAC/C,CAACC,IAAI;IAGR,MAAMC,2BAA2B,CAAC,oBAAoB,EAAEC,IAAAA,gBAAO,EAC7Df,UACA,iDAAiD,CAAC;IAEpD,MAAMnB,cACJZ,aAAI,CAACC,IAAI,CAACH,SAASiD,oCAAwB,EAAElB,SAAS,oBACtDgB;AAEJ;AAOA,eAAeG,6BACblD,OAAe,EACfsB,QAAiC;IAEjC,MAAMD,cACJnB,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,EAAEC,qCAAyB,GAC9D9B;AAEJ;AAWA,eAAe+B,iCACbrD,OAAe,EACfsD,mBAAgD;IAEhD,MAAMjC,cACJnB,aAAI,CAACC,IAAI,CAACH,SAASuD,iCAAqB,GACxCD;AAEJ;AAEA,eAAeE,oBACbxD,OAAe,EACfyD,MAA0B;QAKDA;IAHzB,MAAMC,SAAS;QAAE,GAAGD,OAAOC,MAAM;IAAC;IAClC,MAAM,EAAEC,WAAW,EAAEC,UAAU,EAAE,GAAGF;IAClCA,OAAeG,KAAK,GAAG;WAAIF;WAAgBC;KAAW;IACxDF,OAAOI,cAAc,GAAG,AAACL,CAAAA,CAAAA,2BAAAA,iBAAAA,OAAQC,MAAM,qBAAdD,eAAgBK,cAAc,KAAI,EAAE,AAAD,EAAGtB,GAAG,CAAC,CAACuB,IAAO,CAAA;YACzE,6CAA6C;YAC7CC,UAAUD,EAAEC,QAAQ;YACpBC,UAAUC,IAAAA,iBAAM,EAACH,EAAEE,QAAQ,EAAErE,MAAM;YACnCuE,MAAMJ,EAAEI,IAAI;YACZxB,UAAUuB,IAAAA,iBAAM,EAACH,EAAEpB,QAAQ,IAAI,MAAM;gBAAEyB,KAAK;YAAK,GAAGxE,MAAM;QAC5D,CAAA;IAEA,MAAMyB,cAAcnB,aAAI,CAACC,IAAI,CAACH,SAASqE,2BAAe,GAAG;QACvDC,SAAS;QACTZ;IACF;AACF;AAEA,MAAMa,uBAAuB;AAC7B,eAAeC,yBACbC,aAAmB,EACnBzE,OAAe,EACf0E,QAAwD,EACxDC,oBAA0C,EAC1CC,qBAA6B,EAC7BtB,mBAAgD,EAChDuB,kBAAsC,EACtCC,sBAA+B,EAC/BC,WAAwB,EACxBC,cAA8B,EAC9BC,MAA0B;IAE1B,MAAMR,cACHS,UAAU,CAAC,8BACXC,YAAY,CAAC;QACZ,MAAMC,IAAAA,uBAAe,EACnB,kFAAkF;QAClF9B,oBAAoB2B,MAAM,EAC1BjF,SACA0E,SAASW,KAAK,EACdV,sBACAC,uBACAtB,oBAAoBG,MAAM,EAC1BoB,oBACAC,wBACAC;QAGF,KAAK,MAAMO,QAAQ;eACdhC,oBAAoBiC,KAAK;YAC5BrF,aAAI,CAACC,IAAI,CAACmD,oBAAoBG,MAAM,CAACzD,OAAO,EAAEuD,iCAAqB;eAChEyB,eAAeQ,MAAM,CAAW,CAACC,KAAKC;gBACvC,IAAI;oBAAC;oBAAQ;iBAAkB,CAACC,QAAQ,CAACD,QAAQxF,IAAI,GAAG;oBACtDuF,IAAIG,IAAI,CAACF,QAAQxF,IAAI;gBACvB;gBACA,OAAOuF;YACT,GAAG,EAAE;SACN,CAAE;YACD,kFAAkF;YAClF,MAAM1E,WAAWb,aAAI,CAACC,IAAI,CAACmD,oBAAoB2B,MAAM,EAAEK;YACvD,MAAMO,aAAa3F,aAAI,CAACC,IAAI,CAC1BH,SACAuE,sBACArE,aAAI,CAAC4F,QAAQ,CAAClB,uBAAuB7D;YAEvC,MAAME,YAAE,CAAC8E,KAAK,CAAC7F,aAAI,CAAC8F,OAAO,CAACH,aAAa;gBACvCI,WAAW;YACb;YACA,MAAMhF,YAAE,CAACiF,QAAQ,CAACnF,UAAU8E;QAC9B;QACA,MAAMM,IAAAA,4BAAa,EACjBjG,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,EAAE,UACrCjD,aAAI,CAACC,IAAI,CACPH,SACAuE,sBACArE,aAAI,CAAC4F,QAAQ,CAAClB,uBAAuB5E,UACrCmD,4BAAgB,EAChB,UAEF;YAAEiD,WAAW;QAAK;QAEpB,IAAInB,QAAQ;YACV,MAAMoB,oBAAoBnG,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,EAAE;YAC/D,IAAI3C,IAAAA,cAAU,EAAC6F,oBAAoB;gBACjC,MAAMF,IAAAA,4BAAa,EACjBE,mBACAnG,aAAI,CAACC,IAAI,CACPH,SACAuE,sBACArE,aAAI,CAAC4F,QAAQ,CAAClB,uBAAuB5E,UACrCmD,4BAAgB,EAChB,QAEF;oBAAEiD,WAAW;gBAAK;YAEtB;QACF;IACF;AACJ;AAEA,SAASE,mBAAmB7C,MAA0B;IACpD,IACEA,OAAO8C,YAAY,CAACC,IAAI,IACxB/C,OAAO8C,YAAY,CAACC,IAAI,KAAKC,2BAAa,CAACF,YAAY,CAAEC,IAAI,EAC7D;QACA,OAAO/C,OAAO8C,YAAY,CAACC,IAAI;IACjC;IAEA,IAAI/C,OAAO8C,YAAY,CAACG,uBAAuB,EAAE;QAC/C,OAAOC,KAAKC,GAAG,CACbD,KAAKE,GAAG,CAACpD,OAAO8C,YAAY,CAACC,IAAI,IAAI,GAAGG,KAAKG,KAAK,CAACC,WAAE,CAACC,OAAO,KAAK,OAClE,iCAAiC;QACjC;IAEJ;IAEA,IAAIvD,OAAO8C,YAAY,CAACC,IAAI,EAAE;QAC5B,OAAO/C,OAAO8C,YAAY,CAACC,IAAI;IACjC;IAEA,qDAAqD;IACrD,OAAO;AACT;AAEA,MAAMS,mBAAmBC,QAAQC,OAAO,CAAC;AACzC,MAAMC,6BAA6B;IACjC;IACA;IACA;IACA;CACD;AAEM,SAASjI,mBACdsE,MAA0B,EAC1B4D,UAAuB;IAEvB,OAAO,IAAIC,cAAM,CAACL,kBAAkB;QAClCM,QAAQ5G;QACR6G,YAAYlB,mBAAmB7C;QAC/B4D;QACAI,aAAa;YACXC,KAAKC,QAAQD,GAAG;QAClB;QACAE,qBAAqBnE,OAAO8C,YAAY,CAACsB,aAAa;QACtDC,gBAAgBV;IAClB;AACF;AAEA,eAAeW,uBACbtE,MAA0B,EAC1BuE,GAAW,EACXC,kBAA0C,EAC1CC,YAAoB,EACpBzD,aAAmB;IAEnB,MAAM0D,YAAYjB,QAAQ,aACvBkB,OAAO;IAEV,MAAMC,cAAclJ,mBAAmBsE;IACvC,MAAM6E,YAAYnJ,mBAAmBsE;IAErC,MAAM0E,UACJH,KACA;QACEO,aAAa;QACbC,YAAY/E;QACZwE;QACAQ,QAAQ;QACRC,QAAQxI,aAAI,CAACC,IAAI,CAAC6H,KAAKE;QACvBV,YAAYlB,mBAAmB7C;IACjC,GACAgB;IAGF4D,YAAYM,GAAG;IACfL,UAAUK,GAAG;AACf;AAEA,eAAeC,WACbC,cAAuB,EACvB7I,OAAe,EACfyE,aAAmB,EACnBhB,MAA0B;IAE1B,IAAIoF,gBAAgB;QAClB,OAAO,MAAM5H,YAAE,CAACG,QAAQ,CAAClB,aAAI,CAACC,IAAI,CAACH,SAAS,aAAa;IAC3D;IACA,OAAO,MAAMyE,cACVS,UAAU,CAAC,oBACXC,YAAY,CAAC,IAAM2D,IAAAA,gCAAe,EAACrF,OAAOqF,eAAe,EAAEC,gBAAM;AACtE;AAEA,MAAMC,qBAAqBrB,QAAQD,GAAG,CAACuB,SAAS,IAAItB,QAAQD,GAAG,CAACwB,eAAe;AAEhE,eAAe9J,MAC5B4I,GAAW,EACXmB,2BAA2B,KAAK,EAChCC,cAAc,KAAK,EACnBC,UAAU,IAAI,EACdC,aAAa,KAAK,EAClBC,aAAa,KAAK,EAClBC,iBAAiB,KAAK,EACtBC,qBAAyD,EACzDC,cAAkC;IAElC,MAAMC,gBAAgBF,0BAA0B;IAChD,MAAMZ,iBAAiBY,0BAA0B;IAEjD,IAAIG;IACJ,IAAI;QACF,MAAMnF,gBAAgBoF,IAAAA,YAAK,EAAC,cAAcC,WAAW;YACnDC,WAAWN;YACXO,cAAcC,OAAOT;YACrBlF,SAASqD,QAAQD,GAAG,CAACwC,cAAc;QACrC;QAEAC,8BAAgB,CAAC1F,aAAa,GAAGA;QACjC0F,8BAAgB,CAACnC,GAAG,GAAGA;QACvBmC,8BAAgB,CAACZ,UAAU,GAAGA;QAC9BY,8BAAgB,CAAChB,wBAAwB,GAAGA;QAC5CgB,8BAAgB,CAACb,UAAU,GAAGA;QAE9B,MAAM7E,cAAcU,YAAY,CAAC;gBA2XXiF;YA1XpB,4EAA4E;YAC5E,MAAM,EAAEpF,cAAc,EAAE,GAAGP,cACxBS,UAAU,CAAC,eACXmF,OAAO,CAAC,IAAMC,IAAAA,kBAAa,EAACtC,KAAK,OAAOrH;YAC3CwJ,8BAAgB,CAACnF,cAAc,GAAGA;YAElC,MAAMuF,6BAA6B,IAAIC,gDAA0B;YACjE,MAAM/G,SAA6B,MAAMgB,cACtCS,UAAU,CAAC,oBACXC,YAAY,CAAC,IACZsF,IAAAA,0CAAoB,EAClB,IACEC,IAAAA,eAAU,EAACC,kCAAsB,EAAE3C,KAAK;wBACtC,sCAAsC;wBACtCS,QAAQ;wBACRU;oBACF,IACFoB;YAGNX,eAAenG;YAEfkE,QAAQD,GAAG,CAACkD,kBAAkB,GAAGnH,OAAOoH,YAAY,IAAI;YACxDV,8BAAgB,CAAC1G,MAAM,GAAGA;YAE1B,IAAIyE,eAAe;YACnB,IAAI4C,IAAAA,6BAAqB,EAACrH,SAAS;gBACjCyE,eAAezE,OAAOzD,OAAO;gBAC7ByD,OAAOzD,OAAO,GAAG;YACnB;YACA,MAAMA,UAAUE,aAAI,CAACC,IAAI,CAAC6H,KAAKvE,OAAOzD,OAAO;YAC7C+K,IAAAA,gBAAS,EAAC,SAASJ,kCAAsB;YACzCI,IAAAA,gBAAS,EAAC,WAAW/K;YAErB,MAAM+B,UAAU,MAAM6G,WACpBC,gBACA7I,SACAyE,eACAhB;YAEF0G,8BAAgB,CAACpI,OAAO,GAAGA;YAE3B,MAAM,EAAEiJ,aAAa,EAAE,GAAGvH,OAAO8C,YAAY;YAC7C,MAAM0E,sBAAsBD,CAAAA,iCAAAA,cAAeE,IAAI,MAAK;YACpD,MAAMC,2BAA2BH,CAAAA,iCAAAA,cAAeE,IAAI,MAAK;YAEzD,MAAME,aAAalL,aAAI,CAACC,IAAI,CAACH,SAAS,SAAS;YAE/C,IAAIgL,eAAe;gBACjB,MAAM/J,YAAE,CAAC8E,KAAK,CAACqF,YAAY;oBACzBnF,WAAW;gBACb;YACF;YAEA,MAAMoF,eAA6B,MAAM5G,cACtCS,UAAU,CAAC,sBACXC,YAAY,CAAC,IAAMmG,IAAAA,yBAAgB,EAAC7H;YAEvC,MAAM,EAAE8H,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAE,GAAGJ;YACzC,MAAMK,mBAA8B;mBAC/BF,SAASG,WAAW;mBACpBH,SAASI,UAAU;mBACnBJ,SAASK,QAAQ;aACrB;YACD,MAAMC,cAAcJ,iBAAiBK,MAAM,GAAG;YAE9C5B,8BAAgB,CAAC6B,gBAAgB,GAAGvI,OAAOwI,iBAAiB;YAC5D9B,8BAAgB,CAAC+B,iBAAiB,GAAGzI,OAAO0I,kBAAkB;YAE9D,MAAMlM,WAAWF,YAAYC;YAE7B,MAAMoM,YAAY,IAAIC,kBAAS,CAAC;gBAAErM;YAAQ;YAE1C+K,IAAAA,gBAAS,EAAC,aAAaqB;YAEvB,MAAME,YAAYpM,aAAI,CAACC,IAAI,CAAC6H,KAAK;YACjC,MAAM,EAAEuE,QAAQ,EAAEtH,MAAM,EAAE,GAAGuH,IAAAA,0BAAY,EAACxE;YAC1CmC,8BAAgB,CAACoC,QAAQ,GAAGA;YAC5BpC,8BAAgB,CAAClF,MAAM,GAAGA;YAE1B,MAAMgD,qBAA6C;gBACjDwE,KAAK,OAAOxH,WAAW;gBACvBI,OAAO,OAAOkH,aAAa;YAC7B;YAEA,mDAAmD;YACnD,wFAAwF;YACxF,MAAMG,gBAAgB,MAAMC,IAAAA,4CAA2B;YACvDxC,8BAAgB,CAACuC,aAAa,GAAGA;YAEjC,MAAME,WAAW1M,aAAI,CAClB4F,QAAQ,CAACkC,KAAKuE,YAAYtH,UAAU,IACpC4H,UAAU,CAAC;YACd,MAAMC,eAAetM,IAAAA,cAAU,EAAC8L;YAEhCF,UAAUW,MAAM,CACdC,IAAAA,uBAAe,EAAChF,KAAKvE,QAAQ;gBAC3BwJ,gBAAgB;gBAChBC,YAAY;gBACZN;gBACAO,YAAY,CAAC,CAAE,MAAMC,IAAAA,eAAM,EAAC,YAAY;oBAAEC,KAAKrF;gBAAI;gBACnDsF,gBAAgB;gBAChBC,WAAW;gBACXhB,UAAU,CAAC,CAACA;gBACZtH,QAAQ,CAAC,CAACA;YACZ;YAGFuI,IAAAA,wBAAgB,EAACtN,aAAI,CAACiH,OAAO,CAACa,MAAMyF,IAAI,CAAC,CAACC,SACxCtB,UAAUW,MAAM,CAACW;YAGnBC,IAAAA,2BAAe,EAACzN,aAAI,CAACiH,OAAO,CAACa,MAAMvE,QAAQgK,IAAI,CAAC,CAACC,SAC/CtB,UAAUW,MAAM,CAACW;YAGnB,qDAAqD;YACrD,MAAM,EAAEE,OAAO,EAAEC,cAAc,EAAE,GAAG,MAAMC,IAAAA,8BAAkB,EAAC9F,KAAK;YAClE+F,IAAAA,wBAAY,EAAC;gBACXC,YAAY;gBACZC,QAAQ;gBACRL;gBACAC;YACF;YAEA,MAAMK,eAAeC,QAAQ1K,OAAO2K,MAAM,CAACC,kBAAkB;YAC7D,MAAMC,aAAa,CAACJ,gBAAgB7E;YAEpC,MAAMkF,sBAA+D;gBACnEvG;gBACA/C;gBACAsH;gBACAlD;gBACAiF;gBACAJ;gBACA9B;gBACA3H;gBACAhB;gBACAxD;YACF;YAEA,sEAAsE;YACtE,oEAAoE;YACpE,aAAa;YACb,IAAI,CAACgF,UAAU,CAAC0E,eACd,MAAM6E,IAAAA,4BAAiB,EAACD;YAE1B,IAAItJ,UAAU,mBAAmBxB,QAAQ;gBACvC9C,KAAI8N,KAAK,CACP;gBAEF,MAAMrC,UAAUsC,KAAK;gBACrB/G,QAAQgH,IAAI,CAAC;YACf;YAEA,MAAMC,iBAAyC;gBAC7CC,aAAa;gBACbC,iBAAiBR,aAAa,IAAI;YACpC;YACAlC,UAAUW,MAAM,CAAC;gBACfgC,WAAWC,iCAAyB;gBACpCC,SAASL;YACX;YAEA,MAAMM,mBAAmBC,IAAAA,oCAAsB,EAC7C1L,OAAO2L,cAAc,EACrBnK;YAGF,IAAIoK,aACF,CAAC9F,cAAcgD,WACX,MAAM9H,cAAcS,UAAU,CAAC,iBAAiBC,YAAY,CAAC,IAC3DmK,IAAAA,kCAAgB,EAAC/C,UAAU;oBACzBgD,gBAAgBL,iBAAiBM,UAAU;gBAC7C,MAEF,EAAE;YAER,IAAIC;YAOJ,IAAIJ,cAAcpE,qBAAqB;gBACrCwE,yBAAyB,MAAMC,IAAAA,0CAAoB,EAAC;oBAClDL;oBACAD,gBAAgB3L,OAAO2L,cAAc;oBACrCpP;oBACAoL;oBACA3H;gBACF;gBACAhD,QAAQC,GAAG,CACTe,KAAKkO,SAAS,CACZ;oBACEF,wBAAwBA,uBAAuBG,OAAO,CAACvK,KAAK;gBAC9D,GACA,MACA;gBAGJgK,aAAaI,uBAAuBG,OAAO,CAACvK,KAAK;YACnD;YAEA,MAAMwK,4BAA4B,IAAIC,OACpC,CAAC,CAAC,EAAEC,8BAAmB,CAAC,MAAM,EAAEtM,OAAO2L,cAAc,CAACjP,IAAI,CAAC,KAAK,EAAE,CAAC;YAGrE,MAAM6P,qCAAqC,IAAIF,OAC7C,CAAC,CAAC,EAAEG,wCAA6B,CAAC,MAAM,EAAExM,OAAO2L,cAAc,CAACjP,IAAI,CAClE,KACA,EAAE,CAAC;YAGP,MAAM+P,UAAUhQ,aAAI,CAACC,IAAI,CAAEoM,YAAYtH,QAAU;YACjD,MAAMU,WAAW;gBACfkK;gBACAG;aACD;YAED,MAAMG,YAAYC,MAAMC,IAAI,CAAC,MAAMC,IAAAA,4BAAa,EAACJ,UAC9C5N,MAAM,CAAC,CAACgD,OAASK,SAAS4K,IAAI,CAAC,CAACC,UAAYA,QAAQC,IAAI,CAACnL,QACzDxC,IAAI,CAAC4N,IAAAA,uBAAc,EAACjN,OAAO2L,cAAc,GACzC5M,GAAG,CAAC,CAAC8C,OAASpF,aAAI,CAACC,IAAI,CAAC+P,SAAS5K,MAAMqL,OAAO,CAAC3I,KAAK;YAEvD,MAAMlD,yBAAyBqL,UAAUI,IAAI,CAAC,CAACxM,IAC7CA,EAAE4B,QAAQ,CAACsK,wCAA6B;YAE1C,MAAMW,oBAAoBT,UAAUI,IAAI,CAAC,CAACxM,IACxCA,EAAE4B,QAAQ,CAACoK,8BAAmB;YAGhC5F,8BAAgB,CAACrF,sBAAsB,GAAGA;YAE1C,MAAM+L,eAAkC;gBACtCC,eAAeC,eAAM,CAACC,WAAW,CAAC,IAAIC,QAAQ,CAAC;gBAC/CC,uBAAuBH,eAAM,CAACC,WAAW,CAAC,IAAIC,QAAQ,CAAC;gBACvDE,0BAA0BJ,eAAM,CAACC,WAAW,CAAC,IAAIC,QAAQ,CAAC;YAC5D;YACA9G,8BAAgB,CAAC0G,YAAY,GAAGA;YAEhC,MAAMzG,cAAc,MAAM3F,cACvBS,UAAU,CAAC,wBACXC,YAAY,CAAC,IACZiM,IAAAA,2BAAkB,EAAC;oBACjBC,OAAO;oBACPjC,gBAAgB3L,OAAO2L,cAAc;oBACrCkC,WAAWC,qBAAU,CAACC,KAAK;oBAC3BC,WAAWpC;oBACX9C;oBACAtH;gBACF;YAEJkF,8BAAgB,CAACC,WAAW,GAAGA;YAE/B,IAAIsH;YACJ,IAAI/M;YACJ,IAAIgN;YAOJ,IAAI1M,QAAQ;gBACV,IAAI2M,WAAW,MAAMnN,cAClBS,UAAU,CAAC,qBACXC,YAAY,CAAC,IACZmK,IAAAA,kCAAgB,EAACrK,QAAQ;wBACvBsK,gBAAgB,CAACsC,eACf3C,iBAAiB4C,eAAe,CAACD,iBACjC,8DAA8D;4BAC9D,gCAAgC;4BAChC3C,iBAAiB6C,cAAc,CAACF;wBAClCG,kBAAkB,CAACC,OAASA,KAAKpF,UAAU,CAAC;oBAC9C;gBAGJ,IAAI+E,YAAY3G,qBAAqB;oBACnC0G,wBAAwB,MAAMjC,IAAAA,0CAAoB,EAAC;wBACjDkC;wBACAxC,gBAAgB3L,OAAO2L,cAAc;wBACrCpP;wBACAoL;wBACA3H;oBACF;oBACAhD,QAAQC,GAAG,CACTe,KAAKkO,SAAS,CACZ;wBACEgC,uBAAuBA,sBAAsB/B,OAAO,CAACnD,GAAG;oBAC1D,GACA,MACA;oBAGJmF,WAAWD,sBAAsB/B,OAAO,CAACnD,GAAG;gBAC9C;gBAEAiF,iBAAiB,MAAMjN,cACpBS,UAAU,CAAC,sBACXC,YAAY,CAAC,IACZiM,IAAAA,2BAAkB,EAAC;wBACjBK,WAAWG;wBACXP,OAAO;wBACPC,WAAWC,qBAAU,CAACW,GAAG;wBACzB9C,gBAAgB3L,OAAO2L,cAAc;wBACrC7C;wBACAtH;oBACF;gBAGJkF,8BAAgB,CAACuH,cAAc,GAAGA;YACpC;YAEA,MAAMS,kBAAkB,MAAMf,IAAAA,2BAAkB,EAAC;gBAC/CC,OAAO;gBACPjC,gBAAgB3L,OAAO2L,cAAc;gBACrCqC,WAAWtB;gBACXmB,WAAWC,qBAAU,CAACa,IAAI;gBAC1B7F,UAAUA;gBACVtH;YACF;YACAkF,8BAAgB,CAACgI,eAAe,GAAGA;YAEnC,MAAME,gBAAgBlQ,OAAOS,IAAI,CAACwH;YAElC,MAAMkI,0BAAiE,EAAE;YACzE,MAAMC,cAAc,IAAIrQ;YACxB,IAAIwP,gBAAgB;gBAClB/M,uBAAuBxC,OAAOS,IAAI,CAAC8O;gBACnC,KAAK,MAAMc,UAAU7N,qBAAsB;oBACzC,MAAM8N,uBAAuBC,IAAAA,0BAAgB,EAACF;oBAC9C,MAAMG,WAAWvI,WAAW,CAACqI,qBAAqB;oBAClD,IAAIE,UAAU;wBACZ,MAAMC,UAAUlB,cAAc,CAACc,OAAO;wBACtCF,wBAAwB1M,IAAI,CAAC;4BAC3B+M,SAAShC,OAAO,CAAC,uBAAuB;4BACxCiC,QAAQjC,OAAO,CAAC,yBAAyB;yBAC1C;oBACH;oBACA4B,YAAYM,GAAG,CAACJ;gBAClB;YACF;YAEA,MAAMb,WAAWxB,MAAMC,IAAI,CAACkC;YAC5B,2DAA2D;YAC3D/G,SAASG,WAAW,CAAC/F,IAAI,IACpBkN,IAAAA,sEAAkC,EAAClB,UAAUnO,OAAOsP,QAAQ;YAGjE5I,8BAAgB,CAACqB,QAAQ,GAAGA;YAE5B,MAAMwH,qBAAqBpB,SAAS7F,MAAM;YAE1C,MAAMrH,WAAW;gBACfW,OAAOgN;gBACP5F,KAAKmF,SAAS7F,MAAM,GAAG,IAAI6F,WAAW9H;YACxC;YAEA,6DAA6D;YAC7D,IAAI,CAACd,oBAAoB;gBACvB,MAAMiK,yBAAyBX,wBAAwBvG,MAAM;gBAC7D,IAAI2F,kBAAkBuB,yBAAyB,GAAG;oBAChDtS,KAAI8N,KAAK,CACP,CAAC,6BAA6B,EAC5BwE,2BAA2B,IAAI,SAAS,SACzC,wDAAwD,CAAC;oBAE5D,KAAK,MAAM,CAACN,UAAUC,QAAQ,IAAIN,wBAAyB;wBACzD3R,KAAI8N,KAAK,CAAC,CAAC,GAAG,EAAEkE,SAAS,KAAK,EAAEC,QAAQ,CAAC,CAAC;oBAC5C;oBACA,MAAMxG,UAAUsC,KAAK;oBACrB/G,QAAQgH,IAAI,CAAC;gBACf;YACF;YAEA,MAAMuE,yBAAmC,EAAE;YAC3C,MAAMC,eAAc/I,mBAAAA,WAAW,CAAC,OAAO,qBAAnBA,iBAAqByC,UAAU,CAACuG,0BAAe;YACnE,MAAMC,YAAY,CAAC,EAAC3B,kCAAAA,cAAgB,CAAC4B,4CAAgC,CAAC;YACtE,MAAMC,qBACJnJ,WAAW,CAAC,UAAU,CAACyC,UAAU,CAACuG,0BAAe;YAEnD,IAAItG,cAAc;gBAChB,MAAM0G,6BAA6BhT,IAAAA,cAAU,EAC3CN,aAAI,CAACC,IAAI,CAACmM,WAAW;gBAEvB,IAAIkH,4BAA4B;oBAC9B,MAAM,IAAIC,MAAMC,yCAA8B;gBAChD;YACF;YAEA,MAAMjP,cACHS,UAAU,CAAC,6BACXC,YAAY,CAAC;gBACZ,iDAAiD;gBACjD,sDAAsD;gBACtD,IAAK,MAAM7F,QAAQ8K,YAAa;oBAC9B,MAAMuJ,oBAAoB,MAAMC,IAAAA,sBAAU,EACxC1T,aAAI,CAACC,IAAI,CAACmM,WAAWhN,SAAS,MAAM,WAAWA,OAC/CuU,oBAAQ,CAACC,IAAI;oBAEf,IAAIH,mBAAmB;wBACrBT,uBAAuBtN,IAAI,CAACtG;oBAC9B;gBACF;gBAEA,MAAMyU,iBAAiBb,uBAAuBnH,MAAM;gBAEpD,IAAIgI,gBAAgB;oBAClB,MAAM,IAAIN,MACR,CAAC,gCAAgC,EAC/BM,mBAAmB,IAAI,SAAS,SACjC,uEAAuE,EAAEb,uBAAuB/S,IAAI,CACnG,MACA,CAAC;gBAEP;YACF;YAEF,MAAM6T,sBAAsBtP,SAASW,KAAK,CAAC/C,MAAM,CAAC,CAAChD;gBACjD,OACEA,KAAK2U,KAAK,CAAC,iCAAiC/T,aAAI,CAAC8F,OAAO,CAAC1G,UAAU;YAEvE;YAEA,IAAI0U,oBAAoBjI,MAAM,EAAE;gBAC9BpL,KAAIE,IAAI,CACN,CAAC,4FAA4F,CAAC,GAC5FmT,oBAAoB7T,IAAI,CAAC,QACzB,CAAC,6EAA6E,CAAC;YAErF;YAEA,MAAM+T,0BAA0B;gBAAC;aAAS,CAAC1R,GAAG,CAAC,CAACuB,IAC9CN,OAAOsP,QAAQ,GAAG,CAAC,EAAEtP,OAAOsP,QAAQ,CAAC,EAAEhP,EAAE,CAAC,GAAGA;YAG/C,MAAMoQ,kBAAkBC,IAAAA,yBAAoB,EAAC3Q,OAAO8C,YAAY,CAAC8N,GAAG;YAEpE,MAAMC,qBAAqBpU,aAAI,CAACC,IAAI,CAACH,SAASuU,2BAAe;YAC7D,MAAMC,iBAAiC/P,cACpCS,UAAU,CAAC,4BACXmF,OAAO,CAAC;gBACP,MAAMoK,eAAeC,IAAAA,sBAAe,EAAC;uBAChChQ,SAASW,KAAK;uBACbX,SAAS+H,GAAG,IAAI,EAAE;iBACvB;gBACD,MAAM5J,gBAAuD,EAAE;gBAC/D,MAAM8R,eAAqC,EAAE;gBAE7C,KAAK,MAAMlS,SAASgS,aAAc;oBAChC,IAAIG,IAAAA,qBAAc,EAACnS,QAAQ;wBACzBI,cAAc+C,IAAI,CAACvG,YAAYoD;oBACjC,OAAO,IAAI,CAACoS,IAAAA,sBAAc,EAACpS,QAAQ;wBACjCkS,aAAa/O,IAAI,CAACvG,YAAYoD;oBAChC;gBACF;gBAEA,OAAO;oBACL6B,SAAS;oBACTwQ,UAAU;oBACVC,eAAe,CAAC,CAACtR,OAAO8C,YAAY,CAACyO,mBAAmB;oBACxDjC,UAAUtP,OAAOsP,QAAQ;oBACzBtH,WAAWA,UAAUjJ,GAAG,CAAC,CAACyS,IACxBC,IAAAA,kCAAgB,EAAC,YAAYD,GAAGf;oBAElC3I,SAASA,QAAQ/I,GAAG,CAAC,CAACyS,IAAMC,IAAAA,kCAAgB,EAAC,UAAUD;oBACvDpS;oBACA8R;oBACAQ,YAAY,EAAE;oBACdC,MAAM3R,OAAO2R,IAAI,IAAItL;oBACrBuL,KAAK;wBACHC,QAAQC,4BAAU;wBAClB,yFAAyF;wBACzF,4DAA4D;wBAC5DC,YAAY,CAAC,EAAED,4BAAU,CAAC,EAAE,EAAEE,+CAA6B,CAAC,EAAE,EAAEC,6CAA2B,CAAC,CAAC;wBAC7FC,gBAAgBD,6CAA2B;wBAC3CE,mBAAmBC,0CAAwB;wBAC3CC,mBAAmBC,yCAAuB;wBAC1CC,QAAQC,qBAAU;wBAClBC,gBAAgBC,8BAAmB;oBACrC;oBACAC,4BAA4B3S,OAAO2S,0BAA0B;oBAC7D/B,KAAKF,kBACD;wBACEkC,OAAO;4BACL9K,SAAS;gCACP,CAAC+K,6BAAkB,CAAC,EAAE;4BACxB;wBACF;oBACF,IACAxM;gBACN;YACF;YAEF,IAAI0B,SAASG,WAAW,CAACI,MAAM,KAAK,KAAKP,SAASK,QAAQ,CAACE,MAAM,KAAK,GAAG;gBACvEyI,eAAehJ,QAAQ,GAAGA,SAASI,UAAU,CAACpJ,GAAG,CAAC,CAACyS,IACjDC,IAAAA,kCAAgB,EAAC,WAAWD;YAEhC,OAAO;gBACLT,eAAehJ,QAAQ,GAAG;oBACxBG,aAAaH,SAASG,WAAW,CAACnJ,GAAG,CAAC,CAACyS,IACrCC,IAAAA,kCAAgB,EAAC,WAAWD;oBAE9BrJ,YAAYJ,SAASI,UAAU,CAACpJ,GAAG,CAAC,CAACyS,IACnCC,IAAAA,kCAAgB,EAAC,WAAWD;oBAE9BpJ,UAAUL,SAASK,QAAQ,CAACrJ,GAAG,CAAC,CAACyS,IAC/BC,IAAAA,kCAAgB,EAAC,WAAWD;gBAEhC;YACF;YACA,IAAIsB;YAIJ,IAAI9S,OAAO8C,YAAY,CAACiQ,kBAAkB,EAAE;gBAC1C,MAAMC,uBAAuB,AAAChT,CAAAA,OAAO0I,kBAAkB,IAAI,EAAE,AAAD,EAAG7J,MAAM,CACnE,CAAC2S,IAAW,CAACA,EAAEyB,QAAQ;gBAEzB,MAAMC,cAAwB,EAAE;gBAEhC,IAAI1L,qBAAqB;wBAIf0G,kCACAA,gCAKFlC;oBATNkH,YAAY/Q,IAAI,IACX;wBACD,yCAAyC;2BACrC+L,CAAAA,0CAAAA,mCAAAA,sBAAuBiF,SAAS,qBAAhCjF,iCAAkClF,GAAG,KAAI,EAAE;2BAC3CkF,CAAAA,0CAAAA,iCAAAA,sBAAuB/B,OAAO,qBAA9B+B,+BAAgClF,GAAG,KAAI,EAAE;qBAC9C,CAACjK,GAAG,CAAC,CAACqU,QACLnE,IAAAA,0BAAgB,EAACoE,IAAAA,wBAAe,EAACD,OAAOpT,OAAO2L,cAAc,QAE5D,AAACK,CAAAA,CAAAA,0CAAAA,uBAAwBmH,SAAS,CAACvR,KAAK,CAAC0G,MAAM,IAC9C0D,EAAAA,kCAAAA,uBAAuBG,OAAO,qBAA9BH,gCAAgCpK,KAAK,KAAI,EAAE,GAC3C,EAAE,AAAD,EACH7C,GAAG,CAAC,CAACuU,OAASD,IAAAA,wBAAe,EAACC,MAAMtT,OAAO2L,cAAc;gBAE/D,OAAO;oBACLuH,YAAY/Q,IAAI,IAAIgM;gBACtB;gBAEA2E,sBAAsBS,IAAAA,kDAAwB,EAC5CL,aACAlT,OAAO8C,YAAY,CAAC0Q,2BAA2B,GAC3CR,uBACA,EAAE,EACNhT,OAAO8C,YAAY,CAAC2Q,6BAA6B;gBAEnD/M,8BAAgB,CAACoM,mBAAmB,GAAGA;YACzC;YAEA,MAAMY,iBAAiB,MAAM1S,cAC1BS,UAAU,CAAC,mBACXC,YAAY,CAAC;gBACZ,IAAI;oBACF,MAAMlE,YAAE,CAAC8E,KAAK,CAAC/F,SAAS;wBAAEiG,WAAW;oBAAK;oBAC1C,OAAO;gBACT,EAAE,OAAOmR,KAAK;oBACZ,IAAIC,IAAAA,gBAAO,EAACD,QAAQA,IAAIE,IAAI,KAAK,SAAS;wBACxC,OAAO;oBACT;oBACA,MAAMF;gBACR;YACF;YAEF,IAAI,CAACD,kBAAkB,CAAE,MAAMI,IAAAA,wBAAW,EAACvX,UAAW;gBACpD,MAAM,IAAIyT,MACR;YAEJ;YAEA,IAAIhQ,OAAO+T,YAAY,IAAI,CAAC3O,gBAAgB;gBAC1C,MAAM4O,IAAAA,gCAAe,EAACzX,SAAS;YACjC;YAEA,8EAA8E;YAC9E,uDAAuD;YACvD,MAAMc,cACJZ,aAAI,CAACC,IAAI,CAACH,SAAS,iBACnB;YAGF,yFAAyF;YACzF,MAAM0X,IAAAA,wCAAsB,EAAC/P,QAAQD,GAAG,CAACwC,cAAc;YACvD,MAAMyN,IAAAA,wCAAsB,EAAC;gBAC3BC,YAAY;YACd;YAEA,MAAMhT,wBAAwBnB,OAAOmB,qBAAqB,IAAIoD;YAE9D,MAAM6P,oBAAoB3X,aAAI,CAACC,IAAI,CACjCH,SACAmD,4BAAgB,EAChB2U,0BAAc;YAGhB,eAAeC;oBAeuBtU,sBAY9BA,4BAAAA,uBAyBWA;gBA/CjB,IAAI,CAACuF,oBAAoB;oBACvB,MAAM,IAAIyK,MAAM;gBAClB;gBAEA,MAAMuE,IAAAA,yCAAuB,EAAC;oBAC5BhQ;oBACAqJ,OAAO;gBACT;gBAEA,MAAM4G,YAAYtQ,QAAQuQ,MAAM;gBAChC,MAAMC,WAAW,MAAMC,IAAAA,iBAAY,EAAC3U,2BAAAA,uBAAAA,OAAQ8C,YAAY,qBAApB9C,qBAAsB4U,aAAa;gBACvE,MAAMC,MAAM;gBAEZ,iEAAiE;gBACjE,MAAMC,oBAAoB;oBACxB;iBACD;gBAED,MAAMC,UAAU,MAAML,SAASM,KAAK,CAACC,aAAa,CAChD;oBACEC,aAAa3Q;oBACb4Q,UACEnV,EAAAA,wBAAAA,OAAO8C,YAAY,sBAAnB9C,6BAAAA,sBAAqBgV,KAAK,qBAA1BhV,2BAA4BoV,IAAI,KAChCpV,OAAOmB,qBAAqB,IAC5BoD;oBACFQ,YAAY/E;oBACZqV,UAAU,MAAMC,IAAAA,oCAAoB,EAAC/Q,KAAKvE;oBAC1CuV,OAAO;oBACPV;oBACA5Q,KAAKC,QAAQD,GAAG;oBAChBuR,WAAWC,IAAAA,oBAAe,EAAC;wBACzBC,aAAa;wBACb5C;wBACA9S;wBACA6U;wBACAtY;wBACAoZ,qBAAqB3V,OAAO8C,YAAY,CAAC6S,mBAAmB;wBAC5DtN;wBACA,uEAAuE;wBACvEuN,oBAAoBvP;oBACtB;oBACA/H,SAASoI,8BAAgB,CAACpI,OAAO;oBACjC2K,eAAevC,8BAAgB,CAACuC,aAAa;oBAC7CmE,cAAc1G,8BAAgB,CAAC0G,YAAY;oBAC3CyI,mBAAmBf,kBAAkBpY,IAAI,CAAC;gBAC5C,GACA;oBACEoZ,WAAW,GAAE9V,8BAAAA,OAAO8C,YAAY,CAACkS,KAAK,qBAAzBhV,4BAA2B8V,WAAW;gBACrD;gBAGF,MAAMtY,YAAE,CAAC8E,KAAK,CAAC7F,aAAI,CAACC,IAAI,CAACH,SAAS,WAAW;oBAAEiG,WAAW;gBAAK;gBAC/D,MAAMhF,YAAE,CAAC8E,KAAK,CAAC7F,aAAI,CAACC,IAAI,CAACH,SAAS,UAAU+B,UAAU;oBACpDkE,WAAW;gBACb;gBACA,MAAMhF,YAAE,CAACC,SAAS,CAChBhB,aAAI,CAACC,IAAI,CAACH,SAAS,iBACnByB,KAAKkO,SAAS,CACZ;oBACE6J,MAAM;gBACR,GACA,MACA;gBAIJ,6DAA6D;gBAC7D,MAAMC,0BAA0BjB,QAAQkB,oBAAoB;gBAC5D,MAAMC,qBAAkC;oBACtCC,QAAQ;wBACNnN,KAAK3C;wBACL+P,UAAU/P;wBACV2E,OAAO3E;wBAEPgQ,YAAYhQ;wBACZiQ,iBAAiBjQ;oBACnB;oBAEA2C,KAAK,IAAIuN;oBACT1a,MAAM,IAAI0a;gBACZ;gBAEA,MAAMC,qBAAqC,IAAID;gBAE/C,MAAME,iBAAiB,IAAIC,uCAAuB,CAAC;oBACjDpY;oBACA/B;oBACA0M;gBACF;gBAEA,MAAM0N,oBAAoB,MAAMX,wBAAwBY,IAAI;gBAC5D,IAAID,kBAAkBE,IAAI,EAAE;oBAC1B,MAAM,IAAI7G,MAAM;gBAClB;gBACAgG,wBAAwBc,MAAM,oBAA9Bd,wBAAwBc,MAAM,MAA9Bd,yBAAmCe,KAAK,CAAC,KAAO;gBAEhD,MAAMC,cAAcL,kBAAkBM,KAAK;gBAE3C,MAAMC,iBAEA,EAAE;gBACR,KAAK,MAAMC,SAASH,YAAYI,MAAM,CAAE;oBACtCF,eAAe/U,IAAI,CAAC;wBAClBkV,SAASC,IAAAA,2BAAW,EAACH;oBACvB;gBACF;gBAEA,IAAID,eAAe5O,MAAM,GAAG,GAAG;oBAC7B,MAAM,IAAI0H,MACR,CAAC,4BAA4B,EAC3BkH,eAAe5O,MAAM,CACtB,UAAU,EAAE4O,eAAenY,GAAG,CAAC,CAACwY,IAAMA,EAAEF,OAAO,EAAE3a,IAAI,CAAC,MAAM,CAAC;gBAElE;gBAEA,MAAM8a,IAAAA,iCAAiB,EAAC;oBACtBR;oBACAd;oBACAM;oBACAC;oBACAgB,aAAapR;oBACbqR,oBAAoB9P,aAAaG,QAAQ;oBACzC4P,WAAW;gBACb;gBAEA,MAAMC,WAAWC,IAAAA,wBAAc,EAC7B3B,mBAAmBra,IAAI,CAACic,IAAI,GAAG5B,mBAAmBlN,GAAG,CAAC8O,IAAI,GAAG,GAC7D;gBAEF,MAAMC,WAA2B,EAAE;gBACnC,MAAMC,OAAO,IAAIC,eAAI,CAAC;gBACtB,MAAMC,UAAU,CAACC;oBACfJ,SAAS5V,IAAI,CACX,AAAC,CAAA;wBACC,MAAM6V,KAAKI,OAAO;wBAClB,IAAI;4BACF,MAAMD;wBACR,SAAU;4BACRH,KAAKK,OAAO;4BACZT;wBACF;oBACF,CAAA;gBAEJ;gBAEA,IAAI,CAAC9R,YAAY;oBACf,KAAK,MAAM,CAACjK,MAAMmD,MAAM,IAAIkX,mBAAmBra,IAAI,CAAE;wBACnDqc,QAAQ,IACNI,IAAAA,+BAAe,EAAC;gCACdzD;gCACAhZ;gCACAqD,UAAUrD;gCACVmD;gCAEAwX;gCACAQ,aAAad;gCACbO;gCACAgB,aAAapR;gCACbqR,oBAAoB9P,aAAaG,QAAQ;gCACzC4P,WAAW;4BACb;oBAEJ;gBACF;gBAEA,KAAK,MAAM,CAAC9b,MAAMmD,MAAM,IAAIkX,mBAAmBlN,GAAG,CAAE;oBAClDkP,QAAQ,IACNI,IAAAA,+BAAe,EAAC;4BACdzc;4BACAgZ,KAAK;4BACL3V,UAAU+P,IAAAA,0BAAgB,EAACpT;4BAC3BmD;4BACAwX;4BACAQ,aAAad;4BACbO;4BACAgB,aAAapR;4BACbqR,oBAAoB9P,aAAaG,QAAQ;4BACzC4P,WAAW;wBACb;gBAEJ;gBAEAO,QAAQ,IACNK,IAAAA,qCAAqB,EAAC;wBACpB1D,KAAK;wBACL2B;wBACAQ,aAAad;wBACbO;wBACAgB,aAAapR;wBACbqR,oBAAoB9P,aAAaG,QAAQ;wBACzC4P,WAAW;oBACb;gBAEF,MAAMa,QAAQC,GAAG,CAACV;gBAElB,MAAMtB,eAAeiC,cAAc,CAAC;oBAClCjB,aAAapR;oBACbqR,oBAAoB9P,aAAaG,QAAQ;oBACzCiP,aAAad;gBACf;gBAEA,MAAMyC,SAGA,EAAE;gBACR,MAAMC,WAGA,EAAE;gBACR,KAAK,MAAM,CAAC/c,MAAMgd,YAAY,IAAIrC,mBAAoB;oBACpD,KAAK,MAAMW,SAAS0B,YAAYC,MAAM,GAAI;wBACxC,IAAI3B,MAAM4B,QAAQ,KAAK,WAAW;4BAChCJ,OAAOxW,IAAI,CAAC;gCACVtG;gCACAwb,SAASC,IAAAA,2BAAW,EAACH;4BACvB;wBACF,OAAO;4BACL,IAAI6B,IAAAA,iCAAiB,EAAC7B,QAAQ;gCAC5ByB,SAASzW,IAAI,CAAC;oCACZtG;oCACAwb,SAASC,IAAAA,2BAAW,EAACH;gCACvB;4BACF;wBACF;oBACF;gBACF;gBAEA,MAAM8B,kBAAkBlE,QAAQmE,QAAQ;gBAExC,IAAIN,SAAStQ,MAAM,GAAG,GAAG;oBACvBpL,KAAIE,IAAI,CACN,CAAC,0BAA0B,EAAEwb,SAAStQ,MAAM,CAAC,YAAY,EAAEsQ,SACxD7Z,GAAG,CAAC,CAACwY;wBACJ,OAAO,WAAWA,EAAE1b,IAAI,GAAG,OAAO0b,EAAEF,OAAO;oBAC7C,GACC3a,IAAI,CAAC,MAAM,CAAC;gBAEnB;gBAEA,IAAIic,OAAOrQ,MAAM,GAAG,GAAG;oBACrB,MAAM,IAAI0H,MACR,CAAC,4BAA4B,EAAE2I,OAAOrQ,MAAM,CAAC,UAAU,EAAEqQ,OACtD5Z,GAAG,CAAC,CAACwY;wBACJ,OAAO,WAAWA,EAAE1b,IAAI,GAAG,OAAO0b,EAAEF,OAAO;oBAC7C,GACC3a,IAAI,CAAC,MAAM,CAAC;gBAEnB;gBAEA,OAAO;oBACLyc,UAAUjV,QAAQuQ,MAAM,CAACD,UAAU,CAAC,EAAE;oBACtC4E,mBAAmB/S;oBACnB4S;gBACF;YACF;YAEA,IAAIG;YACJ,IAAIC,qBAA+ChT;YAEnD,uEAAuE;YACvE,4CAA4C;YAC5C,MAAMiT,iBACJtZ,OAAO8C,YAAY,CAACyW,kBAAkB,IACrCvZ,OAAO8C,YAAY,CAACyW,kBAAkB,KAAKlT,aAC1C,CAACrG,OAAOwZ,OAAO;YACnB,MAAMC,6BACJzZ,OAAO8C,YAAY,CAAC4W,sBAAsB;YAC5C,MAAMC,qCACJ3Z,OAAO8C,YAAY,CAAC8W,yBAAyB,IAC5C5Z,OAAO8C,YAAY,CAAC8W,yBAAyB,KAAKvT,aACjDH;YAEJlF,cAAc6Y,YAAY,CACxB,6BACArT,OAAO,CAAC,CAACxG,OAAOwZ,OAAO;YAEzBxY,cAAc6Y,YAAY,CAAC,oBAAoBrT,OAAO8S;YAEtD,IACE,CAACA,kBACAG,CAAAA,8BAA8BE,kCAAiC,GAChE;gBACA,MAAM,IAAI3J,MACR;YAEJ;YAEA9S,KAAI4c,IAAI,CAAC;YACTC,IAAAA,wBAAgB,EAAC,kBAAkB/Y;YAEnC,MAAMkT,IAAAA,wCAAsB,EAAC;gBAC3BC,YAAY;gBACZ6F,cAAc;oBACZV,gBAAgB9S,OAAO8S;gBACzB;YACF;YAEA,IAAIL,kBAAkBT,QAAQ9U,OAAO;YACrC,IAAI,CAAC0B,gBAAgB;gBACnB,IAAIW,gBAAgB;oBAClB,MAAM,EACJoT,UAAUc,gBAAgB,EAC1BhB,iBAAiB3Y,CAAC,EAClB,GAAG4Z,MACJ,GAAG,MAAM5F;oBACV2E,kBAAkB3Y;oBAClByZ,IAAAA,wBAAgB,EAAC,kBAAkB/Y;oBAEnCoY,oBAAoBc,KAAKd,iBAAiB;oBAE1Clc,KAAIid,KAAK,CAAC;oBAEVxR,UAAUW,MAAM,CACd8Q,IAAAA,2BAAmB,EAACxO,YAAY;wBAC9ByO,mBAAmBJ;wBACnB1K;oBACF;gBAEJ,OAAO;oBACL,IACEkK,8BACAE,oCACA;wBACA,IAAIU,oBAAoB;wBAExB,MAAMnG,IAAAA,wCAAsB,EAAC;4BAC3BC,YAAY;wBACd;wBAEA,MAAMmG,qBAAqBC,IAAAA,0BAAY,EAACjB,gBAAgB;4BACtD;yBACD,EAAEtP,IAAI,CAAC,CAACwQ;4BACPT,IAAAA,wBAAgB,EAAC,+BAA+B/Y;4BAChDoY,oBAAoBoB,IAAIpB,iBAAiB;4BACzCiB,qBAAqBG,IAAIrB,QAAQ;4BAEjC,IAAIQ,oCAAoC;gCACtC,MAAMc,mBAAmB,IAAI5W,cAAM,CACjCJ,QAAQC,OAAO,CAAC,2BAChB;oCACEK,YAAY;oCACZM,gBAAgB;wCAAC;qCAAqB;gCACxC;gCAGFgV,qBAAqBoB,iBAClBC,kBAAkB,CAAC;oCAClBnW;oCACAvE;oCACAzD;oCACA,+CAA+C;oCAC/Coe,mBAAmBC,IAAAA,qCAA6B,EAAC,IAAIrE;oCACrDjV,aAAa,EAAE;oCACfuZ,gBAAgB;oCAChBzB;oCACAjY;oCACA2Z,iBAAiBpQ,QAAQnD;gCAC3B,GACCwP,KAAK,CAAC,CAACpD;oCACN3W,QAAQgO,KAAK,CAAC2I;oCACdzP,QAAQgH,IAAI,CAAC;gCACf;4BACJ;wBACF;wBACA,IAAI,CAACuO,4BAA4B;4BAC/B,MAAMa;4BACN,MAAMpG,IAAAA,wCAAsB,EAAC;gCAC3BC,YAAY;4BACd;wBACF;wBAEA,MAAM4G,mBAAmBR,IAAAA,0BAAY,EAACjB,gBAAgB;4BACpD;yBACD,EAAEtP,IAAI,CAAC,CAACwQ;4BACPH,qBAAqBG,IAAIrB,QAAQ;4BACjCY,IAAAA,wBAAgB,EACd,oCACA/Y;wBAEJ;wBACA,IAAIyY,4BAA4B;4BAC9B,MAAMa;4BACN,MAAMpG,IAAAA,wCAAsB,EAAC;gCAC3BC,YAAY;4BACd;wBACF;wBACA,MAAM4G;wBAEN,MAAM7G,IAAAA,wCAAsB,EAAC;4BAC3BC,YAAY;wBACd;wBAEA,MAAMoG,IAAAA,0BAAY,EAACjB,gBAAgB;4BAAC;yBAAS,EAAEtP,IAAI,CAAC,CAACwQ;4BACnDH,qBAAqBG,IAAIrB,QAAQ;4BACjCY,IAAAA,wBAAgB,EAAC,+BAA+B/Y;wBAClD;wBAEA9D,KAAIid,KAAK,CAAC;wBAEVxR,UAAUW,MAAM,CACd8Q,IAAAA,2BAAmB,EAACxO,YAAY;4BAC9ByO;4BACA9K;wBACF;oBAEJ,OAAO;wBACL,MAAM,EAAE4J,UAAUc,gBAAgB,EAAE,GAAGC,MAAM,GAAG,MAAMK,IAAAA,0BAAY,EAChEjB,gBACA;wBAEFS,IAAAA,wBAAgB,EAAC,kBAAkB/Y;wBAEnCoY,oBAAoBc,KAAKd,iBAAiB;wBAE1CzQ,UAAUW,MAAM,CACd8Q,IAAAA,2BAAmB,EAACxO,YAAY;4BAC9ByO,mBAAmBJ;4BACnB1K;wBACF;oBAEJ;gBACF;YACF;YAEA,uDAAuD;YACvD,IAAI/N,UAAU,CAAC0E,iBAAiB,CAACd,gBAAgB;gBAC/C,MAAM8O,IAAAA,wCAAsB,EAAC;oBAC3BC,YAAY;gBACd;gBACA,MAAMpJ,IAAAA,4BAAiB,EAACD;gBACxBiP,IAAAA,wBAAgB,EAAC,0BAA0B/Y;YAC7C;YAEA,MAAMga,qBAAqBC,IAAAA,gBAAa,EAAC;YAEzC,IAAIzT,qBAAqB;gBACvB,qDAAqD;gBACrD,6DAA6D;gBAC7D,gEAAgE;gBAChE,iDAAiD;gBACjD,IAAI,MAAM2I,IAAAA,sBAAU,EAAC1T,aAAI,CAACC,IAAI,CAACiL,YAAY,YAAY;oBACrD,MAAMjF,IAAAA,4BAAa,EACjBjG,aAAI,CAACC,IAAI,CAACiL,YAAY,WACtBlL,aAAI,CAACC,IAAI,CAACH,SAAS,WACnB;wBACEsC,QAAOyU,IAAI;4BACT,2DAA2D;4BAC3D,OAAO,CAACA,KAAK9C,KAAK,CAAC;wBACrB;wBACA7N,WAAW;oBACb;gBAEJ;YACF;YAEA,MAAMuY,oBAAoBze,aAAI,CAACC,IAAI,CAACH,SAAS4e,0BAAc;YAC3D,MAAMC,uBAAuB3e,aAAI,CAACC,IAAI,CAACH,SAAS8e,8BAAkB;YAElE,IAAIC,sBAAsB;YAC1B,IAAIC,sBAAsB;YAC1B,IAAIC,sBAAsB;YAC1B,IAAIC,wBAAwB;YAC5B,MAAMjd,WAAW,IAAIC;YACrB,MAAMid,yBAAyB,IAAIjd;YACnC,MAAMkd,2BAA2B,IAAIld;YACrC,MAAM6C,cAAc,IAAI7C;YACxB,MAAMmd,eAAe,IAAInd;YACzB,MAAMod,iBAAiB,IAAIpd;YAC3B,MAAMqd,mBAAmB,IAAIrd;YAC7B,MAAMsd,kBAAkB,IAAIxF;YAC5B,MAAMyF,cAAc,IAAIzF;YACxB,MAAM0F,qBAAqB,IAAI1F;YAC/B,MAAM2F,gBAAgB,IAAI3F;YAC1B,MAAM4F,oBAAoB,IAAI5F;YAC9B,MAAM6F,YAAuB,IAAI7F;YACjC,IAAI8F,gBAAgB,MAAMte,aAA4BqW;YACtD,MAAMkI,gBAAgB,MAAMve,aAA4Bmd;YACxD,MAAMqB,mBAAmB/a,SACrB,MAAMzD,aAA+Bqd,wBACrC/U;YAEJ,MAAMmW,gBAAwC,CAAC;YAE/C,IAAIhb,QAAQ;gBACV,MAAMib,mBAAmB,MAAM1e,aAC7BtB,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,EAAEgd,8BAAkB;gBAGzD,IAAK,MAAMC,OAAOF,iBAAkB;oBAClCD,aAAa,CAACG,IAAI,GAAG1N,IAAAA,0BAAgB,EAAC0N;gBACxC;gBAEA,MAAM/e,cACJnB,aAAI,CAACC,IAAI,CAACH,SAASqgB,oCAAwB,GAC3CJ;YAEJ;YAEAtY,QAAQD,GAAG,CAAC4Y,UAAU,GAAG3V,kCAAsB;YAE/C,MAAM4V,SAASphB,mBAAmBsE;YAElC,MAAM+c,gBAAgB7Y,QAAQuQ,MAAM;YACpC,MAAMuI,kBAAkBhc,cAAcS,UAAU,CAAC;YAEjD,MAAMwb,0BAAmD;gBACvDpc,SAAS;gBACTqc,WAAW,CAAC;YACd;YAEA,MAAM,EACJC,wBAAwB,EACxBC,YAAY,EACZC,mBAAmB,EACnBxC,cAAc,EACdyC,qBAAqB,EACtB,GAAG,MAAMN,gBAAgBtb,YAAY,CAAC;gBACrC,IAAIwE,eAAe;oBACjB,OAAO;wBACLiX,0BAA0B;wBAC1BC,cAAc,EAAE;wBAChBC,qBAAqB;wBACrBxC,gBAAgB,CAAC,CAAC/R;wBAClBwU,uBAAuB;oBACzB;gBACF;gBAEA,MAAM,EAAEC,cAAc,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAE,GAChEzd;gBACF,MAAM0d,mBAAmB;oBAAEF;oBAAqBC;gBAAoB;gBAEpE,MAAME,yBAAyBX,gBAAgBvb,UAAU,CACvD;gBAEF,MAAMmc,oCACJD,uBAAuBjc,YAAY,CACjC,UACEoO,sBACC,MAAMgN,OAAOe,wBAAwB,CAAC;wBACrChiB,MAAM;wBACNU;wBACAmhB;wBACAI,aAAa;oBACf;gBAGN,MAAMC,wBAAwBJ,uBAAuBjc,YAAY,CAC/D;wBASa1B,cACMA;2BATjB8P,sBACAgN,OAAOkB,YAAY,CAAC;wBAClBzZ;wBACA1I,MAAM;wBACNU;wBACAghB;wBACAG;wBACAO,kBAAkBje,OAAOie,gBAAgB;wBACzC1f,OAAO,GAAEyB,eAAAA,OAAO2R,IAAI,qBAAX3R,aAAazB,OAAO;wBAC7B2f,aAAa,GAAEle,gBAAAA,OAAO2R,IAAI,qBAAX3R,cAAake,aAAa;wBACzCC,kBAAkBne,OAAOoe,MAAM;wBAC/BC,WAAWre,OAAO8C,YAAY,CAAC8N,GAAG;wBAClC0N,0BAA0Bte,OAAO8C,YAAY,CAACyb,YAAY;oBAC5D;;gBAGJ,MAAMC,iBAAiB;gBAEvB,MAAMC,kCAAkC3B,OAAOe,wBAAwB,CACrE;oBACEhiB,MAAM2iB;oBACNjiB;oBACAmhB;oBACAI,aAAa;gBACf;gBAGF,MAAMY,sBAAsB5B,OAAO6B,sBAAsB,CAAC;oBACxD9iB,MAAM2iB;oBACNjiB;oBACAmhB;gBACF;gBAEA,wDAAwD;gBACxD,IAAIL;gBACJ,wDAAwD;gBACxD,IAAIxC,iBAAiB;gBAErB,MAAM+D,uBAAuB,MAAMC,IAAAA,2BAAmB,EACpD;oBAAEljB,OAAO2gB;oBAAetT,KAAKuT;gBAAiB,GAC9ChgB,SACAyD,OAAO8C,YAAY,CAACgc,QAAQ;gBAG9B,MAAM1d,qBAAyCqC,QAC7ChH,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,EAAEqf,+BAAmB;gBAG1D,MAAMC,iBAAiBxd,SAClBiC,QACChH,aAAI,CAACC,IAAI,CACPH,SACAmD,4BAAgB,EAChBuf,qCAAyB,GAAG,YAGhC;gBACJ,MAAMC,oBAAoBF,iBAAiB,IAAIvgB,QAAQ;gBACvD,IAAIugB,kBAAkBE,mBAAmB;oBACvC,IAAK,MAAMC,MAAMH,eAAeI,IAAI,CAAE;wBACpC,IAAK,MAAMhM,SAAS4L,eAAeI,IAAI,CAACD,GAAG,CAACE,OAAO,CAAE;4BACnDH,kBAAkB9P,GAAG,CAACgE;wBACxB;oBACF;oBACA,IAAK,MAAM+L,MAAMH,eAAeM,IAAI,CAAE;wBACpC,IAAK,MAAMlM,SAAS4L,eAAeM,IAAI,CAACH,GAAG,CAACE,OAAO,CAAE;4BACnDH,kBAAkB9P,GAAG,CAACgE;wBACxB;oBACF;gBACF;gBAEA,KAAK,MAAMuJ,OAAOje,OAAOS,IAAI,CAACiC,sCAAAA,mBAAoB8b,SAAS,EAAG;oBAC5D,IAAIP,IAAIvT,UAAU,CAAC,SAAS;wBAC1BqS;oBACF;gBACF;gBAEA,MAAMjD,QAAQC,GAAG,CACf/Z,OAAOC,OAAO,CAACsC,UACZc,MAAM,CACL,CAACC,KAAK,CAAC2a,KAAK7a,MAAM;oBAChB,IAAI,CAACA,OAAO;wBACV,OAAOE;oBACT;oBAEA,MAAMud,WAAW5C;oBAEjB,KAAK,MAAM9gB,QAAQiG,MAAO;wBACxBE,IAAIG,IAAI,CAAC;4BAAEod;4BAAU1jB;wBAAK;oBAC5B;oBAEA,OAAOmG;gBACT,GACA,EAAE,EAEHjD,GAAG,CAAC,CAAC,EAAEwgB,QAAQ,EAAE1jB,IAAI,EAAE;oBACtB,MAAM2jB,gBAAgBxC,gBAAgBvb,UAAU,CAAC,cAAc;wBAC7D5F;oBACF;oBACA,OAAO2jB,cAAc9d,YAAY,CAAC;wBAChC,MAAM+d,aAAaC,IAAAA,oCAAiB,EAAC7jB;wBACrC,MAAM,CAACic,MAAM6H,UAAU,GAAG,MAAMC,IAAAA,yBAAiB,EAC/CL,UACAE,YACAljB,SACA+f,eACAC,kBACAvc,OAAO8C,YAAY,CAACgc,QAAQ,EAC5BF;wBAGF,IAAIiB,oBAAoB;wBACxB,IAAIC,QAAQ;wBACZ,IAAIC,WAAW;wBACf,IAAIC,oBAAoB;wBACxB,IAAIC,cAAc;wBAClB,IAAIC,gBAAiC;wBACrC,IAAIhR,WAAW;wBAEf,IAAIqQ,aAAa,SAAS;4BACxBrQ,WACEtD,WAAWuU,IAAI,CAAC,CAAC7f;gCACfA,IAAI8f,IAAAA,kCAAgB,EAAC9f;gCACrB,OACEA,EAAE8I,UAAU,CAACqW,aAAa,QAC1Bnf,EAAE8I,UAAU,CAACqW,aAAa;4BAE9B,MAAM;wBACV;wBACA,IAAIY;wBAEJ,IAAId,aAAa,SAAStR,gBAAgB;4BACxC,KAAK,MAAM,CAACqS,cAAcC,eAAe,IAAI7hB,OAAOC,OAAO,CACzD6d,eACC;gCACD,IAAI+D,mBAAmB1kB,MAAM;oCAC3BqT,WAAWjB,cAAc,CAACqS,aAAa,CAACpT,OAAO,CAC7C,yBACA;oCAEFmT,kBAAkBC;oCAClB;gCACF;4BACF;wBACF;wBAEA,MAAME,eAAeC,IAAAA,gCAAwB,EAACvR,YAC1CzL,QAAQC,OAAO,CACb,iDAEFjH,aAAI,CAACC,IAAI,CACP,AAAC6iB,CAAAA,aAAa,UAAUzW,WAAWtH,MAAK,KAAM,IAC9C0N;wBAGN,MAAMwR,iBAAiBnB,aAAa;wBACpC,MAAMoB,aAAazR,WACf,MAAM0R,IAAAA,sCAA6B,EAAC;4BAClCF;4BACAF;4BACA7U,gBAAgB3L,OAAO2L,cAAc;4BACrCnK;4BACAxB;4BACA4N,OAAO;4BACP,yDAAyD;4BACzD,4DAA4D;4BAC5D,gEAAgE;4BAChE/R,MAAM6kB,iBAAiBL,kBAAmBxkB;wBAC5C,KACAwK;wBAEJ,IAAIsa,8BAAAA,WAAYE,WAAW,EAAE;4BAC3B5D,wBAAwBC,SAAS,CAACrhB,KAAK,GACrC8kB,WAAWE,WAAW;wBAC1B;wBAEA,MAAMC,cAAc1f,mBAAmB8b,SAAS,CAC9CmD,mBAAmBxkB,KACpB,GACG,SACA8kB,8BAAAA,WAAYI,OAAO;wBAEvB,IAAI,CAAC7a,eAAe;4BAClB8Z,oBACET,aAAa,SACboB,CAAAA,8BAAAA,WAAY/O,GAAG,MAAKoP,4BAAgB,CAACC,MAAM;4BAE7C,IAAI1B,aAAa,SAAS,CAACnO,IAAAA,sBAAc,EAACvV,OAAO;gCAC/C,IAAI;oCACF,IAAIqlB;oCAEJ,IAAIC,IAAAA,4BAAa,EAACL,cAAc;wCAC9B,IAAIvB,aAAa,OAAO;4CACtB/D;wCACF,OAAO;4CACLC;wCACF;wCAEA,MAAM2F,cACJ7B,aAAa,UAAU1jB,OAAOwkB,mBAAmB;wCAEnDa,WAAW9f,mBAAmB8b,SAAS,CAACkE,YAAY;oCACtD;oCAEA,IAAIC,mBACF7B,cAAc/d,UAAU,CAAC;oCAC3B,IAAI6f,eAAe,MAAMD,iBAAiB3f,YAAY,CACpD;4CASa1B,cACMA;wCATjB,OAAO8c,OAAOkB,YAAY,CAAC;4CACzBzZ;4CACA1I;4CACAwkB;4CACA9jB;4CACAghB;4CACAG;4CACAO,kBAAkBje,OAAOie,gBAAgB;4CACzC1f,OAAO,GAAEyB,eAAAA,OAAO2R,IAAI,qBAAX3R,aAAazB,OAAO;4CAC7B2f,aAAa,GAAEle,gBAAAA,OAAO2R,IAAI,qBAAX3R,cAAake,aAAa;4CACzCqD,UAAUF,iBAAiBG,KAAK;4CAChCV;4CACAI;4CACA3B;4CACAkC,cAAczhB,OAAOyhB,YAAY;4CACjCC,gBAAgB/kB,QAAcE,cAAc,GACxC,QACAmD,OAAO8C,YAAY,CAAC4e,cAAc;4CACtCC,oBAAoB3hB,OAAO4hB,kBAAkB;4CAC7CzD,kBAAkBne,OAAOoe,MAAM;4CAC/BC,WAAWre,OAAO8C,YAAY,CAAC8N,GAAG;4CAClC0N,0BACEte,OAAO8C,YAAY,CAACyb,YAAY;wCACpC;oCACF;oCAGF,IAAIgB,aAAa,SAASc,iBAAiB;wCACzCpE,mBAAmB4F,GAAG,CAACxB,iBAAiBxkB;wCACxC,0CAA0C;wCAC1C,IAAIslB,IAAAA,4BAAa,EAACL,cAAc;4CAC9Bf,WAAW;4CACXD,QAAQ;4CAER5iB,KAAI4kB,QAAQ,CACV,CAAC,+EAA+E,CAAC;wCAErF,OAAO;4CACL,oDAAoD;4CACpD,0CAA0C;4CAC1C,yBAAyB;4CACzB,IAAIR,aAAazB,iBAAiB,EAAE;gDAClCA,oBAAoByB,aAAazB,iBAAiB;gDAClDC,QAAQ;gDACRC,WAAW;gDAEX/D,YAAY6F,GAAG,CAACxB,iBAAiB,EAAE;4CACrC;4CAEA,IACEiB,aAAaS,iBAAiB,IAC9BT,aAAaS,iBAAiB,CAACzZ,MAAM,GAAG,GACxC;gDACA0T,YAAY6F,GAAG,CACbxB,iBACAiB,aAAaS,iBAAiB;gDAEhC7B,gBAAgBoB,aAAaS,iBAAiB,CAAChjB,GAAG,CAChD,CAACC,QAAUA,MAAMvC,IAAI;gDAEvBqjB,QAAQ;4CACV;4CAEA,MAAMkC,YAAYV,aAAaU,SAAS,IAAI,CAAC;4CAC7C,IAAIA,UAAUC,UAAU,KAAK,GAAG;gDAC9B,MAAMC,YAAY/Q,IAAAA,qBAAc,EAACtV;gDACjC,MAAMsmB,0BACJb,aAAaS,iBAAiB,IAC9BT,aAAaS,iBAAiB,CAACzZ,MAAM,GAAG;gDAE1C,IACEtI,OAAOoe,MAAM,KAAK,YAClB8D,aACA,CAACC,yBACD;oDACA,MAAM,IAAInS,MACR,CAAC,MAAM,EAAEnU,KAAK,wFAAwF,CAAC;gDAE3G;gDAEA,6BAA6B;gDAC7B,4BAA4B;gDAC5B,iEAAiE;gDACjE,8BAA8B;gDAC9B,IAAI,CAACqmB,WAAW;oDACdlG,YAAY6F,GAAG,CAACxB,iBAAiB;wDAC/B;4DACE5jB,MAAMZ;4DACNumB,SAASvmB;4DACTwmB,qBAAqB,EAAE;wDACzB;qDACD;oDACDtC,WAAW;gDACb,OAAO,IACL,CAACoC,2BACAH,CAAAA,UAAUM,OAAO,KAAK,WACrBN,UAAUM,OAAO,KAAK,cAAa,GACrC;oDACAtG,YAAY6F,GAAG,CAACxB,iBAAiB,EAAE;oDACnCN,WAAW;oDACXF,oBAAoB;gDACtB;4CACF;4CAEA,IAAIyB,aAAaiB,qBAAqB,EAAE;gDACtCrG,cAAc2F,GAAG,CACfxB,iBACAiB,aAAaiB,qBAAqB;4CAEtC;4CAEApG,kBAAkB0F,GAAG,CAACxB,iBAAiB2B;wCACzC;oCACF,OAAO;wCACL,IAAIb,IAAAA,4BAAa,EAACL,cAAc;4CAC9B,IAAIQ,aAAakB,cAAc,EAAE;gDAC/BxlB,QAAQI,IAAI,CACV,CAAC,kFAAkF,EAAEvB,KAAK,CAAC;4CAE/F;4CACA,mDAAmD;4CACnD,8CAA8C;4CAC9CylB,aAAavB,QAAQ,GAAG;4CACxBuB,aAAakB,cAAc,GAAG;wCAChC;wCAEA,IACElB,aAAavB,QAAQ,KAAK,SACzBuB,CAAAA,aAAarB,WAAW,IAAIqB,aAAamB,SAAS,AAAD,GAClD;4CACA5H,iBAAiB;wCACnB;wCAEA,IAAIyG,aAAarB,WAAW,EAAE;4CAC5BA,cAAc;4CACdpE,eAAezM,GAAG,CAACvT;wCACrB;wCAEA,IAAIylB,aAAajE,mBAAmB,EAAE;4CACpCA,sBAAsB;wCACxB;wCAEA,IAAIiE,aAAakB,cAAc,EAAE;4CAC/BhkB,SAAS4Q,GAAG,CAACvT;4CACbikB,QAAQ;4CAER,IACEwB,aAAaS,iBAAiB,IAC9BT,aAAaS,iBAAiB,CAACzZ,MAAM,GAAG,GACxC;gDACAyT,gBAAgB8F,GAAG,CACjBhmB,MACAylB,aAAaS,iBAAiB;gDAEhC7B,gBAAgBoB,aAAaS,iBAAiB,CAAChjB,GAAG,CAChD,CAACC,QAAUA,MAAMvC,IAAI;4CAEzB;4CAEA,IACE6kB,aAAaiB,qBAAqB,KAClCG,sBAAY,CAACC,sBAAsB,EACnC;gDACAhH,yBAAyBvM,GAAG,CAACvT;4CAC/B,OAAO,IACLylB,aAAaiB,qBAAqB,KAClCG,sBAAY,CAACE,SAAS,EACtB;gDACAlH,uBAAuBtM,GAAG,CAACvT;4CAC7B;wCACF,OAAO,IAAIylB,aAAauB,cAAc,EAAE;4CACtC/G,iBAAiB1M,GAAG,CAACvT;wCACvB,OAAO,IACLylB,aAAavB,QAAQ,IACrB,CAACC,qBACD,AAAC,MAAMvB,oCAAqC,OAC5C;4CACAnd,YAAY8N,GAAG,CAACvT;4CAChBkkB,WAAW;wCACb,OAAO,IAAIC,mBAAmB;4CAC5B,2DAA2D;4CAC3D,gDAAgD;4CAChDxhB,SAAS4Q,GAAG,CAACvT;4CACbikB,QAAQ;wCACV;wCAEA,IAAIpQ,eAAe7T,SAAS,QAAQ;4CAClC,IACE,CAACylB,aAAavB,QAAQ,IACtB,CAACuB,aAAakB,cAAc,EAC5B;gDACA,MAAM,IAAIxS,MACR,CAAC,cAAc,EAAE8S,qDAA0C,CAAC,CAAC;4CAEjE;4CACA,2DAA2D;4CAC3D,mCAAmC;4CACnC,IACE,AAAC,MAAMrE,mCACP,CAAC6C,aAAakB,cAAc,EAC5B;gDACAlhB,YAAYyhB,MAAM,CAAClnB;4CACrB;wCACF;wCAEA,IACEmnB,+BAAmB,CAAC9gB,QAAQ,CAACrG,SAC7B,CAACylB,aAAavB,QAAQ,IACtB,CAACuB,aAAakB,cAAc,EAC5B;4CACA,MAAM,IAAIxS,MACR,CAAC,OAAO,EAAEnU,KAAK,GAAG,EAAEinB,qDAA0C,CAAC,CAAC;wCAEpE;oCACF;gCACF,EAAE,OAAOnP,KAAK;oCACZ,IACE,CAACC,IAAAA,gBAAO,EAACD,QACTA,IAAI0D,OAAO,KAAK,0BAEhB,MAAM1D;oCACRiI,aAAaxM,GAAG,CAACvT;gCACnB;4BACF;4BAEA,IAAI0jB,aAAa,OAAO;gCACtB,IAAIO,SAASC,UAAU;oCACrBzE;gCACF,OAAO;oCACLC;gCACF;4BACF;wBACF;wBAEAa,UAAUyF,GAAG,CAAChmB,MAAM;4BAClBic;4BACA6H;4BACAI;4BACAD;4BACAD;4BACAI;4BACAC;4BACA+C,0BAA0B;4BAC1BlC,SAASD;4BACToC,cAAc7c;4BACd8c,kBAAkB9c;4BAClB+c,iBAAiB/c;wBACnB;oBACF;gBACF;gBAGJ,IAAIgd,sCAAmB,EAAE;oBACvBnmB,KAAI8N,KAAK,CACP,CAAC,0IAA0I,CAAC;oBAE9I9G,QAAQgH,IAAI,CAAC;gBACf;gBAEA,MAAMoY,kBAAkB,MAAMvF;gBAC9B,MAAMwF,qBACJ,AAAC,MAAM3F,qCACN0F,mBAAmBA,gBAAgBT,cAAc;gBAEpD,MAAMW,cAAc;oBAClBrG,0BAA0B,MAAMsB;oBAChCrB,cAAc,MAAMsB;oBACpBrB;oBACAxC;oBACAyC,uBAAuBiG;gBACzB;gBAEA,OAAOC;YACT;YAEA,IAAIxI,oBAAoBA,mBAAmByI,cAAc;YACzD1J,IAAAA,wBAAgB,EAAC,iCAAiC/Y;YAElD,IAAImc,0BAA0B;gBAC5BngB,QAAQI,IAAI,CACVsmB,IAAAA,gBAAI,EAACC,IAAAA,kBAAM,EAAC,CAAC,SAAS,CAAC,KACrBA,IAAAA,kBAAM,EACJ,CAAC,qJAAqJ,CAAC;gBAG7J3mB,QAAQI,IAAI,CACV;YAEJ;YAEA,MAAM,EAAEqkB,YAAY,EAAE,GAAGzhB;YAEzB,MAAM4jB,gCAA0C,EAAE;YAClD,IAAIviB,wBAAwB;gBAC1BuiB,8BAA8BzhB,IAAI,CAChC1F,aAAI,CAACC,IAAI,CAACgD,4BAAgB,EAAE,CAAC,EAAE8M,wCAA6B,CAAC,GAAG,CAAC;gBAEnE,+DAA+D;gBAC/D,IAAIgP,uBAAuBC,uBAAuB;oBAChDmI,8BAA8BzhB,IAAI,CAChC1F,aAAI,CAACC,IAAI,CACPgD,4BAAgB,EAChB,CAAC,KAAK,EAAE8M,wCAA6B,CAAC,GAAG,CAAC;gBAGhD;YACF;YAEA,MAAMqX,8BAA8B7iB,cACjCS,UAAU,CAAC,kCACXmF,OAAO,CAAC;gBACP,MAAMkd,sBAAmD;oBACvDjjB,SAAS;oBACTb,QAAQ;wBACN,GAAGA,MAAM;wBACT+jB,YAAY1d;wBACZ,GAAI1J,QAAcE,cAAc,GAC5B;4BACEmnB,UAAU;wBACZ,IACA,CAAC,CAAC;wBACNvC,cAAcA,eACVhlB,aAAI,CAAC4F,QAAQ,CAAC9F,SAASklB,gBACvBzhB,OAAOyhB,YAAY;wBACvB3e,cAAc;4BACZ,GAAG9C,OAAO8C,YAAY;4BACtBmhB,iBAAiBtnB,QAAcE,cAAc;4BAE7C,oGAAoG;4BACpGqnB,uBAAuBhe;wBACzB;oBACF;oBACA1E,QAAQ+C;oBACR4f,gBAAgB1nB,aAAI,CAAC4F,QAAQ,CAAClB,uBAAuBoD;oBACrDzC,OAAO;wBACLgP,2BAAe;wBACfrU,aAAI,CAAC4F,QAAQ,CAAC9F,SAAS6X;wBACvB+G,0BAAc;wBACdhd,8BAAkB;wBAClB1B,aAAI,CAACC,IAAI,CAACgD,4BAAgB,EAAEqf,+BAAmB;wBAC/CtiB,aAAI,CAACC,IAAI,CAACgD,4BAAgB,EAAE0kB,qCAAyB,GAAG;wBACxD3nB,aAAI,CAACC,IAAI,CACPgD,4BAAgB,EAChB2kB,8CAAkC,GAAG;2BAEnC7iB,SACA;+BACMxB,OAAO8C,YAAY,CAACwhB,GAAG,GACvB;gCACE7nB,aAAI,CAACC,IAAI,CACPgD,4BAAgB,EAChB6kB,0CAA8B,GAAG;gCAEnC9nB,aAAI,CAACC,IAAI,CACPgD,4BAAgB,EAChB6kB,0CAA8B,GAAG;6BAEpC,GACD,EAAE;4BACN9nB,aAAI,CAACC,IAAI,CAACgD,4BAAgB,EAAEgd,8BAAkB;4BAC9CjgB,aAAI,CAACC,IAAI,CAACkgB,oCAAwB;4BAClCvB,8BAAkB;4BAClB5e,aAAI,CAACC,IAAI,CACPgD,4BAAgB,EAChBuf,qCAAyB,GAAG;4BAE9BxiB,aAAI,CAACC,IAAI,CACPgD,4BAAgB,EAChBuf,qCAAyB,GAAG;yBAE/B,GACD,EAAE;wBACNuF,mCAAuB;wBACvBC,yBAAa;wBACbhoB,aAAI,CAACC,IAAI,CAACgD,4BAAgB,EAAEglB,8BAAkB,GAAG;wBACjDjoB,aAAI,CAACC,IAAI,CAACgD,4BAAgB,EAAEglB,8BAAkB,GAAG;2BAC9Cd;qBACJ,CACE/kB,MAAM,CAAC8lB,wBAAW,EAClB5lB,GAAG,CAAC,CAAC8C,OAASpF,aAAI,CAACC,IAAI,CAACsD,OAAOzD,OAAO,EAAEsF;oBAC3C+iB,QAAQ,EAAE;gBACZ;gBAEA,OAAOd;YACT;YAEF,IAAI,CAACjJ,gBAAgB;gBACnBgJ,4BAA4Be,MAAM,CAACziB,IAAI,CACrC1F,aAAI,CAAC4F,QAAQ,CACXkC,KACA9H,aAAI,CAACC,IAAI,CACPD,aAAI,CAAC8F,OAAO,CACVkB,QAAQC,OAAO,CACb,sDAGJ;YAIR;YAEA,MAAMjE,6BAA6BlD,SAAS0gB;YAE5C,IAAI,CAAC7X,kBAAkB,CAACiU,oBAAoB;gBAC1CA,qBAAqBqB,IAAAA,sCAAkB,EAAC;oBACtCnW;oBACAvE;oBACAzD;oBACAoe,mBAAmBC,IAAAA,qCAA6B,EAACwB;oBACjD9a,aAAa;2BAAIA;qBAAY;oBAC7BN;oBACA6Z;oBACAzB;oBACAjY;oBACA2Z,iBAAiBpQ,QAAQnD;gBAC3B,GAAGwP,KAAK,CAAC,CAACpD;oBACR3W,QAAQgO,KAAK,CAAC2I;oBACdzP,QAAQgH,IAAI,CAAC;gBACf;YACF;YAEA,IAAI4Q,iBAAiBhE,IAAI,GAAG,KAAKtZ,SAASsZ,IAAI,GAAG,GAAG;gBAClD,yDAAyD;gBACzD,+DAA+D;gBAC/D/G,eAAeW,UAAU,GAAGT,IAAAA,sBAAe,EAAC;uBACvC6K;uBACAtd;iBACJ,EAAEO,GAAG,CAAC,CAAClD;oBACN,OAAOgpB,IAAAA,8BAAc,EAAChpB,MAAMyC;gBAC9B;YAEA,0DAA0D;YAC5D;YAEA,2DAA2D;YAC3D,MAAM0C,cACHS,UAAU,CAAC,yBACXC,YAAY,CAAC,IAAM9D,cAAciT,oBAAoBE;YAExD,iHAAiH;YACjH,8DAA8D;YAC9D,MAAM+T,oBACJ,CAAC3H,4BAA6B,CAAA,CAACG,yBAAyB5N,WAAU;YAEpE,IAAIkM,aAAa9D,IAAI,GAAG,GAAG;gBACzB,MAAMnE,MAAM,IAAI3D,MACd,CAAC,qCAAqC,EACpC4L,aAAa9D,IAAI,KAAK,IAAI,KAAK,IAChC,kDAAkD,EAAE;uBAAI8D;iBAAa,CACnE7c,GAAG,CAAC,CAACgmB,KAAO,CAAC,KAAK,EAAEA,GAAG,CAAC,EACxBroB,IAAI,CACH,MACA,sFAAsF,CAAC;gBAE7FiX,IAAIE,IAAI,GAAG;gBACX,MAAMF;YACR;YAEA,MAAMqR,IAAAA,0BAAY,EAACzoB,SAAS+B;YAE5B,IAAI0B,OAAO8C,YAAY,CAACmiB,WAAW,EAAE;gBACnC,MAAMC,WACJzhB,QAAQ;gBAEV,MAAM0hB,eAAe,MAAM,IAAI3M,QAAkB,CAAC9U,SAAS0hB;oBACzDF,SACE,YACA;wBAAEtb,KAAKnN,aAAI,CAACC,IAAI,CAACH,SAAS;oBAAU,GACpC,CAACoX,KAAK7R;wBACJ,IAAI6R,KAAK;4BACP,OAAOyR,OAAOzR;wBAChB;wBACAjQ,QAAQ5B;oBACV;gBAEJ;gBAEA+hB,4BAA4B/hB,KAAK,CAACK,IAAI,IACjCgjB,aAAapmB,GAAG,CAAC,CAACzB,WACnBb,aAAI,CAACC,IAAI,CAACsD,OAAOzD,OAAO,EAAE,UAAUe;YAG1C;YAEA,MAAM+nB,WAAqC;gBACzC;oBACEja,aAAa;oBACbC,iBAAiBrL,OAAO8C,YAAY,CAACmiB,WAAW,GAAG,IAAI;gBACzD;gBACA;oBACE7Z,aAAa;oBACbC,iBAAiBrL,OAAO8C,YAAY,CAACwiB,iBAAiB,GAAG,IAAI;gBAC/D;gBACA;oBACEla,aAAa;oBACbC,iBAAiBrL,OAAO8C,YAAY,CAAC8N,GAAG,GAAG,IAAI;gBACjD;aACD;YACDjI,UAAUW,MAAM,CACd+b,SAAStmB,GAAG,CAAC,CAACwmB;gBACZ,OAAO;oBACLja,WAAWC,iCAAyB;oBACpCC,SAAS+Z;gBACX;YACF;YAGF,MAAM3lB,iCACJrD,SACAsnB;YAGF,MAAMziB,qBAAyC,MAAMrD,aACnDtB,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,EAAEqf,+BAAmB;YAG1D,IAAI,CAAC3Z,gBAAgB;gBACnB,IAAImC,eAAe;oBACjB,MAAM8R;oBAEN,IAAI3R,0BAA0B;wBAC5B1K,QAAQC,GAAG,CAAC;oBACd,OAAO;wBACLD,QAAQC,GAAG,CAAC;wBACZ,MAAMuoB,eAAe,MAAMC,IAAAA,0BAAY,EACrC;4BACEzlB;4BACA1B;4BACA/B;4BACAoL;4BACAI;4BACAC;4BACA0d,kBAAkB;gCAChBC,wBACEjf,8BAAgB,CAAC0G,YAAY,CAAEC,aAAa;gCAC9CuY,oCACElf,8BAAgB,CAAC0G,YAAY,CAAEM,wBAAwB;gCACzDmY,iCACEnf,8BAAgB,CAAC0G,YAAY,CAAEK,qBAAqB;4BACxD;4BACAxE;4BACA6c,kBACE9lB,OAAO8C,YAAY,CAAC2Q,6BAA6B;wBACrD,GACA;4BACEtH,SAAS;gCACPvK,OAAOoK,CAAAA,0CAAAA,uBAAwBG,OAAO,CAACvK,KAAK,KAAI,EAAE;gCAClDoH,KAAKkF,CAAAA,yCAAAA,sBAAuB/B,OAAO,CAACnD,GAAG,KAAI,EAAE;4BAC/C;4BACAmK,WAAW;gCACTvR,OAAOoK,CAAAA,0CAAAA,uBAAwBmH,SAAS,CAACvR,KAAK,KAAI,EAAE;gCACpDoH,KAAKkF,CAAAA,yCAAAA,sBAAuBiF,SAAS,CAACnK,GAAG,KAAI,EAAE;4BACjD;4BACA2C,gBAAgB3L,OAAO2L,cAAc;wBACvC;wBAEF,uDAAuD;wBACvD,IAAI6Z,aAAanJ,aAAa,EAAE;4BAC9BA,gBAAgBmJ,aAAanJ,aAAa;wBAC5C;oBACF;oBAEArf,QAAQC,GAAG,CAAC;oBACZ,MAAM8oB,IAAAA,0BAAY,EAAC;wBACjB/lB;wBACAzD;wBACAoL;oBACF;oBAEA3K,QAAQC,GAAG,CAAC;oBACZ,MAAM+oB,IAAAA,gCAAe,EAAC;wBAAEzpB;oBAAQ;gBAClC;YACF;YAEA,MAAM8B,oBAAuC;gBAC3CwC,SAAS;gBACTjC,QAAQ,CAAC;gBACTQ,eAAe,CAAC;gBAChB6mB,gBAAgB,EAAE;gBAClBC,SAAS9Y;YACX;YAEA,MAAM+Y,qBAA+B,EAAE;YAEvC,MAAM,EAAExU,IAAI,EAAE,GAAG3R;YAEjB,MAAMomB,wBAAwBpD,+BAAmB,CAACnkB,MAAM,CACtD,CAAChD,OACC8K,WAAW,CAAC9K,KAAK,IACjB8K,WAAW,CAAC9K,KAAK,CAACuN,UAAU,CAAC;YAEjCgd,sBAAsBC,OAAO,CAAC,CAACxqB;gBAC7B,IAAI,CAAC2C,SAAS8nB,GAAG,CAACzqB,SAAS,CAACshB,0BAA0B;oBACpD7b,YAAY8N,GAAG,CAACvT;gBAClB;YACF;YAEA,MAAM0qB,cAAcH,sBAAsBlkB,QAAQ,CAAC;YACnD,MAAMskB,sBACJ,CAACD,eAAe,CAACjJ,yBAAyB,CAACH;YAE7C,MAAMsJ,gBAAgB;mBAAInlB;mBAAgB9C;aAAS;YACnD,MAAMkoB,iBAAiB1K,YAAYsK,GAAG,CAACzW,4CAAgC;YACvE,MAAM8W,kBAAkB/W,aAAa8W;YAErC,MAAMxS,IAAAA,wCAAsB,EAAC;gBAC3BC,YAAY;YACd;YAEA,sDAAsD;YACtD,mBAAmB;YACnB,yBAAyB;YACzB,gCAAgC;YAChC,IACE,CAACjO,iBACAugB,CAAAA,cAAcne,MAAM,GAAG,KACtBwc,qBACA0B,uBACAhlB,MAAK,GACP;gBACA,MAAMolB,uBACJ5lB,cAAcS,UAAU,CAAC;gBAC3B,MAAMmlB,qBAAqBllB,YAAY,CAAC;oBACtCmlB,IAAAA,8BAAsB,EACpB;2BACKJ;2BACAxlB,SAASW,KAAK,CAAC/C,MAAM,CAAC,CAAChD,OAAS,CAAC4qB,cAAcvkB,QAAQ,CAACrG;qBAC5D,EACD2C,UACA,IAAI+X,IACF5J,MAAMC,IAAI,CAACmP,gBAAgBpd,OAAO,IAAII,GAAG,CACvC,CAAC,CAAClD,MAAM+C,OAAO;wBACb,OAAO;4BAAC/C;4BAAM+C,OAAOG,GAAG,CAAC,CAACC,QAAUA,MAAMvC,IAAI;yBAAE;oBAClD;oBAIN,MAAMiI,YAAYjB,QAAQ,aACvBkB,OAAO;oBAEV,MAAMmiB,eAAmC;wBACvC,GAAG9mB,MAAM;wBACT,sEAAsE;wBACtE,+BAA+B;wBAC/B,wEAAwE;wBACxE,6DAA6D;wBAC7D+mB,eAAe,CAACC;4BACd,+DAA+D;4BAC/D,iEAAiE;4BACjE,uEAAuE;4BACvE,UAAU;4BACV,EAAE;4BACF,6DAA6D;4BAC7DxoB,SAAS6nB,OAAO,CAAC,CAACxqB;gCAChB,IAAIsV,IAAAA,qBAAc,EAACtV,OAAO;oCACxBsqB,mBAAmBhkB,IAAI,CAACtG;oCAExB,IAAI6f,uBAAuB4K,GAAG,CAACzqB,OAAO;wCACpC,iEAAiE;wCACjE,mBAAmB;wCACnB,IAAI8V,MAAM;4CACRqV,UAAU,CAAC,CAAC,CAAC,EAAErV,KAAKuM,aAAa,CAAC,EAAEriB,KAAK,CAAC,CAAC,GAAG;gDAC5CA;gDACAorB,OAAO;oDAAEC,gBAAgB;gDAAO;4CAClC;wCACF,OAAO;4CACLF,UAAU,CAACnrB,KAAK,GAAG;gDACjBA;gDACAorB,OAAO;oDAAEC,gBAAgB;gDAAO;4CAClC;wCACF;oCACF,OAAO;wCACL,iEAAiE;wCACjE,iCAAiC;wCACjC,OAAOF,UAAU,CAACnrB,KAAK;oCACzB;gCACF;4BACF;4BAEA,oEAAoE;4BACpE,cAAc;4BACdkgB,gBAAgBsK,OAAO,CAAC,CAACznB,QAAQ/C;gCAC/B+C,OAAOynB,OAAO,CAAC,CAACrnB;oCACdgoB,UAAU,CAAChoB,MAAMvC,IAAI,CAAC,GAAG;wCACvBZ;wCACAorB,OAAO;4CAAEE,eAAenoB,MAAMojB,OAAO;wCAAC;oCACxC;gCACF;4BACF;4BAEA,IAAI0C,mBAAmB;gCACrBkC,UAAU,CAAC,OAAO,GAAG;oCACnBnrB,MAAM6T,cAAc,SAAS;gCAC/B;4BACF;4BAEA,IAAI8W,qBAAqB;gCACvBQ,UAAU,CAAC,OAAO,GAAG;oCACnBnrB,MAAM;gCACR;4BACF;4BAEA,wDAAwD;4BACxD,gDAAgD;4BAChDmgB,YAAYqK,OAAO,CAAC,CAACznB,QAAQyhB;gCAC3B,MAAM2B,YAAY7F,kBAAkBiL,GAAG,CAAC/G;gCACxC,MAAMgH,iBAAiBrF,CAAAA,6BAAAA,UAAWM,OAAO,MAAK;gCAE9C,MAAMzC,oBAAoBmC,YACtBsF,IAAAA,2BAAsB,EAACtnB,OAAO8C,YAAY,CAAC8N,GAAG,EAAEoR,aAChD3b;gCAEJzH,OAAOynB,OAAO,CAAC,CAACrnB;oCACdgoB,UAAU,CAAChoB,MAAMvC,IAAI,CAAC,GAAG;wCACvBZ,MAAMwkB;wCACN4G,OAAO;4CAAEE,eAAenoB,MAAMojB,OAAO;wCAAC;wCACtCmF,sBAAsBvoB,MAAMqjB,mBAAmB;wCAC/CmF,iBAAiBH;wCACjBI,WAAW;wCACXC,oBAAoB7H;oCACtB;gCACF;4BACF;4BAEA,IAAIlO,MAAM;gCACR,KAAK,MAAM9V,QAAQ;uCACdyF;uCACA9C;uCACCsmB,oBAAoB;wCAAC;qCAAO,GAAG,EAAE;uCACjC0B,sBAAsB;wCAAC;qCAAO,GAAG,EAAE;iCACxC,CAAE;oCACD,MAAMmB,QAAQnpB,SAAS8nB,GAAG,CAACzqB;oCAC3B,MAAMqmB,YAAY/Q,IAAAA,qBAAc,EAACtV;oCACjC,MAAM+rB,aAAaD,SAASjM,uBAAuB4K,GAAG,CAACzqB;oCAEvD,KAAK,MAAMgsB,UAAUlW,KAAKpT,OAAO,CAAE;4CAMzByoB;wCALR,+DAA+D;wCAC/D,IAAIW,SAASzF,aAAa,CAAC0F,YAAY;wCACvC,MAAMxlB,aAAa,CAAC,CAAC,EAAEylB,OAAO,EAAEhsB,SAAS,MAAM,KAAKA,KAAK,CAAC;wCAE1DmrB,UAAU,CAAC5kB,WAAW,GAAG;4CACvBvG,MAAMmrB,EAAAA,mBAAAA,UAAU,CAACnrB,KAAK,qBAAhBmrB,iBAAkBnrB,IAAI,KAAIA;4CAChCorB,OAAO;gDACLa,cAAcD;gDACdX,gBAAgBU,aAAa,SAASvhB;4CACxC;wCACF;oCACF;oCAEA,IAAIshB,OAAO;wCACT,qDAAqD;wCACrD,OAAOX,UAAU,CAACnrB,KAAK;oCACzB;gCACF;4BACF;4BAEA,OAAOmrB;wBACT;oBACF;oBAEA,MAAMe,gBAAkC;wBACtChjB,YAAY+hB;wBACZtiB;wBACAQ,QAAQ;wBACRF,aAAa;wBACba;wBACA/D,OAAO6kB;wBACPxhB,QAAQxI,aAAI,CAACC,IAAI,CAACH,SAAS;wBAC3ByrB,eAAe;wBACfjkB,YAAYlB,mBAAmBikB;oBACjC;oBAEA,MAAMmB,eAAe,MAAMvjB,UACzBH,KACAwjB,eACA/mB;oBAGF,sDAAsD;oBACtD,IAAI,CAACinB,cAAc;oBAEnB,IAAItiB,eAAezB,QAAQD,GAAG,CAACikB,sBAAsB,KAAK,KAAK;wBAC7DC,IAAAA,oCAAkB,EAACF;oBACrB;oBAEAG,IAAAA,qDAA+B,EAAC;wBAC9B7rB,SAASyD,OAAOzD,OAAO;wBACvB8rB,QAAQ;4BACNvhB;+BACGmhB,aAAaK,2BAA2B,CAACxP,MAAM;yBACnD;oBACH;oBAEAza,kBAAkB4nB,cAAc,GAAGtZ,MAAMC,IAAI,CAC3Cqb,aAAaM,gBAAgB;oBAG/B,2CAA2C;oBAC3C,KAAK,MAAM1sB,QAAQyF,YAAa;wBAC9B,MAAMknB,eAAeC,IAAAA,oBAAW,EAAC5sB,MAAMU,SAAS8J,WAAW;wBAC3D,MAAM7I,YAAE,CAACkrB,MAAM,CAACF;oBAClB;oBAEAxM,YAAYqK,OAAO,CAAC,CAACtE,mBAAmB1B;4BAMpC4H,0BAEuB7L;wBAPzB,MAAMvgB,OAAOogB,mBAAmBmL,GAAG,CAAC/G,oBAAoB;wBACxD,MAAM2B,YAAY7F,kBAAkBiL,GAAG,CAAC/G,oBAAoB,CAAC;wBAE7D,IAAIsI,oBACF3G,UAAUC,UAAU,KAAK,KACzBgG,EAAAA,2BAAAA,aAAaW,MAAM,CAACxB,GAAG,CAACvrB,0BAAxBosB,yBAA+BhG,UAAU,MAAK;wBAEhD,IAAI0G,uBAAqBvM,iBAAAA,UAAUgL,GAAG,CAACvrB,0BAAdugB,eAAqB2D,QAAQ,GAAE;4BACtD,uEAAuE;4BACvE,qFAAqF;4BACrF3D,UAAUyF,GAAG,CAAChmB,MAAM;gCAClB,GAAIugB,UAAUgL,GAAG,CAACvrB,KAAK;gCACvBkkB,UAAU;gCACVD,OAAO;4BACT;wBACF;wBAEA,MAAM+I,oBAAoBC,IAAAA,gCAAe,EAACzI;wBAE1C,kEAAkE;wBAClE,yBAAyB;wBACzB,MAAMR,oBACJ,CAACgJ,qBACDvB,IAAAA,2BAAsB,EAACtnB,OAAO8C,YAAY,CAAC8N,GAAG,EAAEoR,aAC5C,OACA3b;wBAEN,0FAA0F;wBAC1F,4CAA4C;wBAC5C,MAAM0iB,YAAwB;4BAC5B;gCAAEhT,MAAM;gCAAU4G,KAAKqM,+BAAa;4BAAC;4BACrC;gCACEjT,MAAM;gCACN4G,KAAK;gCACL1F,OAAO;4BACT;yBACD;wBAED,mEAAmE;wBACnE,6DAA6D;wBAC7D,mEAAmE;wBACnE,8DAA8D;wBAC9D,2BAA2B;wBAC3B,MAAMrY,SAAmB,EAAE;wBAC3B,MAAMQ,gBAA0B,EAAE;wBAElC,mEAAmE;wBACnE,iEAAiE;wBACjE,+DAA+D;wBAC/D,iEAAiE;wBACjE,mDAAmD;wBACnD,IAAI6pB,yBAA6C,EAAE;wBACnD,IAAIC,uBAA2C,EAAE;wBACjD,KAAK,MAAMC,oBAAoBpH,kBAAmB;4BAChD,IACEoH,iBAAiB9G,mBAAmB,IACpC8G,iBAAiB9G,mBAAmB,CAAC/Z,MAAM,GAAG,GAC9C;gCACA2gB,uBAAuB9mB,IAAI,CAACgnB;4BAC9B,OAAO;gCACLD,qBAAqB/mB,IAAI,CAACgnB;4BAC5B;wBACF;wBAEAF,yBAAyBG,IAAAA,4BAAqB,EAC5CH,wBACA,CAACE,mBAAqBA,iBAAiB1sB,IAAI;wBAE7CysB,uBAAuBE,IAAAA,4BAAqB,EAC1CF,sBACA,CAACC,mBAAqBA,iBAAiB1sB,IAAI;wBAG7CslB,oBAAoB;+BACfmH;+BACAD;yBACJ;wBAED,KAAK,MAAME,oBAAoBpH,kBAAmB;4BAChD,+BAA+B;4BAC/B,iCAAiC;4BACjC,IAAIoH,iBAAiB1sB,IAAI,KAAK4sB,sCAA0B,EAAE;gCACxD;4BACF;4BAEA,IACExJ,qBACAsJ,iBAAiB9G,mBAAmB,IACpC8G,iBAAiB9G,mBAAmB,CAAC/Z,MAAM,GAAG,GAC9C;gCACA,6DAA6D;gCAC7D,8BAA8B;gCAC9BlJ,cAAc+C,IAAI,CAACgnB,iBAAiB1sB,IAAI;4BAC1C,OAAO;gCACL,4DAA4D;gCAC5D,gCAAgC;gCAChCmC,OAAOuD,IAAI,CAACgnB,iBAAiB1sB,IAAI;4BACnC;wBACF;wBAEA,gCAAgC;wBAChC,KAAK,MAAMuC,SAASJ,OAAQ;4BAC1B,IAAIuS,IAAAA,qBAAc,EAACtV,SAASmD,UAAUnD,MAAM;4BAC5C,IAAImD,UAAUqqB,sCAA0B,EAAE;4BAE1C,MAAM,EACJpH,aAAaD,UAAUC,UAAU,IAAI,KAAK,EAC1CqH,WAAW,CAAC,CAAC,EACblG,eAAe,EACfmG,YAAY,EACb,GAAGtB,aAAaW,MAAM,CAACxB,GAAG,CAACpoB,UAAU,CAAC;4BAEvCod,UAAUyF,GAAG,CAAC7iB,OAAO;gCACnB,GAAIod,UAAUgL,GAAG,CAACpoB,MAAM;gCACxBuqB;gCACAnG;4BACF;4BAEA,uEAAuE;4BACvEhH,UAAUyF,GAAG,CAAChmB,MAAM;gCAClB,GAAIugB,UAAUgL,GAAG,CAACvrB,KAAK;gCACvB0tB;gCACAnG;4BACF;4BAEA,IAAInB,eAAe,GAAG;gCACpB,MAAMuH,kBAAkB9J,IAAAA,oCAAiB,EAAC1gB;gCAE1C,IAAIyqB;gCACJ,IAAIZ,mBAAmB;oCACrBY,YAAY;gCACd,OAAO;oCACLA,YAAYhtB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CAAC,CAAC,EAAE8sB,gBAAgB,EAAEhX,qBAAU,CAAC,CAAC;gCAC/D;gCAEA,IAAImX;gCACJ,6DAA6D;gCAC7D,6DAA6D;gCAC7D,6DAA6D;gCAC7D,uBAAuB;gCACvB,IAAI,CAACd,qBAAqBnY,iBAAiB;oCACzCiZ,oBAAoBltB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CACjC,CAAC,EAAE8sB,gBAAgB,EAAE9W,8BAAmB,CAAC,CAAC;gCAE9C;gCAEA,MAAMkX,OAAOC,IAAAA,mBAAW,EAACP;gCAEzBjrB,kBAAkBO,MAAM,CAACI,MAAM,GAAG;oCAChC8qB,eAAeF,KAAKG,MAAM;oCAC1BC,gBAAgBJ,KAAK9hB,OAAO;oCAC5BmiB,eAAevZ,kBACXmP,oBACEqK,4BAAa,CAACC,gBAAgB,GAC9BD,4BAAa,CAACE,MAAM,GACtB/jB;oCACJgkB,iBAAiBxK;oCACjByK,uBAAuBvB;oCACvB9F,0BAA0BhB;oCAC1BnjB,UAAUjD;oCACV4tB;oCACAE;gCACF;4BACF,OAAO;gCACLhB,oBAAoB;gCACpB,8DAA8D;gCAC9D,oBAAoB;gCACpBvM,UAAUyF,GAAG,CAAC7iB,OAAO;oCACnB,GAAIod,UAAUgL,GAAG,CAACpoB,MAAM;oCACxB8gB,OAAO;oCACPC,UAAU;gCACZ;4BACF;wBACF;wBAEA,IAAI,CAAC4I,qBAAqBxX,IAAAA,qBAAc,EAACtV,OAAO;4BAC9C,iEAAiE;4BACjE,0DAA0D;4BAC1D,sBAAsB;4BACtB,IAAI,CAACgkB,qBAAqB,CAAC7f,OAAO8C,YAAY,CAACyb,YAAY,EAAE;gCAC3Dnf,cAAc+C,IAAI,CAACtG;4BACrB;4BAEA,KAAK,MAAMmD,SAASI,cAAe;gCACjC,MAAMoqB,kBAAkB9J,IAAAA,oCAAiB,EAAC1gB;gCAE1C,MAAM,EAAEsqB,QAAQ,EAAErH,UAAU,EAAE,GAC5BgG,aAAaW,MAAM,CAACxB,GAAG,CAACpoB,UAAU,CAAC;gCAErC,IAAIyqB,YAA2B;gCAC/B,IAAI,CAACZ,mBAAmB;oCACtBY,YAAYhtB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CAAC,CAAC,EAAE8sB,gBAAgB,EAAEhX,qBAAU,CAAC,CAAC;gCAC/D;gCAEA,IAAImX;gCACJ,IAAI,CAACd,qBAAqBnY,iBAAiB;oCACzCiZ,oBAAoBltB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CACjC,CAAC,EAAE8sB,gBAAgB,EAAE9W,8BAAmB,CAAC,CAAC;gCAE9C;gCAEA0J,UAAUyF,GAAG,CAAC7iB,OAAO;oCACnB,GAAIod,UAAUgL,GAAG,CAACpoB,MAAM;oCACxBurB,mBAAmB;oCACnB,gEAAgE;oCAChE,2CAA2C;oCAC3ChB,cAAc1J;gCAChB;gCAEA,MAAM2K,eACJtO,cAAckL,GAAG,CAAC/G,oBAAoBqC,sBAAY,CAAC+H,SAAS;gCAE9D,gEAAgE;gCAChE,6DAA6D;gCAC7D,+DAA+D;gCAC/D,IAAIC,qBACF7K,qBAAqB2K,iBAAiB9H,sBAAY,CAACE,SAAS,GACxDX,cAAc,QACd5b;gCAEN,MAAM+B,WAAqBuiB,IAAAA,qCAA2B,EACpDH,cACAxrB;gCAGF,MAAM4qB,OACJN,YACAzJ,qBACA2K,iBAAiB9H,sBAAY,CAACE,SAAS,GACnCiH,IAAAA,mBAAW,EAACP,YACZ,CAAC;gCAEPjrB,kBAAkBe,aAAa,CAACJ,MAAM,GAAG;oCACvCqrB,iBAAiBxK;oCACjBoK,eAAevZ,kBACXmP,oBACEqK,4BAAa,CAACC,gBAAgB,GAC9BD,4BAAa,CAACE,MAAM,GACtB/jB;oCACJikB,uBAAuBvB;oCACvBjtB,YAAYG,IAAAA,qCAAmB,EAC7BF,IAAAA,8BAAkB,EAACiD,OAAO,OAAO9C,EAAE,CAACC,MAAM;oCAE5CstB;oCACArhB;oCACAsiB;oCACAE,gBAAgBhB,KAAKG,MAAM;oCAC3Bc,iBAAiBjB,KAAK9hB,OAAO;oCAC7BgjB,gBAAgB,CAACrB,YACb,OACAxtB,IAAAA,qCAAmB,EACjBF,IAAAA,8BAAkB,EAChB0tB,UAAUvc,OAAO,CAAC,UAAU,KAC5B,OACAhR,EAAE,CAACC,MAAM,CAAC+Q,OAAO,CAAC,oBAAoB;oCAE9Cyc;oCACAoB,wBAAwB,CAACpB,oBACrBtjB,YACApK,IAAAA,qCAAmB,EACjBF,IAAAA,8BAAkB,EAChB4tB,kBAAkBzc,OAAO,CAAC,oBAAoB,KAC9C,OACAhR,EAAE,CAACC,MAAM,CAAC+Q,OAAO,CACjB,oBACA;gCAGV;4BACF;wBACF;oBACF;oBAEA,MAAM8d,mBAAmB,OACvBC,YACApvB,MACAgG,MACA8lB,OACAuD,KACAC,oBAAoB,KAAK;wBAEzB,OAAOvE,qBACJnlB,UAAU,CAAC,sBACXC,YAAY,CAAC;4BACZG,OAAO,CAAC,EAAEA,KAAK,CAAC,EAAEqpB,IAAI,CAAC;4BACvB,MAAME,OAAO3uB,aAAI,CAACC,IAAI,CAACqrB,cAAc9iB,MAAM,EAAEpD;4BAC7C,MAAMqN,WAAWuZ,IAAAA,oBAAW,EAC1BwC,YACA1uB,SACA8J,WACA;4BAGF,MAAMglB,eAAe5uB,aAAI,CACtB4F,QAAQ,CACP5F,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,GACnCjD,aAAI,CAACC,IAAI,CACPD,aAAI,CAACC,IAAI,CACPwS,UACA,yDAAyD;4BACzD,4BAA4B;4BAC5B+b,WACGK,KAAK,CAAC,GACNC,KAAK,CAAC,KACNxsB,GAAG,CAAC,IAAM,MACVrC,IAAI,CAAC,OAEVmF,OAGHqL,OAAO,CAAC,OAAO;4BAElB,IACE,CAACya,SACD,CACE,mDAAmD;4BACnD,kDAAkD;4BAEhD3E,CAAAA,+BAAmB,CAAC9gB,QAAQ,CAACrG,SAC7B,CAACuqB,sBAAsBlkB,QAAQ,CAACrG,KAAI,GAGxC;gCACAwgB,aAAa,CAACxgB,KAAK,GAAGwvB;4BACxB;4BAEA,MAAMG,OAAO/uB,aAAI,CAACC,IAAI,CAACH,SAASmD,4BAAgB,EAAE2rB;4BAClD,MAAMI,aACJptB,kBAAkB4nB,cAAc,CAAC/jB,QAAQ,CAACrG;4BAE5C,2DAA2D;4BAC3D,0DAA0D;4BAC1D,qBAAqB;4BACrB,IAAI,AAAC,CAAA,CAAC8V,QAAQwZ,iBAAgB,KAAM,CAACM,YAAY;gCAC/C,MAAMjuB,YAAE,CAAC8E,KAAK,CAAC7F,aAAI,CAAC8F,OAAO,CAACipB,OAAO;oCAAEhpB,WAAW;gCAAK;gCACrD,MAAMhF,YAAE,CAACkuB,MAAM,CAACN,MAAMI;4BACxB,OAAO,IAAI7Z,QAAQ,CAACgW,OAAO;gCACzB,wDAAwD;gCACxD,oDAAoD;gCACpD,OAAOtL,aAAa,CAACxgB,KAAK;4BAC5B;4BAEA,IAAI8V,MAAM;gCACR,IAAIwZ,mBAAmB;gCAEvB,MAAMQ,YAAY9vB,SAAS,MAAMY,aAAI,CAACmvB,OAAO,CAAC/pB,QAAQ;gCACtD,MAAMgqB,sBAAsBR,aAAaC,KAAK,CAC5C,SAAShjB,MAAM;gCAGjB,KAAK,MAAMuf,UAAUlW,KAAKpT,OAAO,CAAE;oCACjC,MAAMutB,UAAU,CAAC,CAAC,EAAEjE,OAAO,EAAEhsB,SAAS,MAAM,KAAKA,KAAK,CAAC;oCAEvD,IACE8rB,SACAtpB,kBAAkB4nB,cAAc,CAAC/jB,QAAQ,CAAC4pB,UAC1C;wCACA;oCACF;oCAEA,MAAMC,sBAAsBtvB,aAAI,CAC7BC,IAAI,CACH,SACAmrB,SAAS8D,WACT,8DAA8D;oCAC9D,+BAA+B;oCAC/B9vB,SAAS,MAAM,KAAKgwB,qBAErB3e,OAAO,CAAC,OAAO;oCAElB,MAAM8e,cAAcvvB,aAAI,CAACC,IAAI,CAC3BqrB,cAAc9iB,MAAM,EACpB4iB,SAAS8D,WACT9vB,SAAS,MAAM,KAAKgG;oCAEtB,MAAMoqB,cAAcxvB,aAAI,CAACC,IAAI,CAC3BH,SACAmD,4BAAgB,EAChBqsB;oCAGF,IAAI,CAACpE,OAAO;wCACVtL,aAAa,CAACyP,QAAQ,GAAGC;oCAC3B;oCACA,MAAMvuB,YAAE,CAAC8E,KAAK,CAAC7F,aAAI,CAAC8F,OAAO,CAAC0pB,cAAc;wCACxCzpB,WAAW;oCACb;oCACA,MAAMhF,YAAE,CAACkuB,MAAM,CAACM,aAAaC;gCAC/B;4BACF;wBACF;oBACJ;oBAEA,eAAeC;wBACb,OAAOtF,qBACJnlB,UAAU,CAAC,gCACXC,YAAY,CAAC;4BACZ,MAAM0pB,OAAO3uB,aAAI,CAACC,IAAI,CACpBH,SACA,UACA,OACA;4BAEF,MAAMwvB,sBAAsBtvB,aAAI,CAC7BC,IAAI,CAAC,SAAS,YACdwQ,OAAO,CAAC,OAAO;4BAElB,IAAInQ,IAAAA,cAAU,EAACquB,OAAO;gCACpB,MAAM5tB,YAAE,CAACiF,QAAQ,CACf2oB,MACA3uB,aAAI,CAACC,IAAI,CAACH,SAAS,UAAUwvB;gCAE/B1P,aAAa,CAAC,OAAO,GAAG0P;4BAC1B;wBACF;oBACJ;oBAEA,oEAAoE;oBACpE,IAAIpF,iBAAiB;wBACnB,MAAMuF;oBACR,OAAO;wBACL,sGAAsG;wBACtG,IAAI,CAACxc,eAAe,CAACE,aAAakV,mBAAmB;4BACnD,MAAMkG,iBAAiB,WAAW,QAAQ,QAAQ,OAAO;wBAC3D;oBACF;oBAEA,IAAIxE,qBAAqB;wBACvB,MAAMwE,iBAAiB,WAAW,QAAQ,QAAQ,OAAO;oBAC3D;oBAEA,KAAK,MAAMnvB,QAAQ4qB,cAAe;wBAChC,MAAMkB,QAAQnpB,SAAS8nB,GAAG,CAACzqB;wBAC3B,MAAMswB,sBAAsBzQ,uBAAuB4K,GAAG,CAACzqB;wBACvD,MAAMqmB,YAAY/Q,IAAAA,qBAAc,EAACtV;wBACjC,MAAMuwB,SAASvQ,eAAeyK,GAAG,CAACzqB;wBAClC,MAAMgG,OAAO6d,IAAAA,oCAAiB,EAAC7jB;wBAE/B,MAAMwwB,WAAWjQ,UAAUgL,GAAG,CAACvrB;wBAC/B,MAAMywB,eAAerE,aAAasE,MAAM,CAACnF,GAAG,CAACvrB;wBAC7C,IAAIwwB,YAAYC,cAAc;4BAC5B,qBAAqB;4BACrB,IAAID,SAASnM,aAAa,EAAE;gCAC1BmM,SAASlJ,gBAAgB,GAAGkJ,SAASnM,aAAa,CAACnhB,GAAG,CACpD,CAACmQ;oCACC,MAAMiK,WAAWmT,aAAaE,eAAe,CAACpF,GAAG,CAAClY;oCAClD,IAAI,OAAOiK,aAAa,aAAa;wCACnC,MAAM,IAAInJ,MAAM;oCAClB;oCAEA,OAAOmJ;gCACT;4BAEJ;4BACAkT,SAASnJ,YAAY,GAAGoJ,aAAaE,eAAe,CAACpF,GAAG,CAACvrB;wBAC3D;wBAEA,+DAA+D;wBAC/D,gEAAgE;wBAChE,YAAY;wBACZ,MAAM4wB,gBAAgB,CAAE9E,CAAAA,SAASzF,aAAa,CAACiK,mBAAkB;wBAEjE,IAAIM,eAAe;4BACjB,MAAMzB,iBAAiBnvB,MAAMA,MAAMgG,MAAM8lB,OAAO;wBAClD;wBAEA,IAAIyE,UAAW,CAAA,CAACzE,SAAUA,SAAS,CAACzF,SAAS,GAAI;4BAC/C,MAAMwK,UAAU,CAAC,EAAE7qB,KAAK,IAAI,CAAC;4BAC7B,MAAMmpB,iBAAiBnvB,MAAM6wB,SAASA,SAAS/E,OAAO;4BAEtD,IAAIA,OAAO;gCACT,MAAMqD,iBAAiBnvB,MAAM6wB,SAASA,SAAS/E,OAAO;4BACxD;wBACF;wBAEA,IAAIA,OAAO;4BACT,yDAAyD;4BACzD,oDAAoD;4BACpD,IAAI,CAACzF,WAAW;gCACd,MAAM8I,iBAAiBnvB,MAAMA,MAAMgG,MAAM8lB,OAAO;gCAEhD,IAAIhW,MAAM;oCACR,+DAA+D;oCAC/D,KAAK,MAAMkW,UAAUlW,KAAKpT,OAAO,CAAE;4CAK7B0pB;wCAJJ,MAAM0E,aAAa,CAAC,CAAC,EAAE9E,OAAO,EAAEhsB,SAAS,MAAM,KAAKA,KAAK,CAAC;wCAE1DwC,kBAAkBO,MAAM,CAAC+tB,WAAW,GAAG;4CACrC1J,0BACEgF,EAAAA,2BAAAA,aAAaW,MAAM,CAACxB,GAAG,CAACuF,gCAAxB1E,yBAAqChG,UAAU,KAC/C;4CACFoI,iBAAiBhkB;4CACjB4jB,eAAe5jB;4CACfvH,UAAU;4CACV2qB,WAAWhtB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CACxB,eACA4B,SACA,CAAC,EAAEuD,KAAK,KAAK,CAAC;4CAEhB8nB,mBAAmBtjB;wCACrB;oCACF;gCACF,OAAO;wCAGD4hB;oCAFJ5pB,kBAAkBO,MAAM,CAAC/C,KAAK,GAAG;wCAC/BonB,0BACEgF,EAAAA,4BAAAA,aAAaW,MAAM,CAACxB,GAAG,CAACvrB,0BAAxBosB,0BAA+BhG,UAAU,KAAI;wCAC/CoI,iBAAiBhkB;wCACjB4jB,eAAe5jB;wCACfvH,UAAU;wCACV2qB,WAAWhtB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CACxB,eACA4B,SACA,CAAC,EAAEuD,KAAK,KAAK,CAAC;wCAEhB,6CAA6C;wCAC7C8nB,mBAAmBtjB;oCACrB;gCACF;gCACA,iCAAiC;gCACjC,IAAIgmB,UAAU;wCAEVpE;oCADFoE,SAASpJ,wBAAwB,GAC/BgF,EAAAA,4BAAAA,aAAaW,MAAM,CAACxB,GAAG,CAACvrB,0BAAxBosB,0BAA+BhG,UAAU,KAAI;gCACjD;4BACF,OAAO;gCACL,oEAAoE;gCACpE,4CAA4C;gCAC5C,iEAAiE;gCACjE,yCAAyC;gCACzC,KAAK,MAAMjjB,SAAS+c,gBAAgBqL,GAAG,CAACvrB,SAAS,EAAE,CAAE;wCAwCjDosB;oCAvCF,MAAM2E,WAAWlN,IAAAA,oCAAiB,EAAC1gB,MAAMvC,IAAI;oCAC7C,MAAMuuB,iBACJnvB,MACAmD,MAAMvC,IAAI,EACVmwB,UACAjF,OACA,QACA;oCAEF,MAAMqD,iBACJnvB,MACAmD,MAAMvC,IAAI,EACVmwB,UACAjF,OACA,QACA;oCAGF,IAAIyE,QAAQ;wCACV,MAAMM,UAAU,CAAC,EAAEE,SAAS,IAAI,CAAC;wCACjC,MAAM5B,iBACJnvB,MACA6wB,SACAA,SACA/E,OACA,QACA;wCAEF,MAAMqD,iBACJnvB,MACA6wB,SACAA,SACA/E,OACA,QACA;oCAEJ;oCAEA,MAAM1E,2BACJgF,EAAAA,4BAAAA,aAAaW,MAAM,CAACxB,GAAG,CAACpoB,MAAMvC,IAAI,sBAAlCwrB,0BAAqChG,UAAU,KAAI;oCAErD,IAAI,OAAOgB,6BAA6B,aAAa;wCACnD,MAAM,IAAIjT,MAAM;oCAClB;oCAEA3R,kBAAkBO,MAAM,CAACI,MAAMvC,IAAI,CAAC,GAAG;wCACrCwmB;wCACAoH,iBAAiBhkB;wCACjB4jB,eAAe5jB;wCACfvH,UAAUjD;wCACV4tB,WAAWhtB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CACxB,eACA4B,SACA,CAAC,EAAEohB,IAAAA,oCAAiB,EAAC1gB,MAAMvC,IAAI,EAAE,KAAK,CAAC;wCAEzC,6CAA6C;wCAC7CktB,mBAAmBtjB;oCACrB;oCAEA,kCAAkC;oCAClC,IAAIgmB,UAAU;wCACZA,SAASpJ,wBAAwB,GAAGA;oCACtC;gCACF;4BACF;wBACF;oBACF;oBAEA,iCAAiC;oBACjC,MAAMzlB,YAAE,CAACqvB,EAAE,CAAC9E,cAAc9iB,MAAM,EAAE;wBAAEzC,WAAW;wBAAMsqB,OAAO;oBAAK;oBACjE,MAAMlvB,cAAcwW,mBAAmBiI;gBACzC;YACF;YAEA,MAAM0Q,mBAAmB9R,IAAAA,gBAAa,EAAC;YACvC,IAAI+R,qBAAqB/R,IAAAA,gBAAa,EAAC,CAAC,uBAAuB,CAAC;YAEhE,wCAAwC;YACxC6B,OAAO5X,GAAG;YAEV,MAAM+nB,cAAc/oB,QAAQuQ,MAAM,CAACsI;YACnCpU,UAAUW,MAAM,CACd4jB,IAAAA,0BAAkB,EAACthB,YAAY;gBAC7ByO,mBAAmB4S,WAAW,CAAC,EAAE;gBACjCE,iBAAiB7rB,YAAYwW,IAAI;gBACjCsV,sBAAsB5uB,SAASsZ,IAAI;gBACnCuV,sBAAsBvR,iBAAiBhE,IAAI;gBAC3CwV,cACE1hB,WAAWtD,MAAM,GAChBhH,CAAAA,YAAYwW,IAAI,GAAGtZ,SAASsZ,IAAI,GAAGgE,iBAAiBhE,IAAI,AAAD;gBAC1DyV,cAAczI;gBACd0I,oBACEpQ,CAAAA,gCAAAA,aAAclb,QAAQ,CAAC,uBAAsB;gBAC/CurB,eAAexlB,iBAAiBK,MAAM;gBACtColB,cAAc5lB,QAAQQ,MAAM;gBAC5BqlB,gBAAgB3lB,UAAUM,MAAM,GAAG;gBACnCslB,qBAAqB9lB,QAAQjJ,MAAM,CAAC,CAAC2S,IAAW,CAAC,CAACA,EAAE8U,GAAG,EAAEhe,MAAM;gBAC/DulB,sBAAsB5lB,iBAAiBpJ,MAAM,CAAC,CAAC2S,IAAW,CAAC,CAACA,EAAE8U,GAAG,EAC9Dhe,MAAM;gBACTwlB,uBAAuB9lB,UAAUnJ,MAAM,CAAC,CAAC2S,IAAW,CAAC,CAACA,EAAE8U,GAAG,EAAEhe,MAAM;gBACnEylB,iBAAiB5gB,oBAAoB,IAAI;gBACzCoC;gBACA+L;gBACAC;gBACAC;gBACAC;YACF;YAGF,IAAI/U,8BAAgB,CAACsnB,cAAc,EAAE;gBACnC,MAAM/jB,SAASgkB,IAAAA,8BAAsB,EACnCvnB,8BAAgB,CAACsnB,cAAc,CAACE,MAAM;gBAExCvlB,UAAUW,MAAM,CAACW;gBACjBtB,UAAUW,MAAM,CACd6kB,IAAAA,4CAAoC,EAClCznB,8BAAgB,CAACsnB,cAAc,CAACI,6BAA6B;YAGnE;YAEA,IAAI5vB,SAASsZ,IAAI,GAAG,KAAKtW,QAAQ;oBA4CpBxB;gBA3CXmmB,mBAAmBE,OAAO,CAAC,CAACgI;oBAC1B,MAAM7E,kBAAkB9J,IAAAA,oCAAiB,EAAC2O;oBAC1C,MAAM5E,YAAYhtB,aAAI,CAACitB,KAAK,CAAChtB,IAAI,CAC/B,eACA4B,SACA,CAAC,EAAEkrB,gBAAgB,KAAK,CAAC;oBAG3BnrB,kBAAkBe,aAAa,CAACivB,SAAS,GAAG;wBAC1CvyB,YAAYG,IAAAA,qCAAmB,EAC7BF,IAAAA,8BAAkB,EAACsyB,UAAU,OAAOnyB,EAAE,CAACC,MAAM;wBAE/CkuB,iBAAiBhkB;wBACjB4jB,eAAe5jB;wBACfojB;wBACArhB,UAAUuT,yBAAyB2K,GAAG,CAAC+H,YACnC,OACA3S,uBAAuB4K,GAAG,CAAC+H,YACzB,CAAC,EAAE7E,gBAAgB,KAAK,CAAC,GACzB;wBACNkB,oBAAoBrkB;wBACpBykB,gBAAgB7uB,IAAAA,qCAAmB,EACjCF,IAAAA,8BAAkB,EAChB0tB,UAAUvc,OAAO,CAAC,WAAW,KAC7B,OACAhR,EAAE,CAACC,MAAM,CAAC+Q,OAAO,CAAC,oBAAoB;wBAE1C,6CAA6C;wBAC7Cyc,mBAAmBtjB;wBACnB0kB,wBAAwB1kB;oBAC1B;gBACF;gBAEAK,8BAAgB,CAAC2G,aAAa,GAAGD,aAAaC,aAAa;gBAC3D3G,8BAAgB,CAACiP,mBAAmB,GAClC3V,OAAO8C,YAAY,CAAC6S,mBAAmB;gBACzCjP,8BAAgB,CAAC4nB,2BAA2B,GAC1CtuB,OAAO8C,YAAY,CAACwrB,2BAA2B;gBAEjD,MAAMpwB,uBAAuB3B,SAAS8B;gBACtC,MAAMD,uBAAuBC,mBAAmB;oBAC9C9B;oBACA+B;oBACAC,SAASyB,EAAAA,eAAAA,OAAO2R,IAAI,qBAAX3R,aAAazB,OAAO,KAAI,EAAE;gBACrC;YACF,OAAO;gBACL,MAAML,uBAAuB3B,SAAS;oBACpCsE,SAAS;oBACTjC,QAAQ,CAAC;oBACTQ,eAAe,CAAC;oBAChB8mB,SAAS9Y;oBACT6Y,gBAAgB,EAAE;gBACpB;YACF;YAEA,MAAMlmB,oBAAoBxD,SAASyD;YACnC,MAAMpC,cAAcnB,aAAI,CAACC,IAAI,CAACH,SAASgyB,yBAAa,GAAG;gBACrD1tB,SAAS;gBACT2tB,kBAAkB,OAAOxuB,OAAO+mB,aAAa,KAAK;gBAClD0H,qBAAqBzuB,OAAO0uB,aAAa,KAAK;gBAC9CrR,qBAAqBA,wBAAwB;YAC/C;YACA,MAAM7f,YAAE,CAACkrB,MAAM,CAACjsB,aAAI,CAACC,IAAI,CAACH,SAASoyB,yBAAa,GAAG5X,KAAK,CAAC,CAACpD;gBACxD,IAAIA,IAAIE,IAAI,KAAK,UAAU;oBACzB,OAAO2E,QAAQ9U,OAAO;gBACxB;gBACA,OAAO8U,QAAQ4M,MAAM,CAACzR;YACxB;YAEA,IAAIjJ,QAAQ1K,OAAO8C,YAAY,CAACwiB,iBAAiB,GAAG;gBAClD,MAAMtkB,cACHS,UAAU,CAAC,0BACXC,YAAY,CAAC;oBACZ,MAAMktB,IAAAA,0CAAoB,EACxBrqB,KACA9H,aAAI,CAACC,IAAI,CAACH,SAASiD,oCAAwB;gBAE/C;YACJ;YAEA,MAAM6Z;YAEN,IAAI2T,oBAAoB;gBACtBA,mBAAmBvJ,cAAc;gBACjCuJ,qBAAqB3mB;YACvB;YAEA,IAAIrG,OAAOoe,MAAM,KAAK,UAAU;gBAC9B,MAAM9Z,uBACJtE,QACAuE,KACAC,oBACAC,cACAzD;YAEJ;YAEA,IAAIhB,OAAOoe,MAAM,KAAK,cAAc;gBAClC,MAAMrd,yBACJC,eACAzE,SACA0E,UACAC,sBACAC,uBACA0iB,6BACAziB,oBACAC,wBACAC,aACAC,gBACAC;YAEJ;YAEA,IAAIurB,kBAAkBA,iBAAiBtJ,cAAc;YACrDzmB,QAAQC,GAAG;YAEX,IAAI0I,aAAa;gBACf3E,cACGS,UAAU,CAAC,uBACXmF,OAAO,CAAC,IAAMioB,IAAAA,yBAAiB,EAAC;wBAAE7mB;wBAAWD;wBAAUD;oBAAQ;YACpE;YAEA,MAAM9G,cAAcS,UAAU,CAAC,mBAAmBC,YAAY,CAAC,IAC7DotB,IAAAA,qBAAa,EAAC7tB,UAAUmb,WAAW;oBACjC2S,UAAUxyB;oBACV+B,SAASA;oBACTwK;oBACAgc;oBACAnZ,gBAAgB3L,OAAO2L,cAAc;oBACrC4Q;oBACAD;oBACAlb;oBACA0d,UAAU9e,OAAO8C,YAAY,CAACgc,QAAQ;gBACxC;YAGF,MAAM9d,cACHS,UAAU,CAAC,mBACXC,YAAY,CAAC,IAAMiH,UAAUsC,KAAK;YAErC,MAAMgO;QACR;IACF,SAAU;QACR,kDAAkD;QAClD,MAAM+V,yBAAoB,CAACC,GAAG;QAE9B,6DAA6D;QAC7D,MAAMC,IAAAA,qBAAc;QACpBC,IAAAA,4BAAuB;QACvBC,IAAAA,yBAAoB;QAEpB,IAAInpB,kBAAkBE,cAAc;YAClCkpB,IAAAA,oBAAW,EAAC;gBACVppB;gBACAwB,MAAM;gBACN6nB,YAAY/qB;gBACZhI,SAAS4J,aAAa5J,OAAO;gBAC7BgzB,MAAM;YACR;QACF;IACF;AACF"}