{"version":3,"sources":["../../../src/lib/metadata/resolve-metadata.ts"],"sourcesContent":["import type {\n  Metadata,\n  ResolvedMetadata,\n  ResolvedViewport,\n  ResolvingMetadata,\n  ResolvingViewport,\n  Viewport,\n} from './types/metadata-interface'\nimport type { MetadataImageModule } from '../../build/webpack/loaders/metadata/types'\nimport type { GetDynamicParamFromSegment } from '../../server/app-render/app-render'\nimport type { Twitter } from './types/twitter-types'\nimport type { OpenGraph } from './types/opengraph-types'\nimport type { ComponentsType } from '../../build/webpack/loaders/next-app-loader'\nimport type { MetadataContext } from './types/resolvers'\nimport type { LoaderTree } from '../../server/lib/app-dir-module'\nimport type {\n  AbsoluteTemplateString,\n  IconDescriptor,\n  ResolvedIcons,\n} from './types/metadata-types'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { StaticMetadata } from './types/icons'\n\nimport {\n  createDefaultMetadata,\n  createDefaultViewport,\n} from './default-metadata'\nimport { resolveOpenGraph, resolveTwitter } from './resolvers/resolve-opengraph'\nimport { resolveTitle } from './resolvers/resolve-title'\nimport { resolveAsArrayOrUndefined } from './generate/utils'\nimport { isClientReference } from '../client-reference'\nimport {\n  getComponentTypeModule,\n  getLayoutOrPageModule,\n} from '../../server/lib/app-dir-module'\nimport { interopDefault } from '../interop-default'\nimport {\n  resolveAlternates,\n  resolveAppleWebApp,\n  resolveAppLinks,\n  resolveRobots,\n  resolveThemeColor,\n  resolveVerification,\n  resolveItunes,\n  resolveFacebook,\n} from './resolvers/resolve-basics'\nimport { resolveIcons } from './resolvers/resolve-icons'\nimport { getTracer } from '../../server/lib/trace/tracer'\nimport { ResolveMetadataSpan } from '../../server/lib/trace/constants'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport * as Log from '../../build/output/log'\nimport type { CreateDynamicallyTrackedParams } from '../../client/components/fallback-params'\n\ntype StaticIcons = Pick<ResolvedIcons, 'icon' | 'apple'>\n\ntype MetadataResolver = (\n  parent: ResolvingMetadata\n) => Metadata | Promise<Metadata>\ntype ViewportResolver = (\n  parent: ResolvingViewport\n) => Viewport | Promise<Viewport>\n\nexport type MetadataItems = [\n  Metadata | MetadataResolver | null,\n  StaticMetadata,\n  Viewport | ViewportResolver | null,\n][]\n\ntype TitleTemplates = {\n  title: string | null\n  twitter: string | null\n  openGraph: string | null\n}\n\ntype BuildState = {\n  warnings: Set<string>\n}\n\ntype LayoutProps = {\n  params: { [key: string]: any }\n}\ntype PageProps = {\n  params: { [key: string]: any }\n  searchParams: { [key: string]: any }\n}\n\nfunction isFavicon(icon: IconDescriptor | undefined): boolean {\n  if (!icon) {\n    return false\n  }\n\n  // turbopack appends a hash to all images\n  return (\n    (icon.url === '/favicon.ico' ||\n      icon.url.toString().startsWith('/favicon.ico?')) &&\n    icon.type === 'image/x-icon'\n  )\n}\n\nfunction mergeStaticMetadata(\n  source: Metadata | null,\n  target: ResolvedMetadata,\n  staticFilesMetadata: StaticMetadata,\n  metadataContext: MetadataContext,\n  titleTemplates: TitleTemplates,\n  leafSegmentStaticIcons: StaticIcons\n) {\n  if (!staticFilesMetadata) return\n  const { icon, apple, openGraph, twitter, manifest } = staticFilesMetadata\n\n  // Keep updating the static icons in the most leaf node\n\n  if (icon) {\n    leafSegmentStaticIcons.icon = icon\n  }\n  if (apple) {\n    leafSegmentStaticIcons.apple = apple\n  }\n\n  // file based metadata is specified and current level metadata twitter.images is not specified\n  if (twitter && !source?.twitter?.hasOwnProperty('images')) {\n    const resolvedTwitter = resolveTwitter(\n      { ...target.twitter, images: twitter } as Twitter,\n      target.metadataBase,\n      metadataContext,\n      titleTemplates.twitter\n    )\n    target.twitter = resolvedTwitter\n  }\n\n  // file based metadata is specified and current level metadata openGraph.images is not specified\n  if (openGraph && !source?.openGraph?.hasOwnProperty('images')) {\n    const resolvedOpenGraph = resolveOpenGraph(\n      { ...target.openGraph, images: openGraph } as OpenGraph,\n      target.metadataBase,\n      metadataContext,\n      titleTemplates.openGraph\n    )\n    target.openGraph = resolvedOpenGraph\n  }\n  if (manifest) {\n    target.manifest = manifest\n  }\n\n  return target\n}\n\n// Merge the source metadata into the resolved target metadata.\nfunction mergeMetadata({\n  source,\n  target,\n  staticFilesMetadata,\n  titleTemplates,\n  metadataContext,\n  buildState,\n  leafSegmentStaticIcons,\n}: {\n  source: Metadata | null\n  target: ResolvedMetadata\n  staticFilesMetadata: StaticMetadata\n  titleTemplates: TitleTemplates\n  metadataContext: MetadataContext\n  buildState: BuildState\n  leafSegmentStaticIcons: StaticIcons\n}): void {\n  // If there's override metadata, prefer it otherwise fallback to the default metadata.\n  const metadataBase =\n    typeof source?.metadataBase !== 'undefined'\n      ? source.metadataBase\n      : target.metadataBase\n  for (const key_ in source) {\n    const key = key_ as keyof Metadata\n\n    switch (key) {\n      case 'title': {\n        target.title = resolveTitle(source.title, titleTemplates.title)\n        break\n      }\n      case 'alternates': {\n        target.alternates = resolveAlternates(\n          source.alternates,\n          metadataBase,\n          metadataContext\n        )\n        break\n      }\n      case 'openGraph': {\n        target.openGraph = resolveOpenGraph(\n          source.openGraph,\n          metadataBase,\n          metadataContext,\n          titleTemplates.openGraph\n        )\n        break\n      }\n      case 'twitter': {\n        target.twitter = resolveTwitter(\n          source.twitter,\n          metadataBase,\n          metadataContext,\n          titleTemplates.twitter\n        )\n        break\n      }\n      case 'facebook':\n        target.facebook = resolveFacebook(source.facebook)\n        break\n\n      case 'verification':\n        target.verification = resolveVerification(source.verification)\n        break\n\n      case 'icons': {\n        target.icons = resolveIcons(source.icons)\n        break\n      }\n      case 'appleWebApp':\n        target.appleWebApp = resolveAppleWebApp(source.appleWebApp)\n        break\n      case 'appLinks':\n        target.appLinks = resolveAppLinks(source.appLinks)\n        break\n      case 'robots': {\n        target.robots = resolveRobots(source.robots)\n        break\n      }\n      case 'archives':\n      case 'assets':\n      case 'bookmarks':\n      case 'keywords': {\n        target[key] = resolveAsArrayOrUndefined(source[key])\n        break\n      }\n      case 'authors': {\n        target[key] = resolveAsArrayOrUndefined(source.authors)\n        break\n      }\n      case 'itunes': {\n        target[key] = resolveItunes(\n          source.itunes,\n          metadataBase,\n          metadataContext\n        )\n        break\n      }\n      // directly assign fields that fallback to null\n      case 'applicationName':\n      case 'description':\n      case 'generator':\n      case 'creator':\n      case 'publisher':\n      case 'category':\n      case 'classification':\n      case 'referrer':\n      case 'formatDetection':\n      case 'manifest':\n        // @ts-ignore TODO: support inferring\n        target[key] = source[key] || null\n        break\n      case 'other':\n        target.other = Object.assign({}, target.other, source.other)\n        break\n      case 'metadataBase':\n        target.metadataBase = metadataBase\n        break\n\n      default: {\n        if (\n          (key === 'viewport' ||\n            key === 'themeColor' ||\n            key === 'colorScheme') &&\n          source[key] != null\n        ) {\n          buildState.warnings.add(\n            `Unsupported metadata ${key} is configured in metadata export in ${metadataContext.pathname}. Please move it to viewport export instead.\\nRead more: https://nextjs.org/docs/app/api-reference/functions/generate-viewport`\n          )\n        }\n        break\n      }\n    }\n  }\n  mergeStaticMetadata(\n    source,\n    target,\n    staticFilesMetadata,\n    metadataContext,\n    titleTemplates,\n    leafSegmentStaticIcons\n  )\n}\n\nfunction mergeViewport({\n  target,\n  source,\n}: {\n  target: ResolvedViewport\n  source: Viewport | null\n}): void {\n  if (!source) return\n  for (const key_ in source) {\n    const key = key_ as keyof Viewport\n\n    switch (key) {\n      case 'themeColor': {\n        target.themeColor = resolveThemeColor(source.themeColor)\n        break\n      }\n      case 'colorScheme':\n        target.colorScheme = source.colorScheme || null\n        break\n      default:\n        if (typeof source[key] !== 'undefined') {\n          // @ts-ignore viewport properties\n          target[key] = source[key]\n        }\n        break\n    }\n  }\n}\n\nasync function getDefinedViewport(\n  mod: any,\n  props: any,\n  tracingProps: { route: string }\n): Promise<Viewport | ViewportResolver | null> {\n  if (isClientReference(mod)) {\n    return null\n  }\n  if (typeof mod.generateViewport === 'function') {\n    const { route } = tracingProps\n    return (parent: ResolvingViewport) =>\n      getTracer().trace(\n        ResolveMetadataSpan.generateViewport,\n        {\n          spanName: `generateViewport ${route}`,\n          attributes: {\n            'next.page': route,\n          },\n        },\n        () => mod.generateViewport(props, parent)\n      )\n  }\n  return mod.viewport || null\n}\n\nasync function getDefinedMetadata(\n  mod: any,\n  props: any,\n  tracingProps: { route: string }\n): Promise<Metadata | MetadataResolver | null> {\n  // Layer is a client component, we just skip it. It can't have metadata exported.\n  // Return early to avoid accessing properties error for client references.\n  if (isClientReference(mod)) {\n    return null\n  }\n  if (typeof mod.generateMetadata === 'function') {\n    const { route } = tracingProps\n    return (parent: ResolvingMetadata) =>\n      getTracer().trace(\n        ResolveMetadataSpan.generateMetadata,\n        {\n          spanName: `generateMetadata ${route}`,\n          attributes: {\n            'next.page': route,\n          },\n        },\n        () => mod.generateMetadata(props, parent)\n      )\n  }\n  return mod.metadata || null\n}\n\nasync function collectStaticImagesFiles(\n  metadata: ComponentsType['metadata'],\n  props: any,\n  type: keyof NonNullable<ComponentsType['metadata']>\n) {\n  if (!metadata?.[type]) return undefined\n\n  const iconPromises = metadata[type as 'icon' | 'apple'].map(\n    async (imageModule: (p: any) => Promise<MetadataImageModule[]>) =>\n      interopDefault(await imageModule(props))\n  )\n\n  return iconPromises?.length > 0\n    ? (await Promise.all(iconPromises))?.flat()\n    : undefined\n}\n\nasync function resolveStaticMetadata(\n  components: ComponentsType,\n  props: any\n): Promise<StaticMetadata> {\n  const { metadata } = components\n  if (!metadata) return null\n\n  const [icon, apple, openGraph, twitter] = await Promise.all([\n    collectStaticImagesFiles(metadata, props, 'icon'),\n    collectStaticImagesFiles(metadata, props, 'apple'),\n    collectStaticImagesFiles(metadata, props, 'openGraph'),\n    collectStaticImagesFiles(metadata, props, 'twitter'),\n  ])\n\n  const staticMetadata = {\n    icon,\n    apple,\n    openGraph,\n    twitter,\n    manifest: metadata.manifest,\n  }\n\n  return staticMetadata\n}\n\n// [layout.metadata, static files metadata] -> ... -> [page.metadata, static files metadata]\nexport async function collectMetadata({\n  tree,\n  metadataItems,\n  errorMetadataItem,\n  props,\n  route,\n  errorConvention,\n}: {\n  tree: LoaderTree\n  metadataItems: MetadataItems\n  errorMetadataItem: MetadataItems[number]\n  props: any\n  route: string\n  errorConvention?: 'not-found'\n}) {\n  let mod\n  let modType\n  const hasErrorConventionComponent = Boolean(\n    errorConvention && tree[2][errorConvention]\n  )\n  if (errorConvention) {\n    mod = await getComponentTypeModule(tree, 'layout')\n    modType = errorConvention\n  } else {\n    ;[mod, modType] = await getLayoutOrPageModule(tree)\n  }\n\n  if (modType) {\n    route += `/${modType}`\n  }\n\n  const staticFilesMetadata = await resolveStaticMetadata(tree[2], props)\n  const metadataExport = mod\n    ? await getDefinedMetadata(mod, props, { route })\n    : null\n\n  const viewportExport = mod\n    ? await getDefinedViewport(mod, props, { route })\n    : null\n\n  metadataItems.push([metadataExport, staticFilesMetadata, viewportExport])\n\n  if (hasErrorConventionComponent && errorConvention) {\n    const errorMod = await getComponentTypeModule(tree, errorConvention)\n    const errorViewportExport = errorMod\n      ? await getDefinedViewport(errorMod, props, { route })\n      : null\n    const errorMetadataExport = errorMod\n      ? await getDefinedMetadata(errorMod, props, { route })\n      : null\n\n    errorMetadataItem[0] = errorMetadataExport\n    errorMetadataItem[1] = staticFilesMetadata\n    errorMetadataItem[2] = errorViewportExport\n  }\n}\n\nexport async function resolveMetadataItems({\n  tree,\n  parentParams,\n  metadataItems,\n  errorMetadataItem,\n  treePrefix = [],\n  getDynamicParamFromSegment,\n  searchParams,\n  errorConvention,\n  createDynamicallyTrackedParams,\n}: {\n  tree: LoaderTree\n  parentParams: { [key: string]: any }\n  metadataItems: MetadataItems\n  errorMetadataItem: MetadataItems[number]\n  /** Provided tree can be nested subtree, this argument says what is the path of such subtree */\n  treePrefix?: string[]\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  searchParams: ParsedUrlQuery\n  errorConvention: 'not-found' | undefined\n  createDynamicallyTrackedParams: CreateDynamicallyTrackedParams\n}): Promise<MetadataItems> {\n  const [segment, parallelRoutes, { page }] = tree\n  const currentTreePrefix = [...treePrefix, segment]\n  const isPage = typeof page !== 'undefined'\n\n  // Handle dynamic segment params.\n  const segmentParam = getDynamicParamFromSegment(segment)\n  /**\n   * Create object holding the parent params and current params\n   */\n  const currentParams =\n    // Handle null case where dynamic param is optional\n    segmentParam && segmentParam.value !== null\n      ? {\n          ...parentParams,\n          [segmentParam.param]: segmentParam.value,\n        }\n      : // Pass through parent params to children\n        parentParams\n\n  const params = createDynamicallyTrackedParams(currentParams)\n\n  let layerProps: LayoutProps | PageProps\n  if (isPage) {\n    layerProps = {\n      params,\n      searchParams,\n    }\n  } else {\n    layerProps = {\n      params,\n    }\n  }\n\n  await collectMetadata({\n    tree,\n    metadataItems,\n    errorMetadataItem,\n    errorConvention,\n    props: layerProps,\n    route: currentTreePrefix\n      // __PAGE__ shouldn't be shown in a route\n      .filter((s) => s !== PAGE_SEGMENT_KEY)\n      .join('/'),\n  })\n\n  for (const key in parallelRoutes) {\n    const childTree = parallelRoutes[key]\n    await resolveMetadataItems({\n      tree: childTree,\n      metadataItems,\n      errorMetadataItem,\n      parentParams: currentParams,\n      treePrefix: currentTreePrefix,\n      searchParams,\n      getDynamicParamFromSegment,\n      errorConvention,\n      createDynamicallyTrackedParams,\n    })\n  }\n\n  if (Object.keys(parallelRoutes).length === 0 && errorConvention) {\n    // If there are no parallel routes, place error metadata as the last item.\n    // e.g. layout -> layout -> not-found\n    metadataItems.push(errorMetadataItem)\n  }\n\n  return metadataItems\n}\n\ntype WithTitle = { title?: AbsoluteTemplateString | null }\ntype WithDescription = { description?: string | null }\n\nconst isTitleTruthy = (title: AbsoluteTemplateString | null | undefined) =>\n  !!title?.absolute\nconst hasTitle = (metadata: WithTitle | null) => isTitleTruthy(metadata?.title)\n\nfunction inheritFromMetadata(\n  target: (WithTitle & WithDescription) | null,\n  metadata: ResolvedMetadata\n) {\n  if (target) {\n    if (!hasTitle(target) && hasTitle(metadata)) {\n      target.title = metadata.title\n    }\n    if (!target.description && metadata.description) {\n      target.description = metadata.description\n    }\n  }\n}\n\nconst commonOgKeys = ['title', 'description', 'images'] as const\nfunction postProcessMetadata(\n  metadata: ResolvedMetadata,\n  favicon: any,\n  titleTemplates: TitleTemplates,\n  metadataContext: MetadataContext\n): ResolvedMetadata {\n  const { openGraph, twitter } = metadata\n\n  if (openGraph) {\n    // If there's openGraph information but not configured in twitter,\n    // inherit them from openGraph metadata.\n    let autoFillProps: Partial<{\n      [Key in (typeof commonOgKeys)[number]]: NonNullable<\n        ResolvedMetadata['openGraph']\n      >[Key]\n    }> = {}\n    const hasTwTitle = hasTitle(twitter)\n    const hasTwDescription = twitter?.description\n    const hasTwImages = Boolean(\n      twitter?.hasOwnProperty('images') && twitter.images\n    )\n    if (!hasTwTitle) {\n      if (isTitleTruthy(openGraph.title)) {\n        autoFillProps.title = openGraph.title\n      } else if (metadata.title && isTitleTruthy(metadata.title)) {\n        autoFillProps.title = metadata.title\n      }\n    }\n    if (!hasTwDescription)\n      autoFillProps.description =\n        openGraph.description || metadata.description || undefined\n    if (!hasTwImages) autoFillProps.images = openGraph.images\n\n    if (Object.keys(autoFillProps).length > 0) {\n      const partialTwitter = resolveTwitter(\n        autoFillProps,\n        metadata.metadataBase,\n        metadataContext,\n        titleTemplates.twitter\n      )\n      if (metadata.twitter) {\n        metadata.twitter = Object.assign({}, metadata.twitter, {\n          ...(!hasTwTitle && { title: partialTwitter?.title }),\n          ...(!hasTwDescription && {\n            description: partialTwitter?.description,\n          }),\n          ...(!hasTwImages && { images: partialTwitter?.images }),\n        })\n      } else {\n        metadata.twitter = partialTwitter\n      }\n    }\n  }\n\n  // If there's no title and description configured in openGraph or twitter,\n  // use the title and description from metadata.\n  inheritFromMetadata(openGraph, metadata)\n  inheritFromMetadata(twitter, metadata)\n\n  if (favicon) {\n    if (!metadata.icons) {\n      metadata.icons = {\n        icon: [],\n        apple: [],\n      }\n    }\n\n    metadata.icons.icon.unshift(favicon)\n  }\n\n  return metadata\n}\n\ntype DataResolver<Data, ResolvedData> = (\n  parent: Promise<ResolvedData>\n) => Data | Promise<Data>\n\nfunction collectMetadataExportPreloading<Data, ResolvedData>(\n  results: (Data | Promise<Data>)[],\n  dynamicMetadataExportFn: DataResolver<Data, ResolvedData>,\n  resolvers: ((value: ResolvedData) => void)[]\n) {\n  const result = dynamicMetadataExportFn(\n    new Promise<any>((resolve) => {\n      resolvers.push(resolve)\n    })\n  )\n\n  if (result instanceof Promise) {\n    // since we eager execute generateMetadata and\n    // they can reject at anytime we need to ensure\n    // we attach the catch handler right away to\n    // prevent unhandled rejections crashing the process\n    result.catch((err) => {\n      return {\n        __nextError: err,\n      }\n    })\n  }\n  results.push(result)\n}\n\nasync function getMetadataFromExport<Data, ResolvedData>(\n  getPreloadMetadataExport: (\n    metadataItem: NonNullable<MetadataItems[number]>\n  ) => Data | DataResolver<Data, ResolvedData> | null,\n  dynamicMetadataResolveState: {\n    resolvers: ((value: ResolvedData) => void)[]\n    resolvingIndex: number\n  },\n  metadataItems: MetadataItems,\n  currentIndex: number,\n  resolvedMetadata: ResolvedData,\n  metadataResults: (Data | Promise<Data>)[]\n) {\n  const metadataExport = getPreloadMetadataExport(metadataItems[currentIndex])\n  const dynamicMetadataResolvers = dynamicMetadataResolveState.resolvers\n  let metadata: Data | null = null\n  if (typeof metadataExport === 'function') {\n    // Only preload at the beginning when resolves are empty\n    if (!dynamicMetadataResolvers.length) {\n      for (let j = currentIndex; j < metadataItems.length; j++) {\n        const preloadMetadataExport = getPreloadMetadataExport(metadataItems[j])\n        // call each `generateMetadata function concurrently and stash their resolver\n        if (typeof preloadMetadataExport === 'function') {\n          collectMetadataExportPreloading<Data, ResolvedData>(\n            metadataResults,\n            preloadMetadataExport as DataResolver<Data, ResolvedData>,\n            dynamicMetadataResolvers\n          )\n        }\n      }\n    }\n\n    const resolveParent =\n      dynamicMetadataResolvers[dynamicMetadataResolveState.resolvingIndex]\n    const metadataResult =\n      metadataResults[dynamicMetadataResolveState.resolvingIndex++]\n\n    // In dev we clone and freeze to prevent relying on mutating resolvedMetadata directly.\n    // In prod we just pass resolvedMetadata through without any copying.\n    const currentResolvedMetadata =\n      process.env.NODE_ENV === 'development'\n        ? Object.freeze(\n            require('./clone-metadata').cloneMetadata(resolvedMetadata)\n          )\n        : resolvedMetadata\n\n    // This resolve should unblock the generateMetadata function if it awaited the parent\n    // argument. If it didn't await the parent argument it might already have a value since it was\n    // called concurrently. Regardless we await the return value before continuing on to the next layer\n    resolveParent(currentResolvedMetadata)\n    metadata =\n      metadataResult instanceof Promise ? await metadataResult : metadataResult\n\n    if (metadata && typeof metadata === 'object' && '__nextError' in metadata) {\n      // re-throw caught metadata error from preloading\n      throw metadata['__nextError']\n    }\n  } else if (metadataExport !== null && typeof metadataExport === 'object') {\n    // This metadataExport is the object form\n    metadata = metadataExport\n  }\n\n  return metadata\n}\n\nexport async function accumulateMetadata(\n  metadataItems: MetadataItems,\n  metadataContext: MetadataContext\n): Promise<ResolvedMetadata> {\n  const resolvedMetadata = createDefaultMetadata()\n  const metadataResults: (Metadata | Promise<Metadata>)[] = []\n\n  let titleTemplates: TitleTemplates = {\n    title: null,\n    twitter: null,\n    openGraph: null,\n  }\n\n  // Loop over all metadata items again, merging synchronously any static object exports,\n  // awaiting any static promise exports, and resolving parent metadata and awaiting any generated metadata\n  const dynamicMetadataResolvers = {\n    resolvers: [],\n    resolvingIndex: 0,\n  }\n  const buildState = {\n    warnings: new Set<string>(),\n  }\n\n  let favicon\n\n  // Collect the static icons in the most leaf node,\n  // since we don't collect all the static metadata icons in the parent segments.\n  const leafSegmentStaticIcons = {\n    icon: [],\n    apple: [],\n  }\n  for (let i = 0; i < metadataItems.length; i++) {\n    const staticFilesMetadata = metadataItems[i][1]\n\n    // Treat favicon as special case, it should be the first icon in the list\n    // i <= 1 represents root layout, and if current page is also at root\n    if (i <= 1 && isFavicon(staticFilesMetadata?.icon?.[0])) {\n      const iconMod = staticFilesMetadata?.icon?.shift()\n      if (i === 0) favicon = iconMod\n    }\n\n    const metadata = await getMetadataFromExport<Metadata, ResolvedMetadata>(\n      (metadataItem) => metadataItem[0],\n      dynamicMetadataResolvers,\n      metadataItems,\n      i,\n      resolvedMetadata,\n      metadataResults\n    )\n\n    mergeMetadata({\n      target: resolvedMetadata,\n      source: metadata,\n      metadataContext,\n      staticFilesMetadata,\n      titleTemplates,\n      buildState,\n      leafSegmentStaticIcons,\n    })\n\n    // If the layout is the same layer with page, skip the leaf layout and leaf page\n    // The leaf layout and page are the last two items\n    if (i < metadataItems.length - 2) {\n      titleTemplates = {\n        title: resolvedMetadata.title?.template || null,\n        openGraph: resolvedMetadata.openGraph?.title.template || null,\n        twitter: resolvedMetadata.twitter?.title.template || null,\n      }\n    }\n  }\n\n  if (\n    leafSegmentStaticIcons.icon.length > 0 ||\n    leafSegmentStaticIcons.apple.length > 0\n  ) {\n    if (!resolvedMetadata.icons) {\n      resolvedMetadata.icons = {\n        icon: [],\n        apple: [],\n      }\n      if (leafSegmentStaticIcons.icon.length > 0) {\n        resolvedMetadata.icons.icon.unshift(...leafSegmentStaticIcons.icon)\n      }\n      if (leafSegmentStaticIcons.apple.length > 0) {\n        resolvedMetadata.icons.apple.unshift(...leafSegmentStaticIcons.apple)\n      }\n    }\n  }\n\n  // Only log warnings if there are any, and only once after the metadata resolving process is finished\n  if (buildState.warnings.size > 0) {\n    for (const warning of buildState.warnings) {\n      Log.warn(warning)\n    }\n  }\n\n  return postProcessMetadata(\n    resolvedMetadata,\n    favicon,\n    titleTemplates,\n    metadataContext\n  )\n}\n\nexport async function accumulateViewport(\n  metadataItems: MetadataItems\n): Promise<ResolvedViewport> {\n  const resolvedViewport: ResolvedViewport = createDefaultViewport()\n\n  const viewportResults: (Viewport | Promise<Viewport>)[] = []\n  const dynamicMetadataResolvers = {\n    resolvers: [],\n    resolvingIndex: 0,\n  }\n  for (let i = 0; i < metadataItems.length; i++) {\n    const viewport = await getMetadataFromExport<Viewport, ResolvedViewport>(\n      (metadataItem) => metadataItem[2],\n      dynamicMetadataResolvers,\n      metadataItems,\n      i,\n      resolvedViewport,\n      viewportResults\n    )\n\n    mergeViewport({\n      target: resolvedViewport,\n      source: viewport,\n    })\n  }\n  return resolvedViewport\n}\n\nexport async function resolveMetadata({\n  tree,\n  parentParams,\n  metadataItems,\n  errorMetadataItem,\n  getDynamicParamFromSegment,\n  searchParams,\n  errorConvention,\n  metadataContext,\n  createDynamicallyTrackedParams,\n}: {\n  tree: LoaderTree\n  parentParams: { [key: string]: any }\n  metadataItems: MetadataItems\n  errorMetadataItem: MetadataItems[number]\n  /** Provided tree can be nested subtree, this argument says what is the path of such subtree */\n  treePrefix?: string[]\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  searchParams: { [key: string]: any }\n  errorConvention: 'not-found' | undefined\n  metadataContext: MetadataContext\n  createDynamicallyTrackedParams: CreateDynamicallyTrackedParams\n}): Promise<[any, ResolvedMetadata, ResolvedViewport]> {\n  const resolvedMetadataItems = await resolveMetadataItems({\n    tree,\n    parentParams,\n    metadataItems,\n    errorMetadataItem,\n    getDynamicParamFromSegment,\n    searchParams,\n    errorConvention,\n    createDynamicallyTrackedParams,\n  })\n  let error\n  let metadata: ResolvedMetadata = createDefaultMetadata()\n  let viewport: ResolvedViewport = createDefaultViewport()\n  try {\n    viewport = await accumulateViewport(resolvedMetadataItems)\n    metadata = await accumulateMetadata(resolvedMetadataItems, metadataContext)\n  } catch (err: any) {\n    error = err\n  }\n  return [error, metadata, viewport]\n}\n"],"names":["accumulateMetadata","accumulateViewport","collectMetadata","resolveMetadata","resolveMetadataItems","isFavicon","icon","url","toString","startsWith","type","mergeStaticMetadata","source","target","staticFilesMetadata","metadataContext","titleTemplates","leafSegmentStaticIcons","apple","openGraph","twitter","manifest","hasOwnProperty","resolvedTwitter","resolveTwitter","images","metadataBase","resolvedOpenGraph","resolveOpenGraph","mergeMetadata","buildState","key_","key","title","resolveTitle","alternates","resolveAlternates","facebook","resolveFacebook","verification","resolveVerification","icons","resolveIcons","appleWebApp","resolveAppleWebApp","appLinks","resolveAppLinks","robots","resolveRobots","resolveAsArrayOrUndefined","authors","resolveItunes","itunes","other","Object","assign","warnings","add","pathname","mergeViewport","themeColor","resolveThemeColor","colorScheme","getDefinedViewport","mod","props","tracingProps","isClientReference","generateViewport","route","parent","getTracer","trace","ResolveMetadataSpan","spanName","attributes","viewport","getDefinedMetadata","generateMetadata","metadata","collectStaticImagesFiles","undefined","iconPromises","map","imageModule","interopDefault","length","Promise","all","flat","resolveStaticMetadata","components","staticMetadata","tree","metadataItems","errorMetadataItem","errorConvention","modType","hasErrorConventionComponent","Boolean","getComponentTypeModule","getLayoutOrPageModule","metadataExport","viewportExport","push","errorMod","errorViewportExport","errorMetadataExport","parentParams","treePrefix","getDynamicParamFromSegment","searchParams","createDynamicallyTrackedParams","segment","parallelRoutes","page","currentTreePrefix","isPage","segmentParam","currentParams","value","param","params","layerProps","filter","s","PAGE_SEGMENT_KEY","join","childTree","keys","isTitleTruthy","absolute","hasTitle","inheritFromMetadata","description","commonOgKeys","postProcessMetadata","favicon","autoFillProps","hasTwTitle","hasTwDescription","hasTwImages","partialTwitter","unshift","collectMetadataExportPreloading","results","dynamicMetadataExportFn","resolvers","result","resolve","catch","err","__nextError","getMetadataFromExport","getPreloadMetadataExport","dynamicMetadataResolveState","currentIndex","resolvedMetadata","metadataResults","dynamicMetadataResolvers","j","preloadMetadataExport","resolveParent","resolvingIndex","metadataResult","currentResolvedMetadata","process","env","NODE_ENV","freeze","require","cloneMetadata","createDefaultMetadata","Set","i","iconMod","shift","metadataItem","template","size","warning","Log","warn","resolvedViewport","createDefaultViewport","viewportResults","resolvedMetadataItems","error"],"mappings":"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"}