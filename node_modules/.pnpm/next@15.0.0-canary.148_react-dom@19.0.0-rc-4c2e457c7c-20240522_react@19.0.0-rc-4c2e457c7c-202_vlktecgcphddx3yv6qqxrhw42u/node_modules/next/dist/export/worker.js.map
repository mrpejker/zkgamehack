{"version":3,"sources":["../../src/export/worker.ts"],"sourcesContent":["import type {\n  ExportPagesInput,\n  ExportPageInput,\n  ExportPageResult,\n  ExportRouteResult,\n  ExportedPageFile,\n  FileWriter,\n  WorkerRenderOpts,\n  ExportPagesResult,\n} from './types'\n\nimport '../server/node-environment'\n\nprocess.env.NEXT_IS_EXPORT_WORKER = 'true'\n\nimport { extname, join, dirname, sep } from 'path'\nimport fs from 'fs/promises'\nimport { loadComponents } from '../server/load-components'\nimport { isDynamicRoute } from '../shared/lib/router/utils/is-dynamic'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport { trace } from '../trace'\nimport { setHttpClientAndAgentOptions } from '../server/setup-http-agent-env'\nimport isError from '../lib/is-error'\nimport { addRequestMeta } from '../server/request-meta'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\n\nimport { createRequestResponseMocks } from '../server/lib/mock-request'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { hasNextSupport } from '../telemetry/ci-info'\nimport { exportAppRoute } from './routes/app-route'\nimport { exportAppPage } from './routes/app-page'\nimport { exportPagesPage } from './routes/pages'\nimport { getParams } from './helpers/get-params'\nimport { createIncrementalCache } from './helpers/create-incremental-cache'\nimport { isPostpone } from '../server/lib/router-utils/is-postpone'\nimport { isDynamicUsageError } from './helpers/is-dynamic-usage-error'\nimport { isBailoutToCSRError } from '../shared/lib/lazy-dynamic/bailout-to-csr'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n} from '../build/turborepo-access-trace'\nimport type { Params } from '../client/components/params'\nimport {\n  getFallbackRouteParams,\n  type FallbackRouteParams,\n} from '../client/components/fallback-params'\nimport { needsExperimentalReact } from '../lib/needs-experimental-react'\n\nconst envConfig = require('../shared/lib/runtime-config.external')\n\n;(globalThis as any).__NEXT_DATA__ = {\n  nextExport: true,\n}\n\nclass TimeoutError extends Error {\n  code = 'NEXT_EXPORT_TIMEOUT_ERROR'\n}\n\nclass ExportPageError extends Error {\n  code = 'NEXT_EXPORT_PAGE_ERROR'\n}\n\nasync function exportPageImpl(\n  input: ExportPageInput,\n  fileWriter: FileWriter\n): Promise<ExportRouteResult | undefined> {\n  const {\n    path,\n    pathMap,\n    distDir,\n    pagesDataDir,\n    buildExport = false,\n    serverRuntimeConfig,\n    subFolders = false,\n    optimizeCss,\n    disableOptimizedLoading,\n    debugOutput = false,\n    enableExperimentalReact,\n    ampValidatorPath,\n    trailingSlash,\n  } = input\n\n  if (enableExperimentalReact) {\n    process.env.__NEXT_EXPERIMENTAL_REACT = 'true'\n  }\n\n  const {\n    page,\n\n    // The parameters that are currently unknown.\n    _fallbackRouteParams = [],\n\n    // Check if this is an `app/` page.\n    _isAppDir: isAppDir = false,\n\n    // Check if this should error when dynamic usage is detected.\n    _isDynamicError: isDynamicError = false,\n\n    // If this page supports partial prerendering, then we need to pass that to\n    // the renderOpts.\n    _isRoutePPREnabled: isRoutePPREnabled,\n\n    // Pull the original query out.\n    query: originalQuery = {},\n  } = pathMap\n\n  try {\n    const fallbackRouteParams: FallbackRouteParams | null =\n      getFallbackRouteParams(_fallbackRouteParams)\n\n    let query = { ...originalQuery }\n    const pathname = normalizeAppPath(page)\n    const isDynamic = isDynamicRoute(page)\n    const outDir = isAppDir ? join(distDir, 'server/app') : input.outDir\n\n    const filePath = normalizePagePath(path)\n    const ampPath = `${filePath}.amp`\n    let renderAmpPath = ampPath\n\n    let updatedPath = query.__nextSsgPath || path\n    delete query.__nextSsgPath\n\n    let locale = query.__nextLocale || input.renderOpts.locale\n    delete query.__nextLocale\n\n    if (input.renderOpts.locale) {\n      const localePathResult = normalizeLocalePath(\n        path,\n        input.renderOpts.locales\n      )\n\n      if (localePathResult.detectedLocale) {\n        updatedPath = localePathResult.pathname\n        locale = localePathResult.detectedLocale\n\n        if (locale === input.renderOpts.defaultLocale) {\n          renderAmpPath = `${normalizePagePath(updatedPath)}.amp`\n        }\n      }\n    }\n\n    // We need to show a warning if they try to provide query values\n    // for an auto-exported page since they won't be available\n    const hasOrigQueryValues = Object.keys(originalQuery).length > 0\n\n    // Check if the page is a specified dynamic route\n    const { pathname: nonLocalizedPath } = normalizeLocalePath(\n      path,\n      input.renderOpts.locales\n    )\n\n    let params: Params | undefined\n\n    if (isDynamic && page !== nonLocalizedPath) {\n      const normalizedPage = isAppDir ? normalizeAppPath(page) : page\n\n      params = getParams(normalizedPage, updatedPath)\n      if (params) {\n        query = {\n          ...query,\n          ...params,\n        }\n      }\n    }\n\n    const { req, res } = createRequestResponseMocks({ url: updatedPath })\n\n    // If this is a status code page, then set the response code.\n    for (const statusCode of [404, 500]) {\n      if (\n        [\n          `/${statusCode}`,\n          `/${statusCode}.html`,\n          `/${statusCode}/index.html`,\n        ].some((p) => p === updatedPath || `/${locale}${p}` === updatedPath)\n      ) {\n        res.statusCode = statusCode\n      }\n    }\n\n    // Ensure that the URL has a trailing slash if it's configured.\n    if (trailingSlash && !req.url?.endsWith('/')) {\n      req.url += '/'\n    }\n\n    if (\n      locale &&\n      buildExport &&\n      input.renderOpts.domainLocales &&\n      input.renderOpts.domainLocales.some(\n        (dl) =>\n          dl.defaultLocale === locale || dl.locales?.includes(locale || '')\n      )\n    ) {\n      addRequestMeta(req, 'isLocaleDomain', true)\n    }\n\n    envConfig.setConfig({\n      serverRuntimeConfig,\n      publicRuntimeConfig: input.renderOpts.runtimeConfig,\n    })\n\n    const getHtmlFilename = (p: string) =>\n      subFolders ? `${p}${sep}index.html` : `${p}.html`\n\n    let htmlFilename = getHtmlFilename(filePath)\n\n    // dynamic routes can provide invalid extensions e.g. /blog/[...slug] returns an\n    // extension of `.slug]`\n    const pageExt = isDynamic || isAppDir ? '' : extname(page)\n    const pathExt = isDynamic || isAppDir ? '' : extname(path)\n\n    // force output 404.html for backwards compat\n    if (path === '/404.html') {\n      htmlFilename = path\n    }\n    // Make sure page isn't a folder with a dot in the name e.g. `v1.2`\n    else if (pageExt !== pathExt && pathExt !== '') {\n      const isBuiltinPaths = ['/500', '/404'].some(\n        (p) => p === path || p === path + '.html'\n      )\n      // If the ssg path has .html extension, and it's not builtin paths, use it directly\n      // Otherwise, use that as the filename instead\n      const isHtmlExtPath = !isBuiltinPaths && path.endsWith('.html')\n      htmlFilename = isHtmlExtPath ? getHtmlFilename(path) : path\n    } else if (path === '/') {\n      // If the path is the root, just use index.html\n      htmlFilename = 'index.html'\n    }\n\n    const baseDir = join(outDir, dirname(htmlFilename))\n    let htmlFilepath = join(outDir, htmlFilename)\n\n    await fs.mkdir(baseDir, { recursive: true })\n\n    // Handle App Routes.\n    if (isAppDir && isAppRouteRoute(page)) {\n      return await exportAppRoute(\n        req,\n        res,\n        params,\n        page,\n        input.renderOpts.incrementalCache,\n        distDir,\n        htmlFilepath,\n        fileWriter,\n        input.renderOpts.experimental\n      )\n    }\n\n    const components = await loadComponents({\n      distDir,\n      page,\n      isAppPath: isAppDir,\n    })\n\n    const renderOpts: WorkerRenderOpts = {\n      ...components,\n      ...input.renderOpts,\n      ampPath: renderAmpPath,\n      params,\n      optimizeCss,\n      disableOptimizedLoading,\n      locale,\n      supportsDynamicResponse: false,\n      experimental: {\n        ...input.renderOpts.experimental,\n        isRoutePPREnabled,\n      },\n      waitUntil: undefined,\n      onClose: undefined,\n    }\n\n    if (hasNextSupport) {\n      renderOpts.isRevalidate = true\n    }\n\n    // Handle App Pages\n    if (isAppDir) {\n      return await exportAppPage(\n        req,\n        res,\n        page,\n        path,\n        pathname,\n        query,\n        fallbackRouteParams,\n        renderOpts,\n        htmlFilepath,\n        debugOutput,\n        isDynamicError,\n        fileWriter\n      )\n    }\n\n    return await exportPagesPage(\n      req,\n      res,\n      path,\n      page,\n      query,\n      htmlFilepath,\n      htmlFilename,\n      ampPath,\n      subFolders,\n      outDir,\n      ampValidatorPath,\n      pagesDataDir,\n      buildExport,\n      isDynamic,\n      hasOrigQueryValues,\n      renderOpts,\n      components,\n      fileWriter\n    )\n  } catch (err) {\n    console.error(\n      `\\nError occurred prerendering page \"${path}\". Read more: https://nextjs.org/docs/messages/prerender-error\\n`\n    )\n    if (!isBailoutToCSRError(err)) {\n      console.error(isError(err) && err.stack ? err.stack : err)\n    }\n\n    return { error: true }\n  }\n}\n\nexport async function exportPages(\n  input: ExportPagesInput\n): Promise<ExportPagesResult> {\n  const {\n    exportPathMap,\n    paths,\n    dir,\n    distDir,\n    outDir,\n    cacheHandler,\n    cacheMaxMemorySize,\n    fetchCacheKeyPrefix,\n    pagesDataDir,\n    renderOpts,\n    nextConfig,\n    options,\n  } = input\n\n  // If the fetch cache was enabled, we need to create an incremental\n  // cache instance for this page.\n  const incrementalCache = await createIncrementalCache({\n    cacheHandler,\n    cacheMaxMemorySize,\n    fetchCacheKeyPrefix,\n    distDir,\n    dir,\n    // skip writing to disk in minimal mode for now, pending some\n    // changes to better support it\n    flushToDisk: !hasNextSupport,\n  })\n\n  renderOpts.incrementalCache = incrementalCache\n\n  const maxConcurrency =\n    nextConfig.experimental.staticGenerationMaxConcurrency ?? 8\n  const results: ExportPagesResult = []\n\n  const exportPageWithRetry = async (path: string, maxAttempts: number) => {\n    const pathMap = exportPathMap[path]\n    const { page } = exportPathMap[path]\n    const pageKey = page !== path ? `${page}: ${path}` : path\n    let attempt = 0\n    let result\n\n    while (attempt < maxAttempts) {\n      try {\n        result = await Promise.race<ExportPageResult | undefined>([\n          exportPage({\n            path,\n            pathMap,\n            distDir,\n            outDir,\n            pagesDataDir,\n            renderOpts,\n            ampValidatorPath:\n              nextConfig.experimental.amp?.validator || undefined,\n            trailingSlash: nextConfig.trailingSlash,\n            serverRuntimeConfig: nextConfig.serverRuntimeConfig,\n            subFolders: nextConfig.trailingSlash && !options.buildExport,\n            buildExport: options.buildExport,\n            optimizeCss: nextConfig.experimental.optimizeCss,\n            disableOptimizedLoading:\n              nextConfig.experimental.disableOptimizedLoading,\n            parentSpanId: input.parentSpanId,\n            httpAgentOptions: nextConfig.httpAgentOptions,\n            debugOutput: options.debugOutput,\n            enableExperimentalReact: needsExperimentalReact(nextConfig),\n          }),\n          // If exporting the page takes longer than the timeout, reject the promise.\n          new Promise((_, reject) => {\n            setTimeout(() => {\n              reject(new TimeoutError())\n            }, nextConfig.staticPageGenerationTimeout * 1000)\n          }),\n        ])\n\n        // If there was an error in the export, throw it immediately. In the catch block, we might retry the export,\n        // or immediately fail the build, depending on user configuration. We might also continue on and attempt other pages.\n        if (result && 'error' in result) {\n          throw new ExportPageError()\n        }\n\n        // If the export succeeds, break out of the retry loop\n        break\n      } catch (err) {\n        // The only error that should be caught here is an ExportError, as `exportPage` doesn't throw and instead returns an object with an `error` property.\n        // This is an overly cautious check to ensure that we don't accidentally catch an unexpected error.\n        if (!(err instanceof ExportPageError || err instanceof TimeoutError)) {\n          throw err\n        }\n\n        if (err instanceof TimeoutError) {\n          // If the export times out, we will restart the worker up to 3 times.\n          maxAttempts = 3\n        }\n\n        // We've reached the maximum number of attempts\n        if (attempt >= maxAttempts - 1) {\n          // Log a message if we've reached the maximum number of attempts.\n          // We only care to do this if maxAttempts was configured.\n          if (maxAttempts > 0) {\n            console.info(\n              `Failed to build ${pageKey} after ${maxAttempts} attempts.`\n            )\n          }\n          // If prerenderEarlyExit is enabled, we'll exit the build immediately.\n          if (nextConfig.experimental.prerenderEarlyExit) {\n            throw new ExportPageError(\n              `Export encountered an error on ${pageKey}, exiting the build.`\n            )\n          } else {\n            // Otherwise, this is a no-op. The build will continue, and a summary of failed pages will be displayed at the end.\n          }\n        } else {\n          // Otherwise, we have more attempts to make. Wait before retrying\n          if (err instanceof TimeoutError) {\n            console.info(\n              `Failed to build ${pageKey} (attempt ${attempt + 1} of ${maxAttempts}) because it took more than ${nextConfig.staticPageGenerationTimeout} seconds. Retrying again shortly.`\n            )\n          } else {\n            console.info(\n              `Failed to build ${pageKey} (attempt ${attempt + 1} of ${maxAttempts}). Retrying again shortly.`\n            )\n          }\n          await new Promise((r) => setTimeout(r, Math.random() * 500))\n        }\n      }\n\n      attempt++\n    }\n\n    return { result, path, pageKey }\n  }\n\n  for (let i = 0; i < paths.length; i += maxConcurrency) {\n    const subset = paths.slice(i, i + maxConcurrency)\n\n    const subsetResults = await Promise.all(\n      subset.map((path) =>\n        exportPageWithRetry(\n          path,\n          nextConfig.experimental.staticGenerationRetryCount ?? 1\n        )\n      )\n    )\n\n    results.push(...subsetResults)\n  }\n\n  return results\n}\n\nasync function exportPage(\n  input: ExportPageInput\n): Promise<ExportPageResult | undefined> {\n  trace('export-page', input.parentSpanId).setAttribute('path', input.path)\n\n  // Configure the http agent.\n  setHttpClientAndAgentOptions({\n    httpAgentOptions: input.httpAgentOptions,\n  })\n\n  const files: ExportedPageFile[] = []\n  const baseFileWriter: FileWriter = async (\n    type,\n    path,\n    content,\n    encodingOptions = 'utf-8'\n  ) => {\n    await fs.mkdir(dirname(path), { recursive: true })\n    await fs.writeFile(path, content, encodingOptions)\n    files.push({ type, path })\n  }\n\n  const exportPageSpan = trace('export-page-worker', input.parentSpanId)\n\n  const start = Date.now()\n\n  const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n  // Export the page.\n  const result = await exportPageSpan.traceAsyncFn(() =>\n    turborepoTraceAccess(\n      () => exportPageImpl(input, baseFileWriter),\n      turborepoAccessTraceResult\n    )\n  )\n\n  // If there was no result, then we can exit early.\n  if (!result) return\n\n  // If there was an error, then we can exit early.\n  if ('error' in result) {\n    return { error: result.error, duration: Date.now() - start, files: [] }\n  }\n\n  // Notify the parent process that we processed a page (used by the progress activity indicator)\n  process.send?.([3, { type: 'activity' }])\n\n  // Otherwise we can return the result.\n  return {\n    duration: Date.now() - start,\n    files,\n    ampValidations: result.ampValidations,\n    revalidate: result.revalidate,\n    metadata: result.metadata,\n    ssgNotFound: result.ssgNotFound,\n    hasEmptyPrelude: result.hasEmptyPrelude,\n    hasPostponed: result.hasPostponed,\n    turborepoAccessTraceResult: turborepoAccessTraceResult.serialize(),\n    fetchMetrics: result.fetchMetrics,\n  }\n}\n\nprocess.on('unhandledRejection', (err: unknown) => {\n  // if it's a postpone error, it'll be handled later\n  // when the postponed promise is actually awaited.\n  if (isPostpone(err)) {\n    return\n  }\n\n  // we don't want to log these errors\n  if (isDynamicUsageError(err)) {\n    return\n  }\n\n  console.error(err)\n})\n\nprocess.on('rejectionHandled', () => {\n  // It is ok to await a Promise late in Next.js as it allows for better\n  // prefetching patterns to avoid waterfalls. We ignore logging these.\n  // We should've already errored in anyway unhandledRejection.\n})\n\nconst FATAL_UNHANDLED_NEXT_API_EXIT_CODE = 78\n\nprocess.on('uncaughtException', (err) => {\n  if (isDynamicUsageError(err)) {\n    console.error(\n      'A Next.js API that uses exceptions to signal framework behavior was uncaught. This suggests improper usage of a Next.js API. The original error is printed below and the build will now exit.'\n    )\n    console.error(err)\n    process.exit(FATAL_UNHANDLED_NEXT_API_EXIT_CODE)\n  } else {\n    console.error(err)\n  }\n})\n"],"names":["exportPages","process","env","NEXT_IS_EXPORT_WORKER","envConfig","require","globalThis","__NEXT_DATA__","nextExport","TimeoutError","Error","code","ExportPageError","exportPageImpl","input","fileWriter","path","pathMap","distDir","pagesDataDir","buildExport","serverRuntimeConfig","subFolders","optimizeCss","disableOptimizedLoading","debugOutput","enableExperimentalReact","ampValidatorPath","trailingSlash","__NEXT_EXPERIMENTAL_REACT","page","_fallbackRouteParams","_isAppDir","isAppDir","_isDynamicError","isDynamicError","_isRoutePPREnabled","isRoutePPREnabled","query","originalQuery","req","fallbackRouteParams","getFallbackRouteParams","pathname","normalizeAppPath","isDynamic","isDynamicRoute","outDir","join","filePath","normalizePagePath","ampPath","renderAmpPath","updatedPath","__nextSsgPath","locale","__nextLocale","renderOpts","localePathResult","normalizeLocalePath","locales","detectedLocale","defaultLocale","hasOrigQueryValues","Object","keys","length","nonLocalizedPath","params","normalizedPage","getParams","res","createRequestResponseMocks","url","statusCode","some","p","endsWith","domainLocales","dl","includes","addRequestMeta","setConfig","publicRuntimeConfig","runtimeConfig","getHtmlFilename","sep","htmlFilename","pageExt","extname","pathExt","isBuiltinPaths","isHtmlExtPath","baseDir","dirname","htmlFilepath","fs","mkdir","recursive","isAppRouteRoute","exportAppRoute","incrementalCache","experimental","components","loadComponents","isAppPath","supportsDynamicResponse","waitUntil","undefined","onClose","hasNextSupport","isRevalidate","exportAppPage","exportPagesPage","err","console","error","isBailoutToCSRError","isError","stack","exportPathMap","paths","dir","cacheHandler","cacheMaxMemorySize","fetchCacheKeyPrefix","nextConfig","options","createIncrementalCache","flushToDisk","maxConcurrency","staticGenerationMaxConcurrency","results","exportPageWithRetry","maxAttempts","pageKey","attempt","result","Promise","race","exportPage","amp","validator","parentSpanId","httpAgentOptions","needsExperimentalReact","_","reject","setTimeout","staticPageGenerationTimeout","info","prerenderEarlyExit","r","Math","random","i","subset","slice","subsetResults","all","map","staticGenerationRetryCount","push","trace","setAttribute","setHttpClientAndAgentOptions","files","baseFileWriter","type","content","encodingOptions","writeFile","exportPageSpan","start","Date","now","turborepoAccessTraceResult","TurborepoAccessTraceResult","traceAsyncFn","turborepoTraceAccess","duration","send","ampValidations","revalidate","metadata","ssgNotFound","hasEmptyPrelude","hasPostponed","serialize","fetchMetrics","on","isPostpone","isDynamicUsageError","FATAL_UNHANDLED_NEXT_API_EXIT_CODE","exit"],"mappings":"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"}