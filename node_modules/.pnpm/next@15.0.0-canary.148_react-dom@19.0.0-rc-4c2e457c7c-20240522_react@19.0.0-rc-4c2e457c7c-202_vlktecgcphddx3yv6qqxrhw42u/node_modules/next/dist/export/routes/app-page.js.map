{"version":3,"sources":["../../../src/export/routes/app-page.ts"],"sourcesContent":["import type { OutgoingHttpHeaders } from 'node:http'\nimport type { ExportRouteResult, FileWriter } from '../types'\nimport type { RenderOpts } from '../../server/app-render/types'\nimport type { NextParsedUrlQuery } from '../../server/request-meta'\nimport type { RouteMetadata } from './types'\n\nimport type {\n  MockedRequest,\n  MockedResponse,\n} from '../../server/lib/mock-request'\nimport { isDynamicUsageError } from '../helpers/is-dynamic-usage-error'\nimport {\n  NEXT_CACHE_TAGS_HEADER,\n  NEXT_META_SUFFIX,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n} from '../../lib/constants'\nimport { hasNextSupport } from '../../telemetry/ci-info'\nimport { lazyRenderAppPage } from '../../server/route-modules/app-page/module.render'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { NodeNextRequest, NodeNextResponse } from '../../server/base-http/node'\nimport { NEXT_IS_PRERENDER_HEADER } from '../../client/components/app-router-headers'\nimport type { FetchMetrics } from '../../server/base-http'\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\nimport type { FallbackRouteParams } from '../../client/components/fallback-params'\n\nexport const enum ExportedAppPageFiles {\n  HTML = 'HTML',\n  FLIGHT = 'FLIGHT',\n  PREFETCH_FLIGHT = 'PREFETCH_FLIGHT',\n  META = 'META',\n  POSTPONED = 'POSTPONED',\n}\n\n/**\n * Renders & exports a page associated with the /app directory\n */\nexport async function exportAppPage(\n  req: MockedRequest,\n  res: MockedResponse,\n  page: string,\n  path: string,\n  pathname: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  htmlFilepath: string,\n  debugOutput: boolean,\n  isDynamicError: boolean,\n  fileWriter: FileWriter\n): Promise<ExportRouteResult> {\n  let isDefaultNotFound = false\n  // If the page is `/_not-found`, then we should update the page to be `/404`.\n  // UNDERSCORE_NOT_FOUND_ROUTE value used here, however we don't want to import it here as it causes constants to be inlined which we don't want here.\n  if (page === '/_not-found/page') {\n    isDefaultNotFound = true\n    pathname = '/404'\n  }\n\n  try {\n    const result = await lazyRenderAppPage(\n      new NodeNextRequest(req),\n      new NodeNextResponse(res),\n      pathname,\n      query,\n      fallbackRouteParams,\n      renderOpts\n    )\n\n    const html = result.toUnchunkedString()\n\n    const { metadata } = result\n    const {\n      flightData,\n      revalidate = false,\n      postponed,\n      fetchTags,\n      fetchMetrics,\n    } = metadata\n\n    // Ensure we don't postpone without having PPR enabled.\n    if (postponed && !renderOpts.experimental.isRoutePPREnabled) {\n      throw new Error('Invariant: page postponed without PPR being enabled')\n    }\n\n    if (revalidate === 0) {\n      if (isDynamicError) {\n        throw new Error(\n          `Page with dynamic = \"error\" encountered dynamic data method on ${path}.`\n        )\n      }\n      const { staticBailoutInfo = {} } = metadata\n\n      if (revalidate === 0 && debugOutput && staticBailoutInfo?.description) {\n        logDynamicUsageWarning({\n          path,\n          description: staticBailoutInfo.description,\n          stack: staticBailoutInfo.stack,\n        })\n      }\n\n      return { revalidate: 0, fetchMetrics }\n    }\n\n    // If page data isn't available, it means that the page couldn't be rendered\n    // properly so long as we don't have unknown route params. When a route doesn't\n    // have unknown route params, there will not be any flight data.\n    if (\n      !flightData &&\n      (!fallbackRouteParams || fallbackRouteParams.size === 0)\n    ) {\n      throw new Error(`Invariant: failed to get page data for ${path}`)\n    }\n\n    if (flightData) {\n      // If PPR is enabled, we want to emit a prefetch rsc file for the page\n      // instead of the standard rsc. This is because the standard rsc will\n      // contain the dynamic data. We do this if any routes have PPR enabled so\n      // that the cache read/write is the same.\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        // If PPR is enabled, we should emit the flight data as the prefetch\n        // payload.\n        await fileWriter(\n          ExportedAppPageFiles.PREFETCH_FLIGHT,\n          htmlFilepath.replace(/\\.html$/, RSC_PREFETCH_SUFFIX),\n          flightData\n        )\n      } else {\n        // Writing the RSC payload to a file if we don't have PPR enabled.\n        await fileWriter(\n          ExportedAppPageFiles.FLIGHT,\n          htmlFilepath.replace(/\\.html$/, RSC_SUFFIX),\n          flightData\n        )\n      }\n    }\n\n    const headers: OutgoingHttpHeaders = { ...metadata.headers }\n\n    // If we're writing the file to disk, we know it's a prerender.\n    headers[NEXT_IS_PRERENDER_HEADER] = '1'\n\n    if (fetchTags) {\n      headers[NEXT_CACHE_TAGS_HEADER] = fetchTags\n    }\n\n    // Writing static HTML to a file.\n    await fileWriter(\n      ExportedAppPageFiles.HTML,\n      htmlFilepath,\n      html ?? '',\n      'utf8'\n    )\n\n    const isParallelRoute = /\\/@\\w+/.test(page)\n    const isNonSuccessfulStatusCode = res.statusCode > 300\n\n    // When PPR is enabled, we don't always send 200 for routes that have been\n    // pregenerated, so we should grab the status code from the mocked\n    // response.\n    let status: number | undefined = renderOpts.experimental.isRoutePPREnabled\n      ? res.statusCode\n      : undefined\n\n    if (isDefaultNotFound) {\n      // Override the default /_not-found page status code to 404\n      status = 404\n    } else if (isNonSuccessfulStatusCode && !isParallelRoute) {\n      // If it's parallel route the status from mock response is 404\n      status = res.statusCode\n    }\n\n    // Writing the request metadata to a file.\n    const meta: RouteMetadata = {\n      status,\n      headers,\n      postponed,\n    }\n\n    await fileWriter(\n      ExportedAppPageFiles.META,\n      htmlFilepath.replace(/\\.html$/, NEXT_META_SUFFIX),\n      JSON.stringify(meta, null, 2)\n    )\n\n    return {\n      // Only include the metadata if the environment has next support.\n      metadata: hasNextSupport ? meta : undefined,\n      hasEmptyPrelude: Boolean(postponed) && html === '',\n      hasPostponed: Boolean(postponed),\n      revalidate,\n      fetchMetrics,\n    }\n  } catch (err) {\n    if (!isDynamicUsageError(err)) {\n      throw err\n    }\n\n    // We should fail rendering if a client side rendering bailout\n    // occurred at the page level.\n    if (isBailoutToCSRError(err)) {\n      throw err\n    }\n\n    let fetchMetrics: FetchMetrics | undefined\n\n    if (debugOutput) {\n      const store = (renderOpts as any).store as StaticGenerationStore\n      const { dynamicUsageDescription, dynamicUsageStack } = store\n      fetchMetrics = store.fetchMetrics\n\n      logDynamicUsageWarning({\n        path,\n        description: dynamicUsageDescription ?? '',\n        stack: dynamicUsageStack,\n      })\n    }\n\n    return { revalidate: 0, fetchMetrics }\n  }\n}\n\nfunction logDynamicUsageWarning({\n  path,\n  description,\n  stack,\n}: {\n  path: string\n  description: string\n  stack?: string\n}) {\n  const errMessage = new Error(\n    `Static generation failed due to dynamic usage on ${path}, reason: ${description}`\n  )\n\n  if (stack) {\n    errMessage.stack = errMessage.message + stack.substring(stack.indexOf('\\n'))\n  }\n\n  console.warn(errMessage)\n}\n"],"names":["exportAppPage","ExportedAppPageFiles","req","res","page","path","pathname","query","fallbackRouteParams","renderOpts","htmlFilepath","debugOutput","isDynamicError","fileWriter","isDefaultNotFound","result","lazyRenderAppPage","NodeNextRequest","NodeNextResponse","html","toUnchunkedString","metadata","flightData","revalidate","postponed","fetchTags","fetchMetrics","experimental","isRoutePPREnabled","Error","staticBailoutInfo","description","logDynamicUsageWarning","stack","size","replace","RSC_PREFETCH_SUFFIX","RSC_SUFFIX","headers","NEXT_IS_PRERENDER_HEADER","NEXT_CACHE_TAGS_HEADER","isParallelRoute","test","isNonSuccessfulStatusCode","statusCode","status","undefined","meta","NEXT_META_SUFFIX","JSON","stringify","hasNextSupport","hasEmptyPrelude","Boolean","hasPostponed","err","isDynamicUsageError","isBailoutToCSRError","store","dynamicUsageDescription","dynamicUsageStack","errMessage","message","substring","indexOf","console","warn"],"mappings":"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"}