{"version":3,"sources":["../../../../../src/client/components/router-reducer/reducers/navigate-reducer.ts"],"sourcesContent":["import type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../../server/app-render/types'\nimport { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { invalidateCacheBelowFlightSegmentPath } from '../invalidate-cache-below-flight-segmentpath'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { shouldHardNavigate } from '../should-hard-navigate'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport {\n  PrefetchCacheEntryStatus,\n  type Mutable,\n  type NavigateAction,\n  type ReadonlyReducerState,\n  type ReducerState,\n} from '../router-reducer-types'\nimport { handleMutable } from '../handle-mutable'\nimport { applyFlightData } from '../apply-flight-data'\nimport { prefetchQueue } from './prefetch-reducer'\nimport { createEmptyCacheNode } from '../../app-router'\nimport {\n  addSearchParamsIfPageSegment,\n  DEFAULT_SEGMENT_KEY,\n} from '../../../../shared/lib/segment'\nimport {\n  listenForDynamicRequest,\n  updateCacheNodeOnNavigation,\n} from '../ppr-navigations'\nimport {\n  getOrCreatePrefetchCacheEntry,\n  prunePrefetchCache,\n} from '../prefetch-cache-utils'\nimport { clearCacheNodeDataForSegmentPath } from '../clear-cache-node-data-for-segment-path'\nimport { fillCacheWithNewSubTreeDataButOnlyLoading } from '../fill-cache-with-new-subtree-data'\n\nexport function handleExternalUrl(\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  url: string,\n  pendingPush: boolean\n) {\n  mutable.mpaNavigation = true\n  mutable.canonicalUrl = url\n  mutable.pendingPush = pendingPush\n  mutable.scrollableSegments = undefined\n\n  return handleMutable(state, mutable)\n}\n\nfunction generateSegmentsFromPatch(\n  flightRouterPatch: FlightRouterState\n): FlightSegmentPath[] {\n  const segments: FlightSegmentPath[] = []\n  const [segment, parallelRoutes] = flightRouterPatch\n\n  if (Object.keys(parallelRoutes).length === 0) {\n    return [[segment]]\n  }\n\n  for (const [parallelRouteKey, parallelRoute] of Object.entries(\n    parallelRoutes\n  )) {\n    for (const childSegment of generateSegmentsFromPatch(parallelRoute)) {\n      // If the segment is empty, it means we are at the root of the tree\n      if (segment === '') {\n        segments.push([parallelRouteKey, ...childSegment])\n      } else {\n        segments.push([segment, parallelRouteKey, ...childSegment])\n      }\n    }\n  }\n\n  return segments\n}\n\nfunction triggerLazyFetchForLeafSegments(\n  newCache: CacheNode,\n  currentCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath,\n  treePatch: FlightRouterState\n) {\n  let appliedPatch = false\n\n  newCache.rsc = currentCache.rsc\n  newCache.prefetchRsc = currentCache.prefetchRsc\n  newCache.loading = currentCache.loading\n  newCache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n  const segmentPathsToFill = generateSegmentsFromPatch(treePatch).map(\n    (segment) => [...flightSegmentPath, ...segment]\n  )\n\n  for (const segmentPaths of segmentPathsToFill) {\n    clearCacheNodeDataForSegmentPath(newCache, currentCache, segmentPaths)\n\n    appliedPatch = true\n  }\n\n  return appliedPatch\n}\n\nexport function navigateReducer(\n  state: ReadonlyReducerState,\n  action: NavigateAction\n): ReducerState {\n  const { url, isExternalUrl, navigateType, shouldScroll } = action\n  const mutable: Mutable = {}\n  const { hash } = url\n  const href = createHrefFromUrl(url)\n  const pendingPush = navigateType === 'push'\n  // we want to prune the prefetch cache on every navigation to avoid it growing too large\n  prunePrefetchCache(state.prefetchCache)\n\n  mutable.preserveCustomHistoryState = false\n\n  if (isExternalUrl) {\n    return handleExternalUrl(state, mutable, url.toString(), pendingPush)\n  }\n\n  const prefetchValues = getOrCreatePrefetchCacheEntry({\n    url,\n    nextUrl: state.nextUrl,\n    tree: state.tree,\n    buildId: state.buildId,\n    prefetchCache: state.prefetchCache,\n  })\n  const { treeAtTimeOfPrefetch, data } = prefetchValues\n\n  prefetchQueue.bump(data)\n\n  return data.then(\n    ({ flightData, canonicalUrl: canonicalUrlOverride, postponed }) => {\n      let isFirstRead = false\n      // we only want to mark this once\n      if (!prefetchValues.lastUsedTime) {\n        // important: we should only mark the cache node as dirty after we unsuspend from the call above\n        prefetchValues.lastUsedTime = Date.now()\n        isFirstRead = true\n      }\n\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(state, mutable, flightData, pendingPush)\n      }\n\n      // Handles case where `<meta http-equiv=\"refresh\">` tag is present,\n      // which will trigger an MPA navigation.\n      if (document.getElementById('__next-page-redirect')) {\n        return handleExternalUrl(state, mutable, href, pendingPush)\n      }\n\n      // When the server indicates an override for the canonical URL (such as a redirect in middleware)\n      // we only want to use that if we're not using an aliased entry as the redirect will correspond with\n      // the aliased prefetch which might have different search params. Since we're only using the aliased entry\n      // for the loading state, the proper override will happen in the server patch action when the dynamic\n      // data is loaded.\n      const updatedCanonicalUrl =\n        canonicalUrlOverride && !prefetchValues.aliased\n          ? createHrefFromUrl(canonicalUrlOverride)\n          : href\n\n      // Track if the navigation was only an update to the hash fragment\n      mutable.onlyHashChange =\n        !!hash &&\n        state.canonicalUrl.split('#', 1)[0] ===\n          updatedCanonicalUrl.split('#', 1)[0]\n\n      let currentTree = state.tree\n      let currentCache = state.cache\n      let scrollableSegments: FlightSegmentPath[] = []\n      for (const normalizedFlightData of flightData) {\n        const {\n          tree: treePatch,\n          pathToSegment: flightSegmentPath,\n          seedData,\n          head,\n          isRootRender,\n        } = normalizedFlightData\n\n        // TODO-APP: remove ''\n        const flightSegmentPathWithLeadingEmpty = ['', ...flightSegmentPath]\n\n        // Segments are keyed by searchParams (e.g. __PAGE__?{\"foo\":\"bar\"}), so if we returned an aliased entry,\n        // we need to ensure the correct searchParams are provided in the updated FlightRouterState tree.\n        if (prefetchValues.aliased) {\n          treePatch[0] = addSearchParamsIfPageSegment(\n            treePatch[0],\n            Object.fromEntries(url.searchParams)\n          )\n        }\n\n        // Create new tree based on the flightSegmentPath and router state patch\n        let newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          flightSegmentPathWithLeadingEmpty,\n          currentTree,\n          treePatch,\n          href\n        )\n\n        // If the tree patch can't be applied to the current tree then we use the tree at time of prefetch\n        // TODO-APP: This should instead fill in the missing pieces in `currentTree` with the data from `treeAtTimeOfPrefetch`, then apply the patch.\n        if (newTree === null) {\n          newTree = applyRouterStatePatchToTree(\n            // TODO-APP: remove ''\n            flightSegmentPathWithLeadingEmpty,\n            treeAtTimeOfPrefetch,\n            treePatch,\n            href\n          )\n        }\n\n        if (newTree !== null) {\n          if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n            return handleExternalUrl(state, mutable, href, pendingPush)\n          }\n\n          if (\n            // This is just a paranoid check. When a route is PPRed, the server\n            // will send back a static response that's rendered from\n            // the root. If for some reason it doesn't, we fall back to the\n            // non-PPR implementation.\n            // TODO: We should get rid of the else branch and do all navigations\n            // via updateCacheNodeOnNavigation. The current structure is just\n            // an incremental step.\n            seedData &&\n            isRootRender &&\n            postponed\n          ) {\n            const task = updateCacheNodeOnNavigation(\n              currentCache,\n              currentTree,\n              treePatch,\n              seedData,\n              head,\n              mutable.onlyHashChange\n            )\n\n            if (task !== null) {\n              // We've created a new Cache Node tree that contains a prefetched\n              // version of the next page. This can be rendered instantly.\n\n              // Use the tree computed by updateCacheNodeOnNavigation instead\n              // of the one computed by applyRouterStatePatchToTree.\n              // TODO: We should remove applyRouterStatePatchToTree\n              // from the PPR path entirely.\n              const patchedRouterState: FlightRouterState = task.route\n              newTree = patchedRouterState\n\n              // It's possible that `updateCacheNodeOnNavigation` only spawned tasks to reuse the existing cache,\n              // in which case `task.node` will be null, signaling we don't need to wait for a dynamic request\n              // and can simply apply the patched `FlightRouterState`.\n              if (task.node !== null) {\n                const newCache = task.node\n\n                // The prefetched tree has dynamic holes in it. We initiate a\n                // dynamic request to fill them in.\n                //\n                // Do not block on the result. We'll immediately render the Cache\n                // Node tree and suspend on the dynamic parts. When the request\n                // comes in, we'll fill in missing data and ping React to\n                // re-render. Unlike the lazy fetching model in the non-PPR\n                // implementation, this is modeled as a single React update +\n                // streaming, rather than multiple top-level updates. (However,\n                // even in the new model, we'll still need to sometimes update the\n                // root multiple times per navigation, like if the server sends us\n                // a different response than we expected. For now, we revert back\n                // to the lazy fetching mechanism in that case.)\n                const dynamicRequest = fetchServerResponse(url, {\n                  flightRouterState: currentTree,\n                  nextUrl: state.nextUrl,\n                  buildId: state.buildId,\n                })\n\n                listenForDynamicRequest(task, dynamicRequest)\n                // We store the dynamic request on the `lazyData` property of the CacheNode\n                // because we're not going to await the dynamic request here. Since we're not blocking\n                // on the dynamic request, `layout-router` will\n                // task.node.lazyData = dynamicRequest\n\n                mutable.cache = newCache\n              }\n            } else {\n              // Nothing changed, so reuse the old cache.\n              // TODO: What if the head changed but not any of the segment data?\n              // Is that possible? If so, we should clone the whole tree and\n              // update the head.\n              newTree = treePatch\n            }\n          } else {\n            // The static response does not include any dynamic holes, so\n            // there's no need to do a second request.\n            // TODO: As an incremental step this just reverts back to the\n            // non-PPR implementation. We can simplify this branch further,\n            // given that PPR prefetches are always static and return the whole\n            // tree. Or in the meantime we could factor it out into a\n            // separate function.\n            const cache: CacheNode = createEmptyCacheNode()\n            let applied = false\n\n            // The prefetch cache entry was aliased -- this signals that we only fill in the cache with the\n            // loading state and not the actual parallel route seed data.\n            if (prefetchValues.aliased && seedData) {\n              if (isRootRender) {\n                // Fill in the cache with the new loading / rsc data\n                const rsc = seedData[1]\n                const loading = seedData[3]\n                cache.loading = loading\n                cache.rsc = rsc\n              } else {\n                // Copy rsc for the root node of the cache.\n                cache.rsc = currentCache.rsc\n                cache.prefetchRsc = currentCache.prefetchRsc\n                cache.loading = currentCache.loading\n                cache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n                // recursively fill in `rsc` and `loading` but skip everything else\n                fillCacheWithNewSubTreeDataButOnlyLoading(\n                  cache,\n                  currentCache,\n                  normalizedFlightData,\n                  prefetchValues\n                )\n              }\n\n              applied = true\n            } else if (\n              prefetchValues.status === PrefetchCacheEntryStatus.stale &&\n              !mutable.onlyHashChange &&\n              !isFirstRead\n            ) {\n              // When we have a stale prefetch entry, we only want to re-use the loading state of the route we're navigating to, to support instant loading navigations\n              // this will trigger a lazy fetch for the actual page data by nulling the `rsc` and `prefetchRsc` values for page data,\n              // while copying over the `loading` for the segment that contains the page data.\n              // We only do this on subsequent reads, as otherwise there'd be no loading data to re-use.\n\n              // We skip this branch if only the hash fragment has changed, as we don't want to trigger a lazy fetch in that case\n              applied = triggerLazyFetchForLeafSegments(\n                cache,\n                currentCache,\n                flightSegmentPath,\n                treePatch\n              )\n              // since we re-used the stale cache's loading state & refreshed the data,\n              // update the `lastUsedTime` so that it can continue to be re-used for the next 30s\n              prefetchValues.lastUsedTime = Date.now()\n            } else {\n              applied = applyFlightData(\n                currentCache,\n                cache,\n                normalizedFlightData,\n                prefetchValues\n              )\n            }\n\n            const hardNavigate = shouldHardNavigate(\n              // TODO-APP: remove ''\n              flightSegmentPathWithLeadingEmpty,\n              currentTree\n            )\n\n            if (hardNavigate) {\n              // Copy rsc for the root node of the cache.\n              cache.rsc = currentCache.rsc\n              cache.prefetchRsc = currentCache.prefetchRsc\n\n              invalidateCacheBelowFlightSegmentPath(\n                cache,\n                currentCache,\n                flightSegmentPath\n              )\n              // Ensure the existing cache value is used when the cache was not invalidated.\n              mutable.cache = cache\n            } else if (applied) {\n              mutable.cache = cache\n              // If we applied the cache, we update the \"current cache\" value so any other\n              // segments in the FlightDataPath will be able to reference the updated cache.\n              currentCache = cache\n            }\n          }\n\n          currentTree = newTree\n\n          for (const subSegment of generateSegmentsFromPatch(treePatch)) {\n            const scrollableSegmentPath = [...flightSegmentPath, ...subSegment]\n            // Filter out the __DEFAULT__ paths as they shouldn't be scrolled to in this case.\n            if (\n              scrollableSegmentPath[scrollableSegmentPath.length - 1] !==\n              DEFAULT_SEGMENT_KEY\n            ) {\n              scrollableSegments.push(scrollableSegmentPath)\n            }\n          }\n        }\n      }\n\n      mutable.patchedTree = currentTree\n      mutable.canonicalUrl = updatedCanonicalUrl\n      mutable.pendingPush = pendingPush\n      mutable.scrollableSegments = scrollableSegments\n      mutable.hashFragment = hash\n      mutable.shouldScroll = shouldScroll\n\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n"],"names":["handleExternalUrl","navigateReducer","state","mutable","url","pendingPush","mpaNavigation","canonicalUrl","scrollableSegments","undefined","handleMutable","generateSegmentsFromPatch","flightRouterPatch","segments","segment","parallelRoutes","Object","keys","length","parallelRouteKey","parallelRoute","entries","childSegment","push","triggerLazyFetchForLeafSegments","newCache","currentCache","flightSegmentPath","treePatch","appliedPatch","rsc","prefetchRsc","loading","Map","segmentPathsToFill","map","segmentPaths","clearCacheNodeDataForSegmentPath","action","isExternalUrl","navigateType","shouldScroll","hash","href","createHrefFromUrl","prunePrefetchCache","prefetchCache","preserveCustomHistoryState","toString","prefetchValues","getOrCreatePrefetchCacheEntry","nextUrl","tree","buildId","treeAtTimeOfPrefetch","data","prefetchQueue","bump","then","flightData","canonicalUrlOverride","postponed","isFirstRead","lastUsedTime","Date","now","document","getElementById","updatedCanonicalUrl","aliased","onlyHashChange","split","currentTree","cache","normalizedFlightData","pathToSegment","seedData","head","isRootRender","flightSegmentPathWithLeadingEmpty","addSearchParamsIfPageSegment","fromEntries","searchParams","newTree","applyRouterStatePatchToTree","isNavigatingToNewRootLayout","task","updateCacheNodeOnNavigation","patchedRouterState","route","node","dynamicRequest","fetchServerResponse","flightRouterState","listenForDynamicRequest","createEmptyCacheNode","applied","fillCacheWithNewSubTreeDataButOnlyLoading","status","PrefetchCacheEntryStatus","stale","applyFlightData","hardNavigate","shouldHardNavigate","invalidateCacheBelowFlightSegmentPath","subSegment","scrollableSegmentPath","DEFAULT_SEGMENT_KEY","patchedTree","hashFragment"],"mappings":"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"}