{"version":3,"sources":["../../../../src/server/dev/turbopack/manifest-loader.ts"],"sourcesContent":["import type {\n  EdgeFunctionDefinition,\n  MiddlewareManifest,\n} from '../../../build/webpack/plugins/middleware-plugin'\nimport type { BuildManifest } from '../../get-page-files'\nimport type { AppBuildManifest } from '../../../build/webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from '../../../build/webpack/plugins/pages-manifest-plugin'\nimport { pathToRegexp } from 'next/dist/compiled/path-to-regexp'\nimport type { ActionManifest } from '../../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { NextFontManifest } from '../../../build/webpack/plugins/next-font-manifest-plugin'\nimport type { LoadableManifest } from '../../load-components'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATHS_MANIFEST,\n  BUILD_MANIFEST,\n  INTERCEPTION_ROUTE_REWRITE_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n} from '../../../shared/lib/constants'\nimport { join, posix } from 'path'\nimport { readFile } from 'fs/promises'\nimport type { SetupOpts } from '../../lib/router-utils/setup-dev-bundler'\nimport { deleteCache } from '../require-cache'\nimport { writeFileAtomic } from '../../../lib/fs/write-atomic'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport {\n  type ClientBuildManifest,\n  normalizeRewritesForBuildManifest,\n  srcEmptySsgManifest,\n  processRoute,\n} from '../../../build/webpack/plugins/build-manifest-plugin'\nimport type { Entrypoints } from './types'\nimport getAssetPathFromRoute from '../../../shared/lib/router/utils/get-asset-path-from-route'\nimport { getEntryKey, type EntryKey } from './entry-key'\nimport type { CustomRoutes } from '../../../lib/load-custom-routes'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\nimport { existsSync } from 'fs'\nimport { addMetadataIdToRoute, addRouteSuffix, removeRouteSuffix } from '../turbopack-utils'\nimport { tryToParsePath } from '../../../lib/try-to-parse-path'\n\ninterface InstrumentationDefinition {\n  files: string[]\n  name: 'instrumentation'\n}\n\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n  instrumentation?: InstrumentationDefinition\n}\n\nasync function readPartialManifest<T>(\n  distDir: string,\n  name:\n    | typeof MIDDLEWARE_MANIFEST\n    | typeof BUILD_MANIFEST\n    | typeof APP_BUILD_MANIFEST\n    | typeof PAGES_MANIFEST\n    | typeof APP_PATHS_MANIFEST\n    | `${typeof SERVER_REFERENCE_MANIFEST}.json`\n    | `${typeof NEXT_FONT_MANIFEST}.json`\n    | typeof REACT_LOADABLE_MANIFEST,\n  pageName: string,\n  type: 'pages' | 'app' | 'middleware' | 'instrumentation' = 'pages'\n): Promise<T> {\n  const page = pageName.replace(/\\/sitemap\\/route$/, '/sitemap.xml/route')\n\n  let manifestPath = posix.join(\n    distDir,\n    `server`,\n    type,\n    type === 'middleware' || type === 'instrumentation'\n      ? ''\n      : type === 'app'\n        ? page\n        : getAssetPathFromRoute(page),\n    name\n  )\n  // existsSync is faster than using the async version\n  if(!existsSync(manifestPath) && page.endsWith('/route')) {\n    // TODO: Improve implementation of metadata routes, currently it requires this extra check for the variants of the files that can be written.\n    const metadataPage = addRouteSuffix(addMetadataIdToRoute(removeRouteSuffix(page.replace(/\\/sitemap\\.xml\\/route$/, '/sitemap/route'))))\n    manifestPath = posix.join(\n      distDir,\n      `server`,\n      type,\n      type === 'middleware' || type === 'instrumentation'\n        ? ''\n        : type === 'app'\n          ? metadataPage\n          : getAssetPathFromRoute(metadataPage),\n      name\n    )\n  }\n  return JSON.parse(await readFile(posix.join(manifestPath), 'utf-8')) as T\n}\n\nexport class TurbopackManifestLoader {\n  private actionManifests: Map<EntryKey, ActionManifest> = new Map()\n  private appBuildManifests: Map<EntryKey, AppBuildManifest> = new Map()\n  private appPathsManifests: Map<EntryKey, PagesManifest> = new Map()\n  private buildManifests: Map<EntryKey, BuildManifest> = new Map()\n  private fontManifests: Map<EntryKey, NextFontManifest> = new Map()\n  private loadableManifests: Map<EntryKey, LoadableManifest> = new Map()\n  private middlewareManifests: Map<EntryKey, TurbopackMiddlewareManifest> =\n    new Map()\n  private pagesManifests: Map<string, PagesManifest> = new Map()\n  private encryptionKey: string\n\n  private readonly distDir: string\n  private readonly buildId: string\n\n  constructor({\n    distDir,\n    buildId,\n    encryptionKey,\n  }: {\n    buildId: string\n    distDir: string\n    encryptionKey: string\n  }) {\n    this.distDir = distDir\n    this.buildId = buildId\n    this.encryptionKey = encryptionKey\n  }\n\n  delete(key: EntryKey) {\n    this.actionManifests.delete(key)\n    this.appBuildManifests.delete(key)\n    this.appPathsManifests.delete(key)\n    this.buildManifests.delete(key)\n    this.fontManifests.delete(key)\n    this.loadableManifests.delete(key)\n    this.middlewareManifests.delete(key)\n    this.pagesManifests.delete(key)\n  }\n\n  async loadActionManifest(pageName: string): Promise<void> {\n    this.actionManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${SERVER_REFERENCE_MANIFEST}.json`,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async mergeActionManifests(manifests: Iterable<ActionManifest>) {\n    type ActionEntries = ActionManifest['edge' | 'node']\n    const manifest: ActionManifest = {\n      node: {},\n      edge: {},\n      encryptionKey: this.encryptionKey,\n    }\n\n    function mergeActionIds(\n      actionEntries: ActionEntries,\n      other: ActionEntries\n    ): void {\n      for (const key in other) {\n        const action = (actionEntries[key] ??= {\n          workers: {},\n          layer: {},\n        })\n        Object.assign(action.workers, other[key].workers)\n        Object.assign(action.layer, other[key].layer)\n      }\n    }\n\n    for (const m of manifests) {\n      mergeActionIds(manifest.node, m.node)\n      mergeActionIds(manifest.edge, m.edge)\n    }\n\n    return manifest\n  }\n\n  private async writeActionManifest(): Promise<void> {\n    const actionManifest = await this.mergeActionManifests(\n      this.actionManifests.values()\n    )\n    const actionManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.json`\n    )\n    const actionManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.js`\n    )\n    const json = JSON.stringify(actionManifest, null, 2)\n    deleteCache(actionManifestJsonPath)\n    deleteCache(actionManifestJsPath)\n    await writeFileAtomic(actionManifestJsonPath, json)\n    await writeFileAtomic(\n      actionManifestJsPath,\n      `self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadAppBuildManifest(pageName: string): Promise<void> {\n    this.appBuildManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_BUILD_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private mergeAppBuildManifests(manifests: Iterable<AppBuildManifest>) {\n    const manifest: AppBuildManifest = {\n      pages: {},\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n    }\n    return manifest\n  }\n\n  private async writeAppBuildManifest(): Promise<void> {\n    const appBuildManifest = this.mergeAppBuildManifests(\n      this.appBuildManifests.values()\n    )\n    const appBuildManifestPath = join(this.distDir, APP_BUILD_MANIFEST)\n    deleteCache(appBuildManifestPath)\n    await writeFileAtomic(\n      appBuildManifestPath,\n      JSON.stringify(appBuildManifest, null, 2)\n    )\n  }\n\n  async loadAppPathsManifest(pageName: string): Promise<void> {\n    this.appPathsManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_PATHS_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async writeAppPathsManifest(): Promise<void> {\n    const appPathsManifest = this.mergePagesManifests(\n      this.appPathsManifests.values()\n    )\n    const appPathsManifestPath = join(\n      this.distDir,\n      'server',\n      APP_PATHS_MANIFEST\n    )\n    deleteCache(appPathsManifestPath)\n    await writeFileAtomic(\n      appPathsManifestPath,\n      JSON.stringify(appPathsManifest, null, 2)\n    )\n  }\n\n\n  async loadBuildManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.buildManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(this.distDir, BUILD_MANIFEST, pageName, type)\n    )\n  }\n\n  private mergeBuildManifests(manifests: Iterable<BuildManifest>) {\n    const manifest: Partial<BuildManifest> & Pick<BuildManifest, 'pages'> = {\n      pages: {\n        '/_app': [],\n      },\n      // Something in next.js depends on these to exist even for app dir rendering\n      devFiles: [],\n      ampDevFiles: [],\n      polyfillFiles: [],\n      lowPriorityFiles: [\n        `static/${this.buildId}/_ssgManifest.js`,\n        `static/${this.buildId}/_buildManifest.js`,\n      ],\n      rootMainFiles: [],\n      ampFirstPages: [],\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n      if (m.rootMainFiles.length) manifest.rootMainFiles = m.rootMainFiles\n      // polyfillFiles should always be the same, so we can overwrite instead of actually merging\n      if (m.polyfillFiles.length) manifest.polyfillFiles = m.polyfillFiles\n    }\n    return manifest\n  }\n\n  private async writeBuildManifest(\n    entrypoints: Entrypoints,\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined,\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n  ): Promise<void> {\n    const rewrites = productionRewrites ?? {\n      ...devRewrites,\n      beforeFiles: (devRewrites?.beforeFiles ?? []).map(processRoute),\n      afterFiles: (devRewrites?.afterFiles ?? []).map(processRoute),\n      fallback: (devRewrites?.fallback ?? []).map(processRoute),\n    }\n    const buildManifest = this.mergeBuildManifests(this.buildManifests.values())\n    const buildManifestPath = join(this.distDir, BUILD_MANIFEST)\n    const middlewareBuildManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_BUILD_MANIFEST}.js`\n    )\n    const interceptionRewriteManifestPath = join(\n      this.distDir,\n      'server',\n      `${INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`\n    )\n    deleteCache(buildManifestPath)\n    deleteCache(middlewareBuildManifestPath)\n    deleteCache(interceptionRewriteManifestPath)\n    await writeFileAtomic(\n      buildManifestPath,\n      JSON.stringify(buildManifest, null, 2)\n    )\n    await writeFileAtomic(\n      middlewareBuildManifestPath,\n      `self.__BUILD_MANIFEST=${JSON.stringify(buildManifest)};`\n    )\n\n    const interceptionRewrites = JSON.stringify(\n      rewrites.beforeFiles.filter(isInterceptionRouteRewrite)\n    )\n\n    await writeFileAtomic(\n      interceptionRewriteManifestPath,\n      `self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(\n        interceptionRewrites\n      )};`\n    )\n\n    const pagesKeys = [...entrypoints.page.keys()]\n    if (entrypoints.global.app) {\n      pagesKeys.push('/_app')\n    }\n    if (entrypoints.global.error) {\n      pagesKeys.push('/_error')\n    }\n\n    const sortedPageKeys = getSortedRoutes(pagesKeys)\n    const content: ClientBuildManifest = {\n      __rewrites: normalizeRewritesForBuildManifest(rewrites) as any,\n      ...Object.fromEntries(\n        sortedPageKeys.map((pathname) => [\n          pathname,\n          [`static/chunks/pages${pathname === '/' ? '/index' : pathname}.js`],\n        ])\n      ),\n      sortedPages: sortedPageKeys,\n    }\n    const buildManifestJs = `self.__BUILD_MANIFEST = ${JSON.stringify(\n      content\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_buildManifest.js'),\n      buildManifestJs\n    )\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_ssgManifest.js'),\n      srcEmptySsgManifest\n    )\n  }\n\n  private async writeClientMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    const matchers = middlewareManifest?.middleware['/']?.matchers || []\n\n    const clientMiddlewareManifestPath = join(\n      this.distDir,\n      'static',\n      this.buildId,\n      `${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n    )\n    deleteCache(clientMiddlewareManifestPath)\n    await writeFileAtomic(\n      clientMiddlewareManifestPath,\n      JSON.stringify(matchers, null, 2)\n    )\n  }\n\n  private async writeFallbackBuildManifest(): Promise<void> {\n    const fallbackBuildManifest = this.mergeBuildManifests(\n      [\n        this.buildManifests.get(getEntryKey('pages', 'server', '_app')),\n        this.buildManifests.get(getEntryKey('pages', 'server', '_error')),\n      ].filter(Boolean) as BuildManifest[]\n    )\n    const fallbackBuildManifestPath = join(\n      this.distDir,\n      `fallback-${BUILD_MANIFEST}`\n    )\n    deleteCache(fallbackBuildManifestPath)\n    await writeFileAtomic(\n      fallbackBuildManifestPath,\n      JSON.stringify(fallbackBuildManifest, null, 2)\n    )\n  }\n\n  async loadFontManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.fontManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${NEXT_FONT_MANIFEST}.json`,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeFontManifests(manifests: Iterable<NextFontManifest>) {\n    const manifest: NextFontManifest = {\n      app: {},\n      appUsingSizeAdjust: false,\n      pages: {},\n      pagesUsingSizeAdjust: false,\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.app, m.app)\n      Object.assign(manifest.pages, m.pages)\n\n      manifest.appUsingSizeAdjust =\n        manifest.appUsingSizeAdjust || m.appUsingSizeAdjust\n      manifest.pagesUsingSizeAdjust =\n        manifest.pagesUsingSizeAdjust || m.pagesUsingSizeAdjust\n    }\n    return manifest\n  }\n\n  private async writeNextFontManifest(): Promise<void> {\n    const fontManifest = this.mergeFontManifests(this.fontManifests.values())\n    const json = JSON.stringify(fontManifest, null, 2)\n\n    const fontManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.json`\n    )\n    const fontManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.js`\n    )\n    deleteCache(fontManifestJsonPath)\n    deleteCache(fontManifestJsPath)\n    await writeFileAtomic(fontManifestJsonPath, json)\n    await writeFileAtomic(\n      fontManifestJsPath,\n      `self.__NEXT_FONT_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadLoadableManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.loadableManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        REACT_LOADABLE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeLoadableManifests(manifests: Iterable<LoadableManifest>) {\n    const manifest: LoadableManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writeLoadableManifest(): Promise<void> {\n    const loadableManifest = this.mergeLoadableManifests(\n      this.loadableManifests.values()\n    )\n    const loadableManifestPath = join(this.distDir, REACT_LOADABLE_MANIFEST)\n    const middlewareloadableManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`\n    )\n\n    const json = JSON.stringify(loadableManifest, null, 2)\n\n    deleteCache(loadableManifestPath)\n    deleteCache(middlewareloadableManifestPath)\n    await writeFileAtomic(loadableManifestPath, json)\n    await writeFileAtomic(\n      middlewareloadableManifestPath,\n      `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadMiddlewareManifest(\n    pageName: string,\n    type: 'pages' | 'app' | 'middleware' | 'instrumentation'\n  ): Promise<void> {\n    this.middlewareManifests.set(\n      getEntryKey(\n        type === 'middleware' || type === 'instrumentation' ? 'root' : type,\n        'server',\n        pageName\n      ),\n      await readPartialManifest(\n        this.distDir,\n        MIDDLEWARE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  getMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.get(key)\n  }\n\n  deleteMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.delete(key)\n  }\n\n  private mergeMiddlewareManifests(\n    manifests: Iterable<TurbopackMiddlewareManifest>\n  ): MiddlewareManifest {\n    const manifest: MiddlewareManifest = {\n      version: 3,\n      middleware: {},\n      sortedMiddleware: [],\n      functions: {},\n    }\n    let instrumentation: InstrumentationDefinition | undefined = undefined\n    for (const m of manifests) {\n      Object.assign(manifest.functions, m.functions)\n      Object.assign(manifest.middleware, m.middleware)\n      if (m.instrumentation) {\n        instrumentation = m.instrumentation\n      }\n    }\n    const updateFunctionDefinition = (\n      fun: EdgeFunctionDefinition\n    ): EdgeFunctionDefinition => {\n      return {\n        ...fun,\n        files: [...(instrumentation?.files ?? []), ...fun.files],\n      }\n    }\n    for (const key of Object.keys(manifest.middleware)) {\n      const value = manifest.middleware[key]\n      manifest.middleware[key] = updateFunctionDefinition(value)\n    }\n    for (const key of Object.keys(manifest.functions)) {\n      const value = manifest.functions[key]\n      manifest.functions[key] = updateFunctionDefinition(value)\n    }\n    for (const fun of Object.values(manifest.functions).concat(\n      Object.values(manifest.middleware)\n    )) {\n      for (const matcher of fun.matchers) {\n        if (!matcher.regexp) {\n          matcher.regexp = pathToRegexp(matcher.originalSource, [], {\n            delimiter: '/',\n            sensitive: false,\n            strict: true,\n          }).source.replaceAll('\\\\/', '/')\n        }\n      }\n    }\n    manifest.sortedMiddleware = Object.keys(manifest.middleware)\n\n    return manifest\n  }\n\n  private async writeMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    // Normalize regexes as it uses path-to-regexp\n    for (const key in middlewareManifest.middleware) {\n      middlewareManifest.middleware[key].matchers.forEach((matcher) => {\n        if (!matcher.regexp.startsWith('^')) {\n          const parsedPage = tryToParsePath(matcher.regexp)\n          if (parsedPage.error || !parsedPage.regexStr) {\n            throw new Error(`Invalid source: ${matcher.regexp}`)\n          }\n          matcher.regexp = parsedPage.regexStr\n        }\n      })\n    }\n\n    const middlewareManifestPath = join(\n      this.distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    deleteCache(middlewareManifestPath)\n    await writeFileAtomic(\n      middlewareManifestPath,\n      JSON.stringify(middlewareManifest, null, 2)\n    )\n  }\n\n  async loadPagesManifest(pageName: string): Promise<void> {\n    this.pagesManifests.set(\n      getEntryKey('pages', 'server', pageName),\n      await readPartialManifest(this.distDir, PAGES_MANIFEST, pageName)\n    )\n  }\n\n  private mergePagesManifests(manifests: Iterable<PagesManifest>) {\n    const manifest: PagesManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writePagesManifest(): Promise<void> {\n    const pagesManifest = this.mergePagesManifests(this.pagesManifests.values())\n    const pagesManifestPath = join(this.distDir, 'server', PAGES_MANIFEST)\n    deleteCache(pagesManifestPath)\n    await writeFileAtomic(\n      pagesManifestPath,\n      JSON.stringify(pagesManifest, null, 2)\n    )\n  }\n\n  async writeManifests({\n    devRewrites,\n    productionRewrites,\n    entrypoints,\n  }: {\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n    entrypoints: Entrypoints\n  }) {\n    await this.writeActionManifest()\n    await this.writeAppBuildManifest()\n    await this.writeAppPathsManifest()\n    await this.writeBuildManifest(entrypoints, devRewrites, productionRewrites)\n    await this.writeFallbackBuildManifest()\n    await this.writeLoadableManifest()\n    await this.writeMiddlewareManifest()\n    await this.writeClientMiddlewareManifest()\n    await this.writeNextFontManifest()\n    await this.writePagesManifest()\n  }\n}\n"],"names":["TurbopackManifestLoader","readPartialManifest","distDir","name","pageName","type","page","replace","manifestPath","posix","join","getAssetPathFromRoute","existsSync","endsWith","metadataPage","addRouteSuffix","addMetadataIdToRoute","removeRouteSuffix","JSON","parse","readFile","constructor","buildId","encryptionKey","actionManifests","Map","appBuildManifests","appPathsManifests","buildManifests","fontManifests","loadableManifests","middlewareManifests","pagesManifests","delete","key","loadActionManifest","set","getEntryKey","SERVER_REFERENCE_MANIFEST","mergeActionManifests","manifests","manifest","node","edge","mergeActionIds","actionEntries","other","action","workers","layer","Object","assign","m","writeActionManifest","actionManifest","values","actionManifestJsonPath","actionManifestJsPath","json","stringify","deleteCache","writeFileAtomic","loadAppBuildManifest","APP_BUILD_MANIFEST","mergeAppBuildManifests","pages","writeAppBuildManifest","appBuildManifest","appBuildManifestPath","loadAppPathsManifest","APP_PATHS_MANIFEST","writeAppPathsManifest","appPathsManifest","mergePagesManifests","appPathsManifestPath","loadBuildManifest","BUILD_MANIFEST","mergeBuildManifests","devFiles","ampDevFiles","polyfillFiles","lowPriorityFiles","rootMainFiles","ampFirstPages","length","writeBuildManifest","entrypoints","devRewrites","productionRewrites","rewrites","beforeFiles","map","processRoute","afterFiles","fallback","buildManifest","buildManifestPath","middlewareBuildManifestPath","MIDDLEWARE_BUILD_MANIFEST","interceptionRewriteManifestPath","INTERCEPTION_ROUTE_REWRITE_MANIFEST","interceptionRewrites","filter","isInterceptionRouteRewrite","pagesKeys","keys","global","app","push","error","sortedPageKeys","getSortedRoutes","content","__rewrites","normalizeRewritesForBuildManifest","fromEntries","pathname","sortedPages","buildManifestJs","srcEmptySsgManifest","writeClientMiddlewareManifest","middlewareManifest","mergeMiddlewareManifests","matchers","middleware","clientMiddlewareManifestPath","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","writeFallbackBuildManifest","fallbackBuildManifest","get","Boolean","fallbackBuildManifestPath","loadFontManifest","NEXT_FONT_MANIFEST","mergeFontManifests","appUsingSizeAdjust","pagesUsingSizeAdjust","writeNextFontManifest","fontManifest","fontManifestJsonPath","fontManifestJsPath","loadLoadableManifest","REACT_LOADABLE_MANIFEST","mergeLoadableManifests","writeLoadableManifest","loadableManifest","loadableManifestPath","middlewareloadableManifestPath","MIDDLEWARE_REACT_LOADABLE_MANIFEST","loadMiddlewareManifest","MIDDLEWARE_MANIFEST","getMiddlewareManifest","deleteMiddlewareManifest","version","sortedMiddleware","functions","instrumentation","undefined","updateFunctionDefinition","fun","files","value","concat","matcher","regexp","pathToRegexp","originalSource","delimiter","sensitive","strict","source","replaceAll","writeMiddlewareManifest","forEach","startsWith","parsedPage","tryToParsePath","regexStr","Error","middlewareManifestPath","loadPagesManifest","PAGES_MANIFEST","writePagesManifest","pagesManifest","pagesManifestPath","writeManifests"],"mappings":"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"}