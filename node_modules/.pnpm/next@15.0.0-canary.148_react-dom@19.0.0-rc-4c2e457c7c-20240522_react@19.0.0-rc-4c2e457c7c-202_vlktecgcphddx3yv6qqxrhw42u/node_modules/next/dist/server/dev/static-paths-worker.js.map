{"version":3,"sources":["../../../src/server/dev/static-paths-worker.ts"],"sourcesContent":["import type { NextConfigComplete } from '../config-shared'\n\nimport '../require-hook'\nimport '../node-environment'\n\nimport {\n  buildAppStaticPaths,\n  buildStaticPaths,\n  collectGenerateParams,\n  reduceAppConfig,\n} from '../../build/utils'\nimport type {\n  GenerateParamsResults,\n  PartialStaticPathsResult,\n} from '../../build/utils'\nimport { loadComponents } from '../load-components'\nimport { setHttpClientAndAgentOptions } from '../setup-http-agent-env'\nimport type { IncrementalCache } from '../lib/incremental-cache'\nimport {\n  isAppPageRouteModule,\n  isAppRouteRouteModule,\n} from '../route-modules/checks'\nimport {\n  checkIsRoutePPREnabled,\n  type ExperimentalPPRConfig,\n} from '../lib/experimental/ppr'\n\ntype RuntimeConfig = {\n  pprConfig: ExperimentalPPRConfig | undefined\n  configFileName: string\n  publicRuntimeConfig: { [key: string]: any }\n  serverRuntimeConfig: { [key: string]: any }\n}\n\n// we call getStaticPaths in a separate process to ensure\n// side-effects aren't relied on in dev that will break\n// during a production build\nexport async function loadStaticPaths({\n  dir,\n  distDir,\n  pathname,\n  config,\n  httpAgentOptions,\n  locales,\n  defaultLocale,\n  isAppPath,\n  page,\n  isrFlushToDisk,\n  fetchCacheKeyPrefix,\n  maxMemoryCacheSize,\n  requestHeaders,\n  cacheHandler,\n  nextConfigOutput,\n  isAppPPRFallbacksEnabled,\n}: {\n  dir: string\n  distDir: string\n  pathname: string\n  config: RuntimeConfig\n  httpAgentOptions: NextConfigComplete['httpAgentOptions']\n  locales?: string[]\n  defaultLocale?: string\n  isAppPath: boolean\n  page: string\n  isrFlushToDisk?: boolean\n  fetchCacheKeyPrefix?: string\n  maxMemoryCacheSize?: number\n  requestHeaders: IncrementalCache['requestHeaders']\n  cacheHandler?: string\n  nextConfigOutput: 'standalone' | 'export' | undefined\n  isAppPPRFallbacksEnabled: boolean | undefined\n}): Promise<PartialStaticPathsResult> {\n  // update work memory runtime-config\n  require('../../shared/lib/runtime-config.external').setConfig(config)\n  setHttpClientAndAgentOptions({\n    httpAgentOptions,\n  })\n\n  const components = await loadComponents({\n    distDir,\n    // In `pages/`, the page is the same as the pathname.\n    page: page || pathname,\n    isAppPath,\n  })\n\n  if (!components.getStaticPaths && !isAppPath) {\n    // we shouldn't get to this point since the worker should\n    // only be called for SSG pages with getStaticPaths\n    throw new Error(\n      `Invariant: failed to load page with getStaticPaths for ${pathname}`\n    )\n  }\n\n  if (isAppPath) {\n    const { routeModule } = components\n    const generateParams: GenerateParamsResults =\n      routeModule && isAppRouteRouteModule(routeModule)\n        ? [\n            {\n              config: {\n                revalidate: routeModule.userland.revalidate,\n                dynamic: routeModule.userland.dynamic,\n                dynamicParams: routeModule.userland.dynamicParams,\n              },\n              generateStaticParams: routeModule.userland.generateStaticParams,\n              segmentPath: pathname,\n            },\n          ]\n        : await collectGenerateParams(components.ComponentMod.tree)\n\n    const isRoutePPREnabled =\n      isAppPageRouteModule(routeModule) &&\n      checkIsRoutePPREnabled(config.pprConfig, reduceAppConfig(generateParams))\n\n    return await buildAppStaticPaths({\n      dir,\n      page: pathname,\n      generateParams,\n      configFileName: config.configFileName,\n      distDir,\n      requestHeaders,\n      cacheHandler,\n      isrFlushToDisk,\n      fetchCacheKeyPrefix,\n      maxMemoryCacheSize,\n      ComponentMod: components.ComponentMod,\n      nextConfigOutput,\n      isRoutePPREnabled,\n      isAppPPRFallbacksEnabled,\n    })\n  }\n\n  return await buildStaticPaths({\n    page: pathname,\n    getStaticPaths: components.getStaticPaths,\n    configFileName: config.configFileName,\n    locales,\n    defaultLocale,\n  })\n}\n"],"names":["loadStaticPaths","dir","distDir","pathname","config","httpAgentOptions","locales","defaultLocale","isAppPath","page","isrFlushToDisk","fetchCacheKeyPrefix","maxMemoryCacheSize","requestHeaders","cacheHandler","nextConfigOutput","isAppPPRFallbacksEnabled","require","setConfig","setHttpClientAndAgentOptions","components","loadComponents","getStaticPaths","Error","routeModule","generateParams","isAppRouteRouteModule","revalidate","userland","dynamic","dynamicParams","generateStaticParams","segmentPath","collectGenerateParams","ComponentMod","tree","isRoutePPREnabled","isAppPageRouteModule","checkIsRoutePPREnabled","pprConfig","reduceAppConfig","buildAppStaticPaths","configFileName","buildStaticPaths"],"mappings":";;;;+BAqCsBA;;;eAAAA;;;QAnCf;QACA;uBAOA;gCAKwB;mCACc;wBAKtC;qBAIA;AAYA,eAAeA,gBAAgB,EACpCC,GAAG,EACHC,OAAO,EACPC,QAAQ,EACRC,MAAM,EACNC,gBAAgB,EAChBC,OAAO,EACPC,aAAa,EACbC,SAAS,EACTC,IAAI,EACJC,cAAc,EACdC,mBAAmB,EACnBC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,EACZC,gBAAgB,EAChBC,wBAAwB,EAkBzB;IACC,oCAAoC;IACpCC,QAAQ,4CAA4CC,SAAS,CAACd;IAC9De,IAAAA,+CAA4B,EAAC;QAC3Bd;IACF;IAEA,MAAMe,aAAa,MAAMC,IAAAA,8BAAc,EAAC;QACtCnB;QACA,qDAAqD;QACrDO,MAAMA,QAAQN;QACdK;IACF;IAEA,IAAI,CAACY,WAAWE,cAAc,IAAI,CAACd,WAAW;QAC5C,yDAAyD;QACzD,mDAAmD;QACnD,MAAM,IAAIe,MACR,CAAC,uDAAuD,EAAEpB,SAAS,CAAC;IAExE;IAEA,IAAIK,WAAW;QACb,MAAM,EAAEgB,WAAW,EAAE,GAAGJ;QACxB,MAAMK,iBACJD,eAAeE,IAAAA,6BAAqB,EAACF,eACjC;YACE;gBACEpB,QAAQ;oBACNuB,YAAYH,YAAYI,QAAQ,CAACD,UAAU;oBAC3CE,SAASL,YAAYI,QAAQ,CAACC,OAAO;oBACrCC,eAAeN,YAAYI,QAAQ,CAACE,aAAa;gBACnD;gBACAC,sBAAsBP,YAAYI,QAAQ,CAACG,oBAAoB;gBAC/DC,aAAa7B;YACf;SACD,GACD,MAAM8B,IAAAA,4BAAqB,EAACb,WAAWc,YAAY,CAACC,IAAI;QAE9D,MAAMC,oBACJC,IAAAA,4BAAoB,EAACb,gBACrBc,IAAAA,2BAAsB,EAAClC,OAAOmC,SAAS,EAAEC,IAAAA,sBAAe,EAACf;QAE3D,OAAO,MAAMgB,IAAAA,0BAAmB,EAAC;YAC/BxC;YACAQ,MAAMN;YACNsB;YACAiB,gBAAgBtC,OAAOsC,cAAc;YACrCxC;YACAW;YACAC;YACAJ;YACAC;YACAC;YACAsB,cAAcd,WAAWc,YAAY;YACrCnB;YACAqB;YACApB;QACF;IACF;IAEA,OAAO,MAAM2B,IAAAA,uBAAgB,EAAC;QAC5BlC,MAAMN;QACNmB,gBAAgBF,WAAWE,cAAc;QACzCoB,gBAAgBtC,OAAOsC,cAAc;QACrCpC;QACAC;IACF;AACF"}