{"version":3,"sources":["../../../src/server/app-render/prerender-async-storage.external.ts"],"sourcesContent":["import type { AsyncLocalStorage } from 'async_hooks'\n\nimport type { CacheSignal } from './cache-signal'\nimport type { DynamicTrackingState } from './dynamic-rendering'\n\n// Share the instance module in the next-shared layer\nimport { prerenderAsyncStorage } from './prerender-async-storage-instance' with { 'turbopack-transition': 'next-shared' }\n\n/**\n * The Prerender store is for tracking information related to prerenders.\n *\n * It can be used for both RSC and SSR prerendering and should be scoped as close\n * to the individual `renderTo...` API call as possible. To keep the type simple\n * we don't distinguish between RSC and SSR prerendering explicitly but instead\n * use conditional object properties to infer which mode we are in. For instance cache tracking\n * only needs to happen during the RSC prerender when we are prospectively prerendering\n * to fill all caches.\n */\nexport type PrerenderStore = {\n  /**\n   * This is the AbortController passed to React. It can be used to abort the prerender\n   * if we encounter conditions that do not require further rendering\n   */\n  readonly controller: null | AbortController\n\n  /**\n   * when not null this signal is used to track cache reads during prerendering and\n   * to await all cache reads completing before aborting the prerender.\n   */\n  readonly cacheSignal: null | CacheSignal\n\n  /**\n   * During some prerenders we want to track dynamic access.\n   */\n  readonly dynamicTracking: null | DynamicTrackingState\n}\n\nexport type PrerenderAsyncStorage = AsyncLocalStorage<PrerenderStore>\nexport { prerenderAsyncStorage }\n"],"names":["prerenderAsyncStorage"],"mappings":";;;;+BAsCSA;;;eAAAA,oDAAqB;;;+CAhCQ"}