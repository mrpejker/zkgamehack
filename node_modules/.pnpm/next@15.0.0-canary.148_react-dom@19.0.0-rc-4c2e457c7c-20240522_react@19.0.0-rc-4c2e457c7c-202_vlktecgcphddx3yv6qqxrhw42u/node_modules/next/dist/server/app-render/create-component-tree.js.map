{"version":3,"sources":["../../../src/server/app-render/create-component-tree.tsx"],"sourcesContent":["import type {\n  FlightSegmentPath,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n} from './types'\nimport React from 'react'\nimport { isClientReference } from '../../lib/client-reference'\nimport { getLayoutOrPageModule } from '../lib/app-dir-module'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport { interopDefault } from './interop-default'\nimport { parseLoaderTree } from './parse-loader-tree'\nimport type { CreateSegmentPath, AppRenderContext } from './app-render'\nimport { createComponentStylesAndScripts } from './create-component-styles-and-scripts'\nimport { getLayerAssets } from './get-layer-assets'\nimport { hasLoadingComponentInTree } from './has-loading-component-in-tree'\nimport { validateRevalidate } from '../lib/patch-fetch'\nimport { PARALLEL_ROUTE_DEFAULT_PATH } from '../../client/components/parallel-route-default'\nimport { getTracer } from '../lib/trace/tracer'\nimport { NextNodeServerSpan } from '../lib/trace/constants'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport type { LoadingModuleData } from '../../shared/lib/app-router-context.shared-runtime'\nimport type { Params } from '../../client/components/params'\n\n/**\n * Use the provided loader tree to create the React Component tree.\n */\nexport function createComponentTree(props: {\n  createSegmentPath: CreateSegmentPath\n  loaderTree: LoaderTree\n  parentParams: Params\n  rootLayoutIncluded: boolean\n  firstItem?: boolean\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  getMetadataReady: () => Promise<void>\n  ctx: AppRenderContext\n  missingSlots?: Set<string>\n  preloadCallbacks: PreloadCallbacks\n}): Promise<CacheNodeSeedData> {\n  return getTracer().trace(\n    NextNodeServerSpan.createComponentTree,\n    {\n      spanName: 'build component tree',\n    },\n    () => createComponentTreeInternal(props)\n  )\n}\n\nfunction errorMissingDefaultExport(pagePath: string, convention: string) {\n  throw new Error(\n    `The default export is not a React Component in \"${pagePath}/${convention}\"`\n  )\n}\n\nconst cacheNodeKey = 'c'\n\nasync function createComponentTreeInternal({\n  createSegmentPath,\n  loaderTree: tree,\n  parentParams,\n  firstItem,\n  rootLayoutIncluded,\n  injectedCSS,\n  injectedJS,\n  injectedFontPreloadTags,\n  getMetadataReady,\n  ctx,\n  missingSlots,\n  preloadCallbacks,\n}: {\n  createSegmentPath: CreateSegmentPath\n  loaderTree: LoaderTree\n  parentParams: Params\n  rootLayoutIncluded: boolean\n  firstItem?: boolean\n  injectedCSS: Set<string>\n  injectedJS: Set<string>\n  injectedFontPreloadTags: Set<string>\n  getMetadataReady: () => Promise<void>\n  ctx: AppRenderContext\n  missingSlots?: Set<string>\n  preloadCallbacks: PreloadCallbacks\n}): Promise<CacheNodeSeedData> {\n  const {\n    renderOpts: { nextConfigOutput, experimental },\n    staticGenerationStore,\n    componentMod: {\n      NotFoundBoundary,\n      LayoutRouter,\n      RenderFromTemplateContext,\n      ClientPageRoot,\n      createUntrackedSearchParams,\n      createDynamicallyTrackedSearchParams,\n      createDynamicallyTrackedParams,\n      serverHooks: { DynamicServerError },\n      Postpone,\n    },\n    pagePath,\n    getDynamicParamFromSegment,\n    isPrefetch,\n    query,\n  } = ctx\n\n  const { page, layoutOrPagePath, segment, components, parallelRoutes } =\n    parseLoaderTree(tree)\n\n  const { layout, template, error, loading, 'not-found': notFound } = components\n\n  const injectedCSSWithCurrentLayout = new Set(injectedCSS)\n  const injectedJSWithCurrentLayout = new Set(injectedJS)\n  const injectedFontPreloadTagsWithCurrentLayout = new Set(\n    injectedFontPreloadTags\n  )\n\n  const layerAssets = getLayerAssets({\n    preloadCallbacks,\n    ctx,\n    layoutOrPagePath,\n    injectedCSS: injectedCSSWithCurrentLayout,\n    injectedJS: injectedJSWithCurrentLayout,\n    injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n  })\n\n  const [Template, templateStyles, templateScripts] = template\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: template[1],\n        getComponent: template[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : [React.Fragment]\n\n  const [ErrorComponent, errorStyles, errorScripts] = error\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: error[1],\n        getComponent: error[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  const [Loading, loadingStyles, loadingScripts] = loading\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: loading[1],\n        getComponent: loading[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  const isLayout = typeof layout !== 'undefined'\n  const isPage = typeof page !== 'undefined'\n  const [layoutOrPageMod] = await getTracer().trace(\n    NextNodeServerSpan.getLayoutOrPageModule,\n    {\n      hideSpan: !(isLayout || isPage),\n      spanName: 'resolve segment modules',\n      attributes: {\n        'next.segment': segment,\n      },\n    },\n    () => getLayoutOrPageModule(tree)\n  )\n\n  /**\n   * Checks if the current segment is a root layout.\n   */\n  const rootLayoutAtThisLevel = isLayout && !rootLayoutIncluded\n  /**\n   * Checks if the current segment or any level above it has a root layout.\n   */\n  const rootLayoutIncludedAtThisLevelOrAbove =\n    rootLayoutIncluded || rootLayoutAtThisLevel\n\n  const [NotFound, notFoundStyles] = notFound\n    ? await createComponentStylesAndScripts({\n        ctx,\n        filePath: notFound[1],\n        getComponent: notFound[0],\n        injectedCSS: injectedCSSWithCurrentLayout,\n        injectedJS: injectedJSWithCurrentLayout,\n      })\n    : []\n\n  let dynamic = layoutOrPageMod?.dynamic\n\n  if (nextConfigOutput === 'export') {\n    if (!dynamic || dynamic === 'auto') {\n      dynamic = 'error'\n    } else if (dynamic === 'force-dynamic') {\n      // force-dynamic is always incompatible with 'export'. We must interrupt the build\n      throw new StaticGenBailoutError(\n        `Page with \\`dynamic = \"force-dynamic\"\\` couldn't be exported. \\`output: \"export\"\\` requires all pages be renderable statically because there is not runtime server to dynamic render routes in this output format. Learn more: https://nextjs.org/docs/app/building-your-application/deploying/static-exports`\n      )\n    }\n  }\n\n  if (typeof dynamic === 'string') {\n    // the nested most config wins so we only force-static\n    // if it's configured above any parent that configured\n    // otherwise\n    if (dynamic === 'error') {\n      staticGenerationStore.dynamicShouldError = true\n    } else if (dynamic === 'force-dynamic') {\n      staticGenerationStore.forceDynamic = true\n\n      // TODO: (PPR) remove this bailout once PPR is the default\n      if (\n        staticGenerationStore.isStaticGeneration &&\n        !experimental.isRoutePPREnabled\n      ) {\n        // If the postpone API isn't available, we can't postpone the render and\n        // therefore we can't use the dynamic API.\n        const err = new DynamicServerError(\n          `Page with \\`dynamic = \"force-dynamic\"\\` won't be rendered statically.`\n        )\n        staticGenerationStore.dynamicUsageDescription = err.message\n        staticGenerationStore.dynamicUsageStack = err.stack\n        throw err\n      }\n    } else {\n      staticGenerationStore.dynamicShouldError = false\n      staticGenerationStore.forceStatic = dynamic === 'force-static'\n    }\n  }\n\n  if (typeof layoutOrPageMod?.fetchCache === 'string') {\n    staticGenerationStore.fetchCache = layoutOrPageMod?.fetchCache\n  }\n\n  if (typeof layoutOrPageMod?.revalidate !== 'undefined') {\n    validateRevalidate(layoutOrPageMod?.revalidate, staticGenerationStore.route)\n  }\n\n  if (typeof layoutOrPageMod?.revalidate === 'number') {\n    ctx.defaultRevalidate = layoutOrPageMod.revalidate as number\n\n    if (\n      typeof staticGenerationStore.revalidate === 'undefined' ||\n      (typeof staticGenerationStore.revalidate === 'number' &&\n        staticGenerationStore.revalidate > ctx.defaultRevalidate)\n    ) {\n      staticGenerationStore.revalidate = ctx.defaultRevalidate\n    }\n\n    if (\n      !staticGenerationStore.forceStatic &&\n      staticGenerationStore.isStaticGeneration &&\n      ctx.defaultRevalidate === 0 &&\n      // If the postpone API isn't available, we can't postpone the render and\n      // therefore we can't use the dynamic API.\n      !experimental.isRoutePPREnabled\n    ) {\n      const dynamicUsageDescription = `revalidate: 0 configured ${segment}`\n      staticGenerationStore.dynamicUsageDescription = dynamicUsageDescription\n\n      throw new DynamicServerError(dynamicUsageDescription)\n    }\n  }\n\n  const isStaticGeneration = staticGenerationStore.isStaticGeneration\n\n  // If there's a dynamic usage error attached to the store, throw it.\n  if (staticGenerationStore.dynamicUsageErr) {\n    throw staticGenerationStore.dynamicUsageErr\n  }\n\n  const LayoutOrPage: React.ComponentType<any> | undefined = layoutOrPageMod\n    ? interopDefault(layoutOrPageMod)\n    : undefined\n\n  /**\n   * The React Component to render.\n   */\n  let Component = LayoutOrPage\n  const parallelKeys = Object.keys(parallelRoutes)\n  const hasSlotKey = parallelKeys.length > 1\n\n  // TODO-APP: This is a hack to support unmatched parallel routes, which will throw `notFound()`.\n  // This ensures that a `NotFoundBoundary` is available for when that happens,\n  // but it's not ideal, as it needlessly invokes the `NotFound` component and renders the `RootLayout` twice.\n  // We should instead look into handling the fallback behavior differently in development mode so that it doesn't\n  // rely on the `NotFound` behavior.\n  if (hasSlotKey && rootLayoutAtThisLevel && LayoutOrPage) {\n    Component = (componentProps: { params: Params }) => {\n      const NotFoundComponent = NotFound\n      const RootLayoutComponent = LayoutOrPage\n      return (\n        <NotFoundBoundary\n          notFound={\n            NotFoundComponent ? (\n              <Segment\n                isStaticGeneration={isStaticGeneration}\n                ready={getMetadataReady}\n              >\n                {layerAssets}\n                {/*\n                 * We are intentionally only forwarding params to the root layout, as passing any of the parallel route props\n                 * might trigger `notFound()`, which is not currently supported in the root layout.\n                 */}\n                <RootLayoutComponent params={componentProps.params}>\n                  {notFoundStyles}\n                  <NotFoundComponent />\n                </RootLayoutComponent>\n              </Segment>\n            ) : undefined\n          }\n        >\n          <RootLayoutComponent {...componentProps} />\n        </NotFoundBoundary>\n      )\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    const { isValidElementType } = require('next/dist/compiled/react-is')\n    if (\n      (isPage || typeof Component !== 'undefined') &&\n      !isValidElementType(Component)\n    ) {\n      errorMissingDefaultExport(pagePath, 'page')\n    }\n\n    if (\n      typeof ErrorComponent !== 'undefined' &&\n      !isValidElementType(ErrorComponent)\n    ) {\n      errorMissingDefaultExport(pagePath, 'error')\n    }\n\n    if (typeof Loading !== 'undefined' && !isValidElementType(Loading)) {\n      errorMissingDefaultExport(pagePath, 'loading')\n    }\n\n    if (typeof NotFound !== 'undefined' && !isValidElementType(NotFound)) {\n      errorMissingDefaultExport(pagePath, 'not-found')\n    }\n  }\n\n  // Handle dynamic segment params.\n  const segmentParam = getDynamicParamFromSegment(segment)\n\n  // Create object holding the parent params and current params\n  const currentParams =\n    // Handle null case where dynamic param is optional\n    segmentParam && segmentParam.value !== null\n      ? {\n          ...parentParams,\n          [segmentParam.param]: segmentParam.value,\n        }\n      : // Pass through parent params to children\n        parentParams\n\n  // Resolve the segment param\n  const actualSegment = segmentParam ? segmentParam.treeSegment : segment\n\n  //\n  // TODO: Combine this `map` traversal with the loop below that turns the array\n  // into an object.\n  const parallelRouteMap = await Promise.all(\n    Object.keys(parallelRoutes).map(\n      async (\n        parallelRouteKey\n      ): Promise<[string, React.ReactNode, CacheNodeSeedData | null]> => {\n        const isChildrenRouteKey = parallelRouteKey === 'children'\n        const currentSegmentPath: FlightSegmentPath = firstItem\n          ? [parallelRouteKey]\n          : [actualSegment, parallelRouteKey]\n\n        const parallelRoute = parallelRoutes[parallelRouteKey]\n\n        const notFoundComponent =\n          NotFound && isChildrenRouteKey ? <NotFound /> : undefined\n\n        // if we're prefetching and that there's a Loading component, we bail out\n        // otherwise we keep rendering for the prefetch.\n        // We also want to bail out if there's no Loading component in the tree.\n        let childCacheNodeSeedData: CacheNodeSeedData | null = null\n\n        if (\n          // Before PPR, the way instant navigations work in Next.js is we\n          // prefetch everything up to the first route segment that defines a\n          // loading.tsx boundary. (We do the same if there's no loading\n          // boundary in the entire tree, because we don't want to prefetch too\n          // much) The rest of the tree is defered until the actual navigation.\n          // It does not take into account whether the data is dynamic — even if\n          // the tree is completely static, it will still defer everything\n          // inside the loading boundary.\n          //\n          // This behavior predates PPR and is only relevant if the\n          // PPR flag is not enabled.\n          isPrefetch &&\n          (Loading || !hasLoadingComponentInTree(parallelRoute)) &&\n          // The approach with PPR is different — loading.tsx behaves like a\n          // regular Suspense boundary and has no special behavior.\n          //\n          // With PPR, we prefetch as deeply as possible, and only defer when\n          // dynamic data is accessed. If so, we only defer the nearest parent\n          // Suspense boundary of the dynamic data access, regardless of whether\n          // the boundary is defined by loading.tsx or a normal <Suspense>\n          // component in userspace.\n          //\n          // NOTE: In practice this usually means we'll end up prefetching more\n          // than we were before PPR, which may or may not be considered a\n          // performance regression by some apps. The plan is to address this\n          // before General Availability of PPR by introducing granular\n          // per-segment fetching, so we can reuse as much of the tree as\n          // possible during both prefetches and dynamic navigations. But during\n          // the beta period, we should be clear about this trade off in our\n          // communications.\n          !experimental.isRoutePPREnabled\n        ) {\n          // Don't prefetch this child. This will trigger a lazy fetch by the\n          // client router.\n        } else {\n          // Create the child component\n\n          if (process.env.NODE_ENV === 'development' && missingSlots) {\n            // When we detect the default fallback (which triggers a 404), we collect the missing slots\n            // to provide more helpful debug information during development mode.\n            const parsedTree = parseLoaderTree(parallelRoute)\n            if (\n              parsedTree.layoutOrPagePath?.endsWith(PARALLEL_ROUTE_DEFAULT_PATH)\n            ) {\n              missingSlots.add(parallelRouteKey)\n            }\n          }\n\n          const seedData = await createComponentTreeInternal({\n            createSegmentPath: (child) => {\n              return createSegmentPath([...currentSegmentPath, ...child])\n            },\n            loaderTree: parallelRoute,\n            parentParams: currentParams,\n            rootLayoutIncluded: rootLayoutIncludedAtThisLevelOrAbove,\n            injectedCSS: injectedCSSWithCurrentLayout,\n            injectedJS: injectedJSWithCurrentLayout,\n            injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout,\n            // getMetadataReady is used to conditionally throw. In the case of parallel routes we will have more than one page\n            // but we only want to throw on the first one.\n            getMetadataReady: isChildrenRouteKey\n              ? getMetadataReady\n              : () => Promise.resolve(),\n            ctx,\n            missingSlots,\n            preloadCallbacks,\n          })\n\n          childCacheNodeSeedData = seedData\n        }\n\n        // This is turned back into an object below.\n        return [\n          parallelRouteKey,\n          <LayoutRouter\n            parallelRouterKey={parallelRouteKey}\n            segmentPath={createSegmentPath(currentSegmentPath)}\n            // TODO-APP: Add test for loading returning `undefined`. This currently can't be tested as the `webdriver()` tab will wait for the full page to load before returning.\n            error={ErrorComponent}\n            errorStyles={errorStyles}\n            errorScripts={errorScripts}\n            template={\n              <Template>\n                <RenderFromTemplateContext />\n              </Template>\n            }\n            templateStyles={templateStyles}\n            templateScripts={templateScripts}\n            notFound={notFoundComponent}\n            notFoundStyles={notFoundStyles}\n          />,\n          childCacheNodeSeedData,\n        ]\n      }\n    )\n  )\n\n  // Convert the parallel route map into an object after all promises have been resolved.\n  let parallelRouteProps: { [key: string]: React.ReactNode } = {}\n  let parallelRouteCacheNodeSeedData: {\n    [key: string]: CacheNodeSeedData | null\n  } = {}\n  for (const parallelRoute of parallelRouteMap) {\n    const [parallelRouteKey, parallelRouteProp, flightData] = parallelRoute\n    parallelRouteProps[parallelRouteKey] = parallelRouteProp\n    parallelRouteCacheNodeSeedData[parallelRouteKey] = flightData\n  }\n\n  const loadingData: LoadingModuleData = Loading\n    ? [<Loading key=\"l\" />, loadingStyles, loadingScripts]\n    : null\n\n  // When the segment does not have a layout or page we still have to add the layout router to ensure the path holds the loading component\n  if (!Component) {\n    return [\n      actualSegment,\n      <Segment\n        key={cacheNodeKey}\n        isStaticGeneration={isStaticGeneration}\n        ready={getMetadataReady}\n      >\n        {layerAssets}\n        {parallelRouteProps.children}\n      </Segment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  }\n\n  // If force-dynamic is used and the current render supports postponing, we\n  // replace it with a node that will postpone the render. This ensures that the\n  // postpone is invoked during the react render phase and not during the next\n  // render phase.\n  // @TODO this does not actually do what it seems like it would or should do. The idea is that\n  // if we are rendering in a force-dynamic mode and we can postpone we should only make the segments\n  // that ask for force-dynamic to be dynamic, allowing other segments to still prerender. However\n  // because this comes after the children traversal and the static generation store is mutated every segment\n  // along the parent path of a force-dynamic segment will hit this condition effectively making the entire\n  // render force-dynamic. We should refactor this function so that we can correctly track which segments\n  // need to be dynamic\n  if (\n    staticGenerationStore.isStaticGeneration &&\n    staticGenerationStore.forceDynamic &&\n    experimental.isRoutePPREnabled\n  ) {\n    return [\n      actualSegment,\n      <Segment\n        key={cacheNodeKey}\n        isStaticGeneration={isStaticGeneration}\n        ready={getMetadataReady}\n      >\n        <Postpone\n          reason='dynamic = \"force-dynamic\" was used'\n          route={staticGenerationStore.route}\n        />\n        {layerAssets}\n      </Segment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  }\n\n  const isClientComponent = isClientReference(layoutOrPageMod)\n\n  // We avoid cloning this object because it gets consumed here exclusively.\n  const props: { [prop: string]: any } = parallelRouteProps\n\n  // Assign params to props\n  if (\n    process.env.NODE_ENV === 'development' &&\n    'params' in parallelRouteProps\n  ) {\n    // @TODO consider making this an error and running the check in build as well\n    console.error(\n      `\"params\" is a reserved prop in Layouts and Pages and cannot be used as the name of a parallel route in ${segment}`\n    )\n  }\n\n  if (isPage) {\n    // Assign searchParams to props if this is a page\n    let pageElement: React.ReactNode\n    if (isClientComponent) {\n      // When we are passing searchParams to a client component Page we don't want to track the dynamic access\n      // here in the RSC layer because the serialization will trigger a dynamic API usage.\n      // Instead we pass the searchParams untracked but we wrap the Page in a root client component\n      // which can among other things adds the dynamic tracking before rendering the page.\n      // @TODO make the root wrapper part of next-app-loader so we don't need the extra client component\n      props.params = currentParams\n      props.searchParams = createUntrackedSearchParams(query)\n      pageElement = <ClientPageRoot props={props} Component={Component} />\n    } else {\n      // If we are passing searchParams to a server component Page we need to track their usage in case\n      // the current render mode tracks dynamic API usage.\n      props.params = createDynamicallyTrackedParams(currentParams)\n      props.searchParams = createDynamicallyTrackedSearchParams(query)\n      pageElement = <Component {...props} />\n    }\n    return [\n      actualSegment,\n      <React.Fragment key={cacheNodeKey}>\n        <MetadataOutlet ready={getMetadataReady} />\n        <Segment\n          isStaticGeneration={isStaticGeneration}\n          ready={getMetadataReady}\n        >\n          {pageElement}\n          {layerAssets}\n        </Segment>\n      </React.Fragment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  } else {\n    props.params = createDynamicallyTrackedParams(currentParams)\n\n    // For layouts we just render the component\n    return [\n      actualSegment,\n      // It is critical that this tree render something other than `null` because the client router uses\n      // null to represent an lazy hole. The current implementation satisfies this because the two inner slots\n      // ensure there is a fragment even if both slots render null. If we ever refactor this to only render the component\n      // or similar we need to ensure there is a fragment. Long term we should move to using a Symbol to communicate\n      // a lazy hole rather than null\n      <Segment\n        key={cacheNodeKey}\n        isStaticGeneration={isStaticGeneration}\n        ready={getMetadataReady}\n      >\n        {layerAssets}\n        <Component {...props} />\n      </Segment>,\n      parallelRouteCacheNodeSeedData,\n      loadingData,\n    ]\n  }\n}\n\nasync function MetadataOutlet({\n  ready,\n}: {\n  ready: () => Promise<void> & { status?: string; value?: unknown }\n}) {\n  const r = ready()\n  // We can avoid a extra microtask by unwrapping the instrumented promise directly if available.\n  if (r.status === 'rejected') {\n    throw r.value\n  } else if (r.status !== 'fulfilled') {\n    await r\n  }\n  return null\n}\n\nasync function Segment({\n  isStaticGeneration,\n  ready,\n  children,\n}: {\n  isStaticGeneration: boolean\n  ready?: () => Promise<void>\n  children: React.ReactNode\n}) {\n  if (isStaticGeneration && ready) {\n    // During static generation we wait for metadata to complete before rendering segments.\n    // This is slower but it allows us to ensure that metadata is finished before we start\n    // rendering the segment which can synchronously abort the render in certain circumstances\n    try {\n      await ready()\n    } catch {\n      // we'll let the MetadataOutlet component render with the page error to let the right\n      // error boundary catch this error\n    }\n  }\n  return children\n}\n"],"names":["createComponentTree","props","getTracer","trace","NextNodeServerSpan","spanName","createComponentTreeInternal","errorMissingDefaultExport","pagePath","convention","Error","cacheNodeKey","createSegmentPath","loaderTree","tree","parentParams","firstItem","rootLayoutIncluded","injectedCSS","injectedJS","injectedFontPreloadTags","getMetadataReady","ctx","missingSlots","preloadCallbacks","renderOpts","nextConfigOutput","experimental","staticGenerationStore","componentMod","NotFoundBoundary","LayoutRouter","RenderFromTemplateContext","ClientPageRoot","createUntrackedSearchParams","createDynamicallyTrackedSearchParams","createDynamicallyTrackedParams","serverHooks","DynamicServerError","Postpone","getDynamicParamFromSegment","isPrefetch","query","page","layoutOrPagePath","segment","components","parallelRoutes","parseLoaderTree","layout","template","error","loading","notFound","injectedCSSWithCurrentLayout","Set","injectedJSWithCurrentLayout","injectedFontPreloadTagsWithCurrentLayout","layerAssets","getLayerAssets","Template","templateStyles","templateScripts","createComponentStylesAndScripts","filePath","getComponent","React","Fragment","ErrorComponent","errorStyles","errorScripts","Loading","loadingStyles","loadingScripts","isLayout","isPage","layoutOrPageMod","getLayoutOrPageModule","hideSpan","attributes","rootLayoutAtThisLevel","rootLayoutIncludedAtThisLevelOrAbove","NotFound","notFoundStyles","dynamic","StaticGenBailoutError","dynamicShouldError","forceDynamic","isStaticGeneration","isRoutePPREnabled","err","dynamicUsageDescription","message","dynamicUsageStack","stack","forceStatic","fetchCache","revalidate","validateRevalidate","route","defaultRevalidate","dynamicUsageErr","LayoutOrPage","interopDefault","undefined","Component","parallelKeys","Object","keys","hasSlotKey","length","componentProps","NotFoundComponent","RootLayoutComponent","Segment","ready","params","process","env","NODE_ENV","isValidElementType","require","segmentParam","currentParams","value","param","actualSegment","treeSegment","parallelRouteMap","Promise","all","map","parallelRouteKey","isChildrenRouteKey","currentSegmentPath","parallelRoute","notFoundComponent","childCacheNodeSeedData","hasLoadingComponentInTree","parsedTree","endsWith","PARALLEL_ROUTE_DEFAULT_PATH","add","seedData","child","resolve","parallelRouterKey","segmentPath","parallelRouteProps","parallelRouteCacheNodeSeedData","parallelRouteProp","flightData","loadingData","children","reason","isClientComponent","isClientReference","console","pageElement","searchParams","MetadataOutlet","r","status"],"mappings":"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"}