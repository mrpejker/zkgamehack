{"version":3,"sources":["../../../src/server/lib/patch-fetch.ts"],"sourcesContent":["import type {\n  StaticGenerationAsyncStorage,\n  StaticGenerationStore,\n} from '../../client/components/static-generation-async-storage.external'\n\nimport { AppRenderSpan, NextNodeServerSpan } from './trace/constants'\nimport { getTracer, SpanKind } from './trace/tracer'\nimport {\n  CACHE_ONE_YEAR,\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_TAG_MAX_ITEMS,\n  NEXT_CACHE_TAG_MAX_LENGTH,\n} from '../../lib/constants'\nimport { markCurrentScopeAsDynamic } from '../app-render/dynamic-rendering'\nimport type { FetchMetric } from '../base-http'\nimport { createDedupeFetch } from './dedupe-fetch'\nimport type {\n  RequestAsyncStorage,\n  RequestStore,\n} from '../../client/components/request-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n} from '../response-cache'\nimport type { PrerenderAsyncStorage } from '../app-render/prerender-async-storage.external'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\ntype Fetcher = typeof fetch\n\ntype PatchedFetcher = Fetcher & {\n  readonly __nextPatched: true\n  readonly __nextGetStaticStore: () => StaticGenerationAsyncStorage\n  readonly _nextOriginalFetch: Fetcher\n}\n\nexport const NEXT_PATCH_SYMBOL = Symbol.for('next-patch')\n\nfunction isFetchPatched() {\n  return (globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] === true\n}\n\nexport function validateRevalidate(\n  revalidateVal: unknown,\n  route: string\n): undefined | number | false {\n  try {\n    let normalizedRevalidate: false | number | undefined = undefined\n\n    if (revalidateVal === false) {\n      normalizedRevalidate = revalidateVal\n    } else if (\n      typeof revalidateVal === 'number' &&\n      !isNaN(revalidateVal) &&\n      revalidateVal > -1\n    ) {\n      normalizedRevalidate = revalidateVal\n    } else if (typeof revalidateVal !== 'undefined') {\n      throw new Error(\n        `Invalid revalidate value \"${revalidateVal}\" on \"${route}\", must be a non-negative number or \"false\"`\n      )\n    }\n    return normalizedRevalidate\n  } catch (err: any) {\n    // handle client component error from attempting to check revalidate value\n    if (err instanceof Error && err.message.includes('Invalid revalidate')) {\n      throw err\n    }\n    return undefined\n  }\n}\n\nexport function validateTags(tags: any[], description: string) {\n  const validTags: string[] = []\n  const invalidTags: Array<{\n    tag: any\n    reason: string\n  }> = []\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i]\n\n    if (typeof tag !== 'string') {\n      invalidTags.push({ tag, reason: 'invalid type, must be a string' })\n    } else if (tag.length > NEXT_CACHE_TAG_MAX_LENGTH) {\n      invalidTags.push({\n        tag,\n        reason: `exceeded max length of ${NEXT_CACHE_TAG_MAX_LENGTH}`,\n      })\n    } else {\n      validTags.push(tag)\n    }\n\n    if (validTags.length > NEXT_CACHE_TAG_MAX_ITEMS) {\n      console.warn(\n        `Warning: exceeded max tag count for ${description}, dropped tags:`,\n        tags.slice(i).join(', ')\n      )\n      break\n    }\n  }\n\n  if (invalidTags.length > 0) {\n    console.warn(`Warning: invalid tags passed to ${description}: `)\n\n    for (const { tag, reason } of invalidTags) {\n      console.log(`tag: \"${tag}\" ${reason}`)\n    }\n  }\n  return validTags\n}\n\nconst getDerivedTags = (pathname: string): string[] => {\n  const derivedTags: string[] = [`/layout`]\n\n  // we automatically add the current path segments as tags\n  // for revalidatePath handling\n  if (pathname.startsWith('/')) {\n    const pathnameParts = pathname.split('/')\n\n    for (let i = 1; i < pathnameParts.length + 1; i++) {\n      let curPathname = pathnameParts.slice(0, i).join('/')\n\n      if (curPathname) {\n        // all derived tags other than the page are layout tags\n        if (!curPathname.endsWith('/page') && !curPathname.endsWith('/route')) {\n          curPathname = `${curPathname}${\n            !curPathname.endsWith('/') ? '/' : ''\n          }layout`\n        }\n        derivedTags.push(curPathname)\n      }\n    }\n  }\n  return derivedTags\n}\n\nexport function addImplicitTags(\n  staticGenerationStore: StaticGenerationStore,\n  requestStore: RequestStore | undefined\n) {\n  const newTags: string[] = []\n  const { page, fallbackRouteParams } = staticGenerationStore\n  const hasFallbackRouteParams =\n    fallbackRouteParams && fallbackRouteParams.size > 0\n\n  // Ini the tags array if it doesn't exist.\n  staticGenerationStore.tags ??= []\n\n  // Add the derived tags from the page.\n  const derivedTags = getDerivedTags(page)\n  for (let tag of derivedTags) {\n    tag = `${NEXT_CACHE_IMPLICIT_TAG_ID}${tag}`\n    if (!staticGenerationStore.tags?.includes(tag)) {\n      staticGenerationStore.tags.push(tag)\n    }\n    newTags.push(tag)\n  }\n\n  // Add the tags from the pathname. If the route has unknown params, we don't\n  // want to add the pathname as a tag, as it will be invalid.\n  if (requestStore?.url.pathname && !hasFallbackRouteParams) {\n    const tag = `${NEXT_CACHE_IMPLICIT_TAG_ID}${requestStore.url.pathname}`\n    if (!staticGenerationStore.tags?.includes(tag)) {\n      staticGenerationStore.tags.push(tag)\n    }\n    newTags.push(tag)\n  }\n\n  return newTags\n}\n\nfunction trackFetchMetric(\n  staticGenerationStore: StaticGenerationStore,\n  ctx: Omit<FetchMetric, 'end' | 'idx'>\n) {\n  // If the static generation store is not available, we can't track the fetch\n  if (!staticGenerationStore) return\n  if (staticGenerationStore.requestEndedState?.ended) return\n\n  const isDebugBuild =\n    (!!process.env.NEXT_DEBUG_BUILD ||\n      process.env.NEXT_SSG_FETCH_METRICS === '1') &&\n    staticGenerationStore.isStaticGeneration\n  const isDevelopment = process.env.NODE_ENV === 'development'\n\n  if (\n    // The only time we want to track fetch metrics outside of development is when\n    // we are performing a static generation & we are in debug mode.\n    !isDebugBuild &&\n    !isDevelopment\n  ) {\n    return\n  }\n\n  staticGenerationStore.fetchMetrics ??= []\n\n  staticGenerationStore.fetchMetrics.push({\n    ...ctx,\n    end: Date.now(),\n    idx: staticGenerationStore.nextFetchId || 0,\n  })\n}\n\ninterface PatchableModule {\n  staticGenerationAsyncStorage: StaticGenerationAsyncStorage\n  requestAsyncStorage: RequestAsyncStorage\n  prerenderAsyncStorage: PrerenderAsyncStorage\n}\n\nexport function createPatchedFetcher(\n  originFetch: Fetcher,\n  {\n    staticGenerationAsyncStorage,\n    requestAsyncStorage,\n    prerenderAsyncStorage,\n  }: PatchableModule\n): PatchedFetcher {\n  // Create the patched fetch function. We don't set the type here, as it's\n  // verified as the return value of this function.\n  const patched = async (\n    input: RequestInfo | URL,\n    init: RequestInit | undefined\n  ) => {\n    let url: URL | undefined\n    try {\n      url = new URL(input instanceof Request ? input.url : input)\n      url.username = ''\n      url.password = ''\n    } catch {\n      // Error caused by malformed URL should be handled by native fetch\n      url = undefined\n    }\n    const fetchUrl = url?.href ?? ''\n    const fetchStart = Date.now()\n    const method = init?.method?.toUpperCase() || 'GET'\n\n    // Do create a new span trace for internal fetches in the\n    // non-verbose mode.\n    const isInternal = (init?.next as any)?.internal === true\n    const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === '1'\n\n    const staticGenerationStore = staticGenerationAsyncStorage.getStore()\n\n    const result = getTracer().trace(\n      isInternal ? NextNodeServerSpan.internalFetch : AppRenderSpan.fetch,\n      {\n        hideSpan,\n        kind: SpanKind.CLIENT,\n        spanName: ['fetch', method, fetchUrl].filter(Boolean).join(' '),\n        attributes: {\n          'http.url': fetchUrl,\n          'http.method': method,\n          'net.peer.name': url?.hostname,\n          'net.peer.port': url?.port || undefined,\n        },\n      },\n      async () => {\n        // If this is an internal fetch, we should not do any special treatment.\n        if (isInternal) {\n          return originFetch(input, init)\n        }\n\n        const requestStore = requestAsyncStorage.getStore()\n\n        // If the staticGenerationStore is not available, we can't do any\n        // special treatment of fetch, therefore fallback to the original\n        // fetch implementation.\n        if (!staticGenerationStore) {\n          return originFetch(input, init)\n        }\n\n        // We should also fallback to the original fetch implementation if we\n        // are in draft mode, it does not constitute a static generation.\n        if (staticGenerationStore.isDraftMode) {\n          return originFetch(input, init)\n        }\n\n        const isRequestInput =\n          input &&\n          typeof input === 'object' &&\n          typeof (input as Request).method === 'string'\n\n        const getRequestMeta = (field: string) => {\n          // If request input is present but init is not, retrieve from input first.\n          const value = (init as any)?.[field]\n          return value || (isRequestInput ? (input as any)[field] : null)\n        }\n\n        let finalRevalidate: number | undefined | false = undefined\n        const getNextField = (field: 'revalidate' | 'tags') => {\n          return typeof init?.next?.[field] !== 'undefined'\n            ? init?.next?.[field]\n            : isRequestInput\n              ? (input as any).next?.[field]\n              : undefined\n        }\n        // RequestInit doesn't keep extra fields e.g. next so it's\n        // only available if init is used separate\n        let currentFetchRevalidate = getNextField('revalidate')\n        const tags: string[] = validateTags(\n          getNextField('tags') || [],\n          `fetch ${input.toString()}`\n        )\n\n        if (Array.isArray(tags)) {\n          if (!staticGenerationStore.tags) {\n            staticGenerationStore.tags = []\n          }\n          for (const tag of tags) {\n            if (!staticGenerationStore.tags.includes(tag)) {\n              staticGenerationStore.tags.push(tag)\n            }\n          }\n        }\n        const implicitTags = addImplicitTags(\n          staticGenerationStore,\n          requestStore\n        )\n\n        const pageFetchCacheMode = staticGenerationStore.fetchCache\n        const isUsingNoStore = !!staticGenerationStore.isUnstableNoStore\n\n        let currentFetchCacheConfig = getRequestMeta('cache')\n        let cacheReason = ''\n        let cacheWarning: string | undefined\n\n        if (\n          typeof currentFetchCacheConfig === 'string' &&\n          typeof currentFetchRevalidate !== 'undefined'\n        ) {\n          // when providing fetch with a Request input, it'll automatically set a cache value of 'default'\n          // we only want to warn if the user is explicitly setting a cache value\n          if (!(isRequestInput && currentFetchCacheConfig === 'default')) {\n            cacheWarning = `Specified \"cache: ${currentFetchCacheConfig}\" and \"revalidate: ${currentFetchRevalidate}\", only one should be specified.`\n          }\n          currentFetchCacheConfig = undefined\n        }\n\n        if (currentFetchCacheConfig === 'force-cache') {\n          currentFetchRevalidate = false\n        } else if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store' ||\n          pageFetchCacheMode === 'force-no-store' ||\n          pageFetchCacheMode === 'only-no-store' ||\n          // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,\n          // we shouldn't consider caching the fetch. This is because the `dynamic` cache\n          // is considered a \"top-level\" cache mode, whereas something like `fetchCache` is more\n          // fine-grained. Top-level modes are responsible for setting reasonable defaults for the\n          // other configurations.\n          (!pageFetchCacheMode && staticGenerationStore.forceDynamic)\n        ) {\n          currentFetchRevalidate = 0\n        }\n\n        if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store'\n        ) {\n          cacheReason = `cache: ${currentFetchCacheConfig}`\n        }\n\n        finalRevalidate = validateRevalidate(\n          currentFetchRevalidate,\n          staticGenerationStore.route\n        )\n\n        const _headers = getRequestMeta('headers')\n        const initHeaders: Headers =\n          typeof _headers?.get === 'function'\n            ? _headers\n            : new Headers(_headers || {})\n\n        const hasUnCacheableHeader =\n          initHeaders.get('authorization') || initHeaders.get('cookie')\n\n        const isUnCacheableMethod = !['get', 'head'].includes(\n          getRequestMeta('method')?.toLowerCase() || 'get'\n        )\n\n        /**\n         * We automatically disable fetch caching under the following conditions:\n         * - Fetch cache configs are not set. Specifically:\n         *    - A page fetch cache mode is not set (export const fetchCache=...)\n         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))\n         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))\n         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())\n         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)\n         */\n        const hasNoExplicitCacheConfig =\n          // eslint-disable-next-line eqeqeq\n          pageFetchCacheMode == undefined &&\n          // eslint-disable-next-line eqeqeq\n          currentFetchCacheConfig == undefined &&\n          // eslint-disable-next-line eqeqeq\n          currentFetchRevalidate == undefined\n        const autoNoCache =\n          // this condition is hit for null/undefined\n          // eslint-disable-next-line eqeqeq\n          (hasNoExplicitCacheConfig &&\n            // we disable automatic no caching behavior during build time SSG so that we can still\n            // leverage the fetch cache between SSG workers\n            !staticGenerationStore.isPrerendering) ||\n          ((hasUnCacheableHeader || isUnCacheableMethod) &&\n            staticGenerationStore.revalidate === 0)\n\n        switch (pageFetchCacheMode) {\n          case 'force-no-store': {\n            cacheReason = 'fetchCache = force-no-store'\n            break\n          }\n          case 'only-no-store': {\n            if (\n              currentFetchCacheConfig === 'force-cache' ||\n              (typeof finalRevalidate !== 'undefined' &&\n                (finalRevalidate === false || finalRevalidate > 0))\n            ) {\n              throw new Error(\n                `cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`\n              )\n            }\n            cacheReason = 'fetchCache = only-no-store'\n            break\n          }\n          case 'only-cache': {\n            if (currentFetchCacheConfig === 'no-store') {\n              throw new Error(\n                `cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`\n              )\n            }\n            break\n          }\n          case 'force-cache': {\n            if (\n              typeof currentFetchRevalidate === 'undefined' ||\n              currentFetchRevalidate === 0\n            ) {\n              cacheReason = 'fetchCache = force-cache'\n              finalRevalidate = false\n            }\n            break\n          }\n          default:\n          // sometimes we won't match the above cases. the reason we don't move\n          // everything to this switch is the use of autoNoCache which is not a fetchCacheMode\n          // I suspect this could be unified with fetchCacheMode however in which case we could\n          // simplify the switch case and ensure we have an exhaustive switch handling all modes\n        }\n\n        if (typeof finalRevalidate === 'undefined') {\n          if (pageFetchCacheMode === 'default-cache' && !isUsingNoStore) {\n            finalRevalidate = false\n            cacheReason = 'fetchCache = default-cache'\n          } else if (pageFetchCacheMode === 'default-no-store') {\n            finalRevalidate = 0\n            cacheReason = 'fetchCache = default-no-store'\n          } else if (isUsingNoStore) {\n            finalRevalidate = 0\n            cacheReason = 'noStore call'\n          } else if (autoNoCache) {\n            finalRevalidate = 0\n            cacheReason = 'auto no cache'\n          } else {\n            // TODO: should we consider this case an invariant?\n            cacheReason = 'auto cache'\n            finalRevalidate =\n              typeof staticGenerationStore.revalidate === 'boolean' ||\n              typeof staticGenerationStore.revalidate === 'undefined'\n                ? false\n                : staticGenerationStore.revalidate\n          }\n        } else if (!cacheReason) {\n          cacheReason = `revalidate: ${finalRevalidate}`\n        }\n\n        if (\n          // when force static is configured we don't bail from\n          // `revalidate: 0` values\n          !(staticGenerationStore.forceStatic && finalRevalidate === 0) &&\n          // we don't consider autoNoCache to switch to dynamic for ISR\n          !autoNoCache &&\n          // If the revalidate value isn't currently set or the value is less\n          // than the current revalidate value, we should update the revalidate\n          // value.\n          (typeof staticGenerationStore.revalidate === 'undefined' ||\n            (typeof finalRevalidate === 'number' &&\n              (staticGenerationStore.revalidate === false ||\n                (typeof staticGenerationStore.revalidate === 'number' &&\n                  finalRevalidate < staticGenerationStore.revalidate))))\n        ) {\n          // If we were setting the revalidate value to 0, we should try to\n          // postpone instead first.\n          if (finalRevalidate === 0) {\n            markCurrentScopeAsDynamic(\n              staticGenerationStore,\n              `revalidate: 0 fetch ${input} ${staticGenerationStore.route}`\n            )\n          }\n\n          staticGenerationStore.revalidate = finalRevalidate\n        }\n\n        const isCacheableRevalidate =\n          (typeof finalRevalidate === 'number' && finalRevalidate > 0) ||\n          finalRevalidate === false\n\n        let cacheKey: string | undefined\n        const { incrementalCache } = staticGenerationStore\n\n        if (\n          incrementalCache &&\n          (isCacheableRevalidate || requestStore?.serverComponentsHmrCache)\n        ) {\n          try {\n            cacheKey = await incrementalCache.generateCacheKey(\n              fetchUrl,\n              isRequestInput ? (input as RequestInit) : init\n            )\n          } catch (err) {\n            console.error(`Failed to generate cache key for`, input)\n          }\n        }\n\n        const fetchIdx = staticGenerationStore.nextFetchId ?? 1\n        staticGenerationStore.nextFetchId = fetchIdx + 1\n\n        const normalizedRevalidate =\n          typeof finalRevalidate !== 'number' ? CACHE_ONE_YEAR : finalRevalidate\n\n        let handleUnlock = () => Promise.resolve()\n\n        const doOriginalFetch = async (\n          isStale?: boolean,\n          cacheReasonOverride?: string\n        ) => {\n          const requestInputFields = [\n            'cache',\n            'credentials',\n            'headers',\n            'integrity',\n            'keepalive',\n            'method',\n            'mode',\n            'redirect',\n            'referrer',\n            'referrerPolicy',\n            'window',\n            'duplex',\n\n            // don't pass through signal when revalidating\n            ...(isStale ? [] : ['signal']),\n          ]\n\n          if (isRequestInput) {\n            const reqInput: Request = input as any\n            const reqOptions: RequestInit = {\n              body: (reqInput as any)._ogBody || reqInput.body,\n            }\n\n            for (const field of requestInputFields) {\n              // @ts-expect-error custom fields\n              reqOptions[field] = reqInput[field]\n            }\n            input = new Request(reqInput.url, reqOptions)\n          } else if (init) {\n            const { _ogBody, body, signal, ...otherInput } =\n              init as RequestInit & { _ogBody?: any }\n            init = {\n              ...otherInput,\n              body: _ogBody || body,\n              signal: isStale ? undefined : signal,\n            }\n          }\n\n          // add metadata to init without editing the original\n          const clonedInit = {\n            ...init,\n            next: { ...init?.next, fetchType: 'origin', fetchIdx },\n          }\n\n          return originFetch(input, clonedInit).then(async (res) => {\n            if (!isStale) {\n              trackFetchMetric(staticGenerationStore, {\n                start: fetchStart,\n                url: fetchUrl,\n                cacheReason: cacheReasonOverride || cacheReason,\n                cacheStatus:\n                  finalRevalidate === 0 || cacheReasonOverride\n                    ? 'skip'\n                    : 'miss',\n                cacheWarning,\n                status: res.status,\n                method: clonedInit.method || 'GET',\n              })\n            }\n            if (\n              res.status === 200 &&\n              incrementalCache &&\n              cacheKey &&\n              (isCacheableRevalidate || requestStore?.serverComponentsHmrCache)\n            ) {\n              if (prerenderStore) {\n                // We are prerendering at build time or revalidate time so we need to\n                // buffer the response so we can guarantee it can be read in a microtask\n\n                const bodyBuffer = await res.arrayBuffer()\n\n                const fetchedData = {\n                  headers: Object.fromEntries(res.headers.entries()),\n                  body: Buffer.from(bodyBuffer).toString('base64'),\n                  status: res.status,\n                  url: res.url,\n                }\n\n                // We can skip checking the serverComponentsHmrCache because we aren't in\n                // dev mode.\n\n                await incrementalCache.set(\n                  cacheKey,\n                  {\n                    kind: CachedRouteKind.FETCH,\n                    data: fetchedData,\n                    revalidate: normalizedRevalidate,\n                  },\n                  {\n                    fetchCache: true,\n                    revalidate: finalRevalidate,\n                    fetchUrl,\n                    fetchIdx,\n                    tags,\n                  }\n                )\n                await handleUnlock()\n\n                // We we return a new Response to the caller.\n                return new Response(bodyBuffer, {\n                  headers: res.headers,\n                  status: res.status,\n                  statusText: res.statusText,\n                })\n              } else {\n                // We are dynamically rendering including dev mode. We want to return\n                // the response to the caller as soon  as possible because it might stream\n                // over a very long time.\n                res\n                  .clone()\n                  .arrayBuffer()\n                  .then(async (arrayBuffer) => {\n                    const bodyBuffer = Buffer.from(arrayBuffer)\n\n                    const fetchedData = {\n                      headers: Object.fromEntries(res.headers.entries()),\n                      body: bodyBuffer.toString('base64'),\n                      status: res.status,\n                      url: res.url,\n                    }\n\n                    requestStore?.serverComponentsHmrCache?.set(\n                      cacheKey,\n                      fetchedData\n                    )\n\n                    if (isCacheableRevalidate) {\n                      await incrementalCache.set(\n                        cacheKey,\n                        {\n                          kind: CachedRouteKind.FETCH,\n                          data: fetchedData,\n                          revalidate: normalizedRevalidate,\n                        },\n                        {\n                          fetchCache: true,\n                          revalidate: finalRevalidate,\n                          fetchUrl,\n                          fetchIdx,\n                          tags,\n                        }\n                      )\n                    }\n                  })\n                  .catch((error) =>\n                    console.warn(`Failed to set fetch cache`, input, error)\n                  )\n                  .finally(handleUnlock)\n\n                return res\n              }\n            }\n\n            return res\n          })\n        }\n\n        let cacheReasonOverride\n        let isForegroundRevalidate = false\n        let isHmrRefreshCache = false\n\n        if (cacheKey && incrementalCache) {\n          let cachedFetchData: CachedFetchData | undefined\n\n          if (\n            requestStore?.isHmrRefresh &&\n            requestStore.serverComponentsHmrCache\n          ) {\n            cachedFetchData =\n              requestStore.serverComponentsHmrCache.get(cacheKey)\n\n            isHmrRefreshCache = true\n          }\n\n          if (isCacheableRevalidate && !cachedFetchData) {\n            handleUnlock = await incrementalCache.lock(cacheKey)\n            const entry = staticGenerationStore.isOnDemandRevalidate\n              ? null\n              : await incrementalCache.get(cacheKey, {\n                  kind: IncrementalCacheKind.FETCH,\n                  revalidate: finalRevalidate,\n                  fetchUrl,\n                  fetchIdx,\n                  tags,\n                  softTags: implicitTags,\n                  isFallback: false,\n                })\n\n            if (hasNoExplicitCacheConfig) {\n              // We sometimes use the cache to dedupe fetches that do not specify a cache configuration\n              // In these cases we want to make sure we still exclude them from prerenders if dynamicIO is on\n              // so we introduce an artificial Task boundary here.\n              const prerenderStore = prerenderAsyncStorage.getStore()\n              if (prerenderStore) {\n                await waitAtLeastOneReactRenderTask()\n              }\n            }\n\n            if (entry) {\n              await handleUnlock()\n            } else {\n              // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n              cacheReasonOverride = 'cache-control: no-cache (hard refresh)'\n            }\n\n            if (entry?.value && entry.value.kind === CachedRouteKind.FETCH) {\n              // when stale and is revalidating we wait for fresh data\n              // so the revalidated entry has the updated data\n              if (staticGenerationStore.isRevalidate && entry.isStale) {\n                isForegroundRevalidate = true\n              } else {\n                if (entry.isStale) {\n                  staticGenerationStore.pendingRevalidates ??= {}\n                  if (!staticGenerationStore.pendingRevalidates[cacheKey]) {\n                    staticGenerationStore.pendingRevalidates[cacheKey] =\n                      doOriginalFetch(true)\n                        .catch(console.error)\n                        .finally(() => {\n                          staticGenerationStore.pendingRevalidates ??= {}\n                          delete staticGenerationStore.pendingRevalidates[\n                            cacheKey || ''\n                          ]\n                        })\n                  }\n                }\n\n                cachedFetchData = entry.value.data\n              }\n            }\n          }\n\n          if (cachedFetchData) {\n            trackFetchMetric(staticGenerationStore, {\n              start: fetchStart,\n              url: fetchUrl,\n              cacheReason,\n              cacheStatus: isHmrRefreshCache ? 'hmr' : 'hit',\n              cacheWarning,\n              status: cachedFetchData.status || 200,\n              method: init?.method || 'GET',\n            })\n\n            const response = new Response(\n              Buffer.from(cachedFetchData.body, 'base64'),\n              {\n                headers: cachedFetchData.headers,\n                status: cachedFetchData.status,\n              }\n            )\n\n            Object.defineProperty(response, 'url', {\n              value: cachedFetchData.url,\n            })\n\n            return response\n          }\n        }\n\n        if (\n          staticGenerationStore.isStaticGeneration &&\n          init &&\n          typeof init === 'object'\n        ) {\n          const { cache } = init\n\n          // Delete `cache` property as Cloudflare Workers will throw an error\n          if (isEdgeRuntime) delete init.cache\n\n          if (cache === 'no-store') {\n            // If enabled, we should bail out of static generation.\n            markCurrentScopeAsDynamic(\n              staticGenerationStore,\n              `no-store fetch ${input} ${staticGenerationStore.route}`\n            )\n          }\n\n          const hasNextConfig = 'next' in init\n          const { next = {} } = init\n          if (\n            typeof next.revalidate === 'number' &&\n            (typeof staticGenerationStore.revalidate === 'undefined' ||\n              (typeof staticGenerationStore.revalidate === 'number' &&\n                next.revalidate < staticGenerationStore.revalidate))\n          ) {\n            if (next.revalidate === 0) {\n              // If enabled, we should bail out of static generation.\n              markCurrentScopeAsDynamic(\n                staticGenerationStore,\n                `revalidate: 0 fetch ${input} ${staticGenerationStore.route}`\n              )\n            }\n\n            if (!staticGenerationStore.forceStatic || next.revalidate !== 0) {\n              staticGenerationStore.revalidate = next.revalidate\n            }\n          }\n          if (hasNextConfig) delete init.next\n        }\n\n        // if we are revalidating the whole page via time or on-demand and\n        // the fetch cache entry is stale we should still de-dupe the\n        // origin hit if it's a cache-able entry\n        if (cacheKey && isForegroundRevalidate) {\n          const pendingRevalidateKey = cacheKey\n          staticGenerationStore.pendingRevalidates ??= {}\n          const pendingRevalidate =\n            staticGenerationStore.pendingRevalidates[pendingRevalidateKey]\n\n          if (pendingRevalidate) {\n            const revalidatedResult: {\n              body: ArrayBuffer\n              headers: Headers\n              status: number\n              statusText: string\n            } = await pendingRevalidate\n            return new Response(revalidatedResult.body, {\n              headers: revalidatedResult.headers,\n              status: revalidatedResult.status,\n              statusText: revalidatedResult.statusText,\n            })\n          }\n\n          /**\n           * We used to just resolve the Response and clone it however for static generation\n           * with dynamicIO we need the response to be able to be resolved in a microtask\n           * and Response#clone() will never have a body that can resolve in a microtask in node (as observed through experimentation)\n           * So instead we await the body and then when it is available we construct manually\n           * cloned Response objects with the body as an ArrayBuffer. This will be resolvable in\n           * a microtask making it compatiable with dynamicIO\n           */\n          const pendingResponse = doOriginalFetch(true, cacheReasonOverride)\n          const nextRevalidate = pendingResponse\n            .then(async (response) => {\n              return {\n                body: await response.arrayBuffer(),\n                headers: response.headers,\n                status: response.status,\n                statusText: response.statusText,\n              }\n            })\n            .finally(() => {\n              staticGenerationStore.pendingRevalidates ??= {}\n              delete staticGenerationStore.pendingRevalidates[\n                pendingRevalidateKey\n              ]\n            })\n          nextRevalidate.catch(() => {})\n          staticGenerationStore.pendingRevalidates[pendingRevalidateKey] =\n            nextRevalidate\n          return (await pendingResponse).clone()\n        } else {\n          return doOriginalFetch(false, cacheReasonOverride)\n        }\n      }\n    )\n\n    const prerenderStore = prerenderAsyncStorage.getStore()\n    if (prerenderStore && prerenderStore.cacheSignal) {\n      // During static generation we track cache reads so we can reason about when they fill\n      const cacheSignal = prerenderStore.cacheSignal\n      cacheSignal.beginRead()\n      try {\n        return await result\n      } finally {\n        cacheSignal.endRead()\n      }\n    } else {\n      return result\n    }\n  }\n\n  // Attach the necessary properties to the patched fetch function.\n  // We don't use this to determine if the fetch function has been patched,\n  // but for external consumers to determine if the fetch function has been\n  // patched.\n  patched.__nextPatched = true as const\n  patched.__nextGetStaticStore = () => staticGenerationAsyncStorage\n  patched._nextOriginalFetch = originFetch\n  ;(globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] = true\n\n  return patched\n}\n// we patch fetch to collect cache information used for\n// determining if a page is static or not\nexport function patchFetch(options: PatchableModule) {\n  // If we've already patched fetch, we should not patch it again.\n  if (isFetchPatched()) return\n\n  // Grab the original fetch function. We'll attach this so we can use it in\n  // the patched fetch function.\n  const original = createDedupeFetch(globalThis.fetch)\n\n  // Set the global fetch to the patched fetch.\n  globalThis.fetch = createPatchedFetcher(original, options)\n}\n"],"names":["NEXT_PATCH_SYMBOL","addImplicitTags","createPatchedFetcher","patchFetch","validateRevalidate","validateTags","isEdgeRuntime","process","env","NEXT_RUNTIME","Symbol","for","isFetchPatched","globalThis","revalidateVal","route","normalizedRevalidate","undefined","isNaN","Error","err","message","includes","tags","description","validTags","invalidTags","i","length","tag","push","reason","NEXT_CACHE_TAG_MAX_LENGTH","NEXT_CACHE_TAG_MAX_ITEMS","console","warn","slice","join","log","getDerivedTags","pathname","derivedTags","startsWith","pathnameParts","split","curPathname","endsWith","staticGenerationStore","requestStore","newTags","page","fallbackRouteParams","hasFallbackRouteParams","size","NEXT_CACHE_IMPLICIT_TAG_ID","url","trackFetchMetric","ctx","requestEndedState","ended","isDebugBuild","NEXT_DEBUG_BUILD","NEXT_SSG_FETCH_METRICS","isStaticGeneration","isDevelopment","NODE_ENV","fetchMetrics","end","Date","now","idx","nextFetchId","originFetch","staticGenerationAsyncStorage","requestAsyncStorage","prerenderAsyncStorage","patched","input","init","URL","Request","username","password","fetchUrl","href","fetchStart","method","toUpperCase","isInternal","next","internal","hideSpan","NEXT_OTEL_FETCH_DISABLED","getStore","result","getTracer","trace","NextNodeServerSpan","internalFetch","AppRenderSpan","fetch","kind","SpanKind","CLIENT","spanName","filter","Boolean","attributes","hostname","port","getRequestMeta","isDraftMode","isRequestInput","field","value","finalRevalidate","getNextField","currentFetchRevalidate","toString","Array","isArray","implicitTags","pageFetchCacheMode","fetchCache","isUsingNoStore","isUnstableNoStore","currentFetchCacheConfig","cacheReason","cacheWarning","forceDynamic","_headers","initHeaders","get","Headers","hasUnCacheableHeader","isUnCacheableMethod","toLowerCase","hasNoExplicitCacheConfig","autoNoCache","isPrerendering","revalidate","forceStatic","markCurrentScopeAsDynamic","isCacheableRevalidate","cacheKey","incrementalCache","serverComponentsHmrCache","generateCacheKey","error","fetchIdx","CACHE_ONE_YEAR","handleUnlock","Promise","resolve","doOriginalFetch","isStale","cacheReasonOverride","requestInputFields","reqInput","reqOptions","body","_ogBody","signal","otherInput","clonedInit","fetchType","then","res","start","cacheStatus","status","prerenderStore","bodyBuffer","arrayBuffer","fetchedData","headers","Object","fromEntries","entries","Buffer","from","set","CachedRouteKind","FETCH","data","Response","statusText","clone","catch","finally","isForegroundRevalidate","isHmrRefreshCache","cachedFetchData","isHmrRefresh","lock","entry","isOnDemandRevalidate","IncrementalCacheKind","softTags","isFallback","waitAtLeastOneReactRenderTask","isRevalidate","pendingRevalidates","response","defineProperty","cache","hasNextConfig","pendingRevalidateKey","pendingRevalidate","revalidatedResult","pendingResponse","nextRevalidate","cacheSignal","beginRead","endRead","__nextPatched","__nextGetStaticStore","_nextOriginalFetch","options","original","createDedupeFetch"],"mappings":"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"}