{"version":3,"sources":["../../src/server/base-server.ts"],"sourcesContent":["import type { __ApiPreviewProps } from './api-utils'\nimport type { LoadComponentsReturnType } from './load-components'\nimport type { MiddlewareRouteMatch } from '../shared/lib/router/utils/middleware-route-matcher'\nimport type { Params } from '../client/components/params'\nimport {\n  type FallbackRouteParams,\n  getFallbackRouteParams,\n} from '../client/components/fallback-params'\nimport type { NextConfig, NextConfigComplete } from './config-shared'\nimport type {\n  NextParsedUrlQuery,\n  NextUrlWithParsedQuery,\n  RequestMeta,\n} from './request-meta'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { RenderOptsPartial as PagesRenderOptsPartial } from './render'\nimport type {\n  RenderOptsPartial as AppRenderOptsPartial,\n  ServerOnInstrumentationRequestError,\n} from './app-render/types'\nimport {\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type ServerComponentsHmrCache,\n  type ResponseCacheBase,\n  type ResponseCacheEntry,\n  type ResponseGenerator,\n  CachedRouteKind,\n  type CachedRedirectValue,\n} from './response-cache'\nimport type { UrlWithParsedQuery } from 'url'\nimport {\n  NormalizeError,\n  DecodeError,\n  normalizeRepeatedSlashes,\n  MissingStaticPage,\n} from '../shared/lib/utils'\nimport type { PreviewData } from '../types'\nimport type { PagesManifest } from '../build/webpack/plugins/pages-manifest-plugin'\nimport type { BaseNextRequest, BaseNextResponse } from './base-http'\nimport type {\n  ManifestRewriteRoute,\n  ManifestRoute,\n  PrerenderManifest,\n} from '../build'\nimport type { ClientReferenceManifest } from '../build/webpack/plugins/flight-manifest-plugin'\nimport type { NextFontManifest } from '../build/webpack/plugins/next-font-manifest-plugin'\nimport type { AppPageRouteModule } from './route-modules/app-page/module'\nimport type { PagesAPIRouteMatch } from './route-matches/pages-api-route-match'\nimport type { AppRouteRouteHandlerContext } from './route-modules/app-route/module'\nimport type {\n  Server as HTTPServer,\n  IncomingMessage,\n  ServerResponse as HTTPServerResponse,\n} from 'http'\nimport type { MiddlewareMatcher } from '../build/analysis/get-page-static-info'\nimport type { TLSSocket } from 'tls'\nimport type { PathnameNormalizer } from './normalizers/request/pathname-normalizer'\nimport type { InstrumentationModule } from './instrumentation/types'\n\nimport { format as formatUrl, parse as parseUrl } from 'url'\nimport { formatHostname } from './lib/format-hostname'\nimport { getRedirectStatus } from '../lib/redirect-status'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport {\n  APP_PATHS_MANIFEST,\n  NEXT_BUILTIN_DOCUMENT,\n  PAGES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n} from '../shared/lib/constants'\nimport { isDynamicRoute } from '../shared/lib/router/utils'\nimport { checkIsOnDemandRevalidate } from './api-utils'\nimport { setConfig } from '../shared/lib/runtime-config.external'\nimport {\n  formatRevalidate,\n  type Revalidate,\n  type SwrDelta,\n} from './lib/revalidate'\nimport { execOnce } from '../shared/lib/utils'\nimport { isBlockedPage } from './utils'\nimport { isBot } from '../shared/lib/router/utils/is-bot'\nimport RenderResult from './render-result'\nimport { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash'\nimport { denormalizePagePath } from '../shared/lib/page-path/denormalize-page-path'\nimport * as Log from '../build/output/log'\nimport escapePathDelimiters from '../shared/lib/router/utils/escape-path-delimiters'\nimport { getUtils } from './server-utils'\nimport isError, { getProperError } from '../lib/is-error'\nimport {\n  addRequestMeta,\n  getRequestMeta,\n  removeRequestMeta,\n  setRequestMeta,\n} from './request-meta'\nimport { removePathPrefix } from '../shared/lib/router/utils/remove-path-prefix'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport { getHostname } from '../shared/lib/get-hostname'\nimport { parseUrl as parseUrlUtil } from '../shared/lib/router/utils/parse-url'\nimport { getNextPathnameInfo } from '../shared/lib/router/utils/get-next-pathname-info'\nimport {\n  RSC_HEADER,\n  NEXT_RSC_UNION_QUERY,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n  NEXT_URL,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_IS_PRERENDER_HEADER,\n} from '../client/components/app-router-headers'\nimport type {\n  MatchOptions,\n  RouteMatcherManager,\n} from './route-matcher-managers/route-matcher-manager'\nimport { LocaleRouteNormalizer } from './normalizers/locale-route-normalizer'\nimport { DefaultRouteMatcherManager } from './route-matcher-managers/default-route-matcher-manager'\nimport { AppPageRouteMatcherProvider } from './route-matcher-providers/app-page-route-matcher-provider'\nimport { AppRouteRouteMatcherProvider } from './route-matcher-providers/app-route-route-matcher-provider'\nimport { PagesAPIRouteMatcherProvider } from './route-matcher-providers/pages-api-route-matcher-provider'\nimport { PagesRouteMatcherProvider } from './route-matcher-providers/pages-route-matcher-provider'\nimport { ServerManifestLoader } from './route-matcher-providers/helpers/manifest-loaders/server-manifest-loader'\nimport { getTracer, isBubbledError, SpanKind } from './lib/trace/tracer'\nimport { BaseServerSpan } from './lib/trace/constants'\nimport { I18NProvider } from './lib/i18n-provider'\nimport { sendResponse } from './send-response'\nimport {\n  handleBadRequestResponse,\n  handleInternalServerErrorResponse,\n} from './route-modules/helpers/response-handlers'\nimport {\n  fromNodeOutgoingHttpHeaders,\n  normalizeNextQueryParam,\n  toNodeOutgoingHttpHeaders,\n} from './web/utils'\nimport {\n  CACHE_ONE_YEAR,\n  NEXT_CACHE_TAGS_HEADER,\n  NEXT_RESUME_HEADER,\n} from '../lib/constants'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport {\n  NextRequestAdapter,\n  signalFromNodeResponse,\n} from './web/spec-extension/adapters/next-request'\nimport { matchNextDataPathname } from './lib/match-next-data-pathname'\nimport getRouteFromAssetPath from '../shared/lib/router/utils/get-route-from-asset-path'\nimport { RSCPathnameNormalizer } from './normalizers/request/rsc'\nimport { PostponedPathnameNormalizer } from './normalizers/request/postponed'\nimport { stripFlightHeaders } from './app-render/strip-flight-headers'\nimport {\n  isAppPageRouteModule,\n  isAppRouteRouteModule,\n  isPagesRouteModule,\n} from './route-modules/checks'\nimport { PrefetchRSCPathnameNormalizer } from './normalizers/request/prefetch-rsc'\nimport { NextDataPathnameNormalizer } from './normalizers/request/next-data'\nimport { getIsServerAction } from './lib/server-action-request-meta'\nimport { isInterceptionRouteAppPath } from './lib/interception-routes'\nimport { toRoute } from './lib/to-route'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport { isNodeNextRequest, isNodeNextResponse } from './base-http/helpers'\nimport { patchSetHeaderWithCookieSupport } from './lib/patch-set-header'\nimport { checkIsAppPPREnabled } from './lib/experimental/ppr'\nimport {\n  getBuiltinRequestContext,\n  type WaitUntil,\n} from './after/builtin-request-context'\nimport { ENCODED_TAGS } from './stream-utils/encodedTags'\nimport { NextRequestHint } from './web/adapter'\nimport { getRevalidateReason } from './instrumentation/utils'\nimport { RouteKind } from './route-kind'\nimport type { RouteModule } from './route-modules/route-module'\nimport { FallbackMode, parseFallbackField } from '../lib/fallback'\nimport { toResponseCacheEntry } from './response-cache/utils'\nimport { scheduleOnNextTick } from '../lib/scheduler'\n\nexport type FindComponentsResult = {\n  components: LoadComponentsReturnType\n  query: NextParsedUrlQuery\n}\n\nexport interface MiddlewareRoutingItem {\n  page: string\n  match: MiddlewareRouteMatch\n  matchers?: MiddlewareMatcher[]\n}\n\nexport type RouteHandler<\n  ServerRequest extends BaseNextRequest = BaseNextRequest,\n  ServerResponse extends BaseNextResponse = BaseNextResponse,\n> = (\n  req: ServerRequest,\n  res: ServerResponse,\n  parsedUrl: NextUrlWithParsedQuery\n) => PromiseLike<boolean> | boolean\n\n/**\n * The normalized route manifest is the same as the route manifest, but with\n * the rewrites normalized to the object shape that the router expects.\n */\nexport type NormalizedRouteManifest = {\n  readonly dynamicRoutes: ReadonlyArray<ManifestRoute>\n  readonly rewrites: {\n    readonly beforeFiles: ReadonlyArray<ManifestRewriteRoute>\n    readonly afterFiles: ReadonlyArray<ManifestRewriteRoute>\n    readonly fallback: ReadonlyArray<ManifestRewriteRoute>\n  }\n}\n\nexport interface Options {\n  /**\n   * Object containing the configuration next.config.js\n   */\n  conf: NextConfig\n  /**\n   * Set to false when the server was created by Next.js\n   */\n  customServer?: boolean\n  /**\n   * Tells if Next.js is running in dev mode\n   */\n  dev?: boolean\n  /**\n   * Enables the experimental testing mode.\n   */\n  experimentalTestProxy?: boolean\n\n  /**\n   * Whether or not the dev server is running in experimental HTTPS mode\n   */\n  experimentalHttpsServer?: boolean\n  /**\n   * Where the Next project is located\n   */\n  dir?: string\n  /**\n   * Tells if Next.js is at the platform-level\n   */\n  minimalMode?: boolean\n  /**\n   * Hide error messages containing server information\n   */\n  quiet?: boolean\n  /**\n   * The hostname the server is running behind\n   */\n  hostname?: string\n  /**\n   * The port the server is running behind\n   */\n  port?: number\n  /**\n   * The HTTP Server that Next.js is running behind\n   */\n  httpServer?: HTTPServer\n}\n\nexport type RenderOpts = PagesRenderOptsPartial & AppRenderOptsPartial\n\nexport type LoadedRenderOpts = RenderOpts &\n  LoadComponentsReturnType &\n  RequestLifecycleOpts\n\nexport type RequestLifecycleOpts = {\n  waitUntil: ((promise: Promise<any>) => void) | undefined\n  onClose: ((callback: () => void) => void) | undefined\n}\n\ntype BaseRenderOpts = RenderOpts & {\n  poweredByHeader: boolean\n  generateEtags: boolean\n  previewProps: __ApiPreviewProps\n}\n\n/**\n * The public interface for rendering with the server programmatically. This\n * would typically only allow the base request or response to extend it, but\n * because this can be programmatically accessed, we assume that it could also\n * be the base Node.js request and response types.\n */\nexport interface BaseRequestHandler<\n  ServerRequest extends BaseNextRequest | IncomingMessage = BaseNextRequest,\n  ServerResponse extends\n    | BaseNextResponse\n    | HTTPServerResponse = BaseNextResponse,\n> {\n  (\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: NextUrlWithParsedQuery | undefined\n  ): Promise<void> | void\n}\n\nexport type RequestContext<\n  ServerRequest extends BaseNextRequest = BaseNextRequest,\n  ServerResponse extends BaseNextResponse = BaseNextResponse,\n> = {\n  req: ServerRequest\n  res: ServerResponse\n  pathname: string\n  query: NextParsedUrlQuery\n  renderOpts: RenderOpts\n}\n\nexport class NoFallbackError extends Error {}\n\n// Internal wrapper around build errors at development\n// time, to prevent us from propagating or logging them\nexport class WrappedBuildError extends Error {\n  innerError: Error\n\n  constructor(innerError: Error) {\n    super()\n    this.innerError = innerError\n  }\n}\n\ntype ResponsePayload = {\n  type: 'html' | 'json' | 'rsc'\n  body: RenderResult\n  revalidate?: Revalidate\n}\n\nexport type NextEnabledDirectories = {\n  readonly pages: boolean\n  readonly app: boolean\n}\n\nexport default abstract class Server<\n  ServerOptions extends Options = Options,\n  ServerRequest extends BaseNextRequest = BaseNextRequest,\n  ServerResponse extends BaseNextResponse = BaseNextResponse,\n> {\n  public readonly hostname?: string\n  public readonly fetchHostname?: string\n  public readonly port?: number\n  protected readonly dir: string\n  protected readonly quiet: boolean\n  protected readonly nextConfig: NextConfigComplete\n  protected readonly distDir: string\n  protected readonly publicDir: string\n  protected readonly hasStaticDir: boolean\n  protected readonly pagesManifest?: PagesManifest\n  protected readonly appPathsManifest?: PagesManifest\n  protected readonly buildId: string\n  protected readonly minimalMode: boolean\n  protected readonly renderOpts: BaseRenderOpts\n  protected readonly serverOptions: Readonly<ServerOptions>\n  protected readonly appPathRoutes?: Record<string, string[]>\n  protected readonly clientReferenceManifest?: DeepReadonly<ClientReferenceManifest>\n  protected interceptionRoutePatterns: RegExp[]\n  protected nextFontManifest?: DeepReadonly<NextFontManifest>\n  protected instrumentation: InstrumentationModule | undefined\n  private readonly responseCache: ResponseCacheBase\n\n  protected abstract getPublicDir(): string\n  protected abstract getHasStaticDir(): boolean\n  protected abstract getPagesManifest(): PagesManifest | undefined\n  protected abstract getAppPathsManifest(): PagesManifest | undefined\n  protected abstract getBuildId(): string\n  protected abstract getinterceptionRoutePatterns(): RegExp[]\n\n  protected readonly enabledDirectories: NextEnabledDirectories\n  protected abstract getEnabledDirectories(dev: boolean): NextEnabledDirectories\n\n  protected readonly experimentalTestProxy?: boolean\n\n  protected abstract findPageComponents(params: {\n    page: string\n    query: NextParsedUrlQuery\n    params: Params\n    isAppPath: boolean\n    // The following parameters are used in the development server's\n    // implementation.\n    sriEnabled?: boolean\n    appPaths?: ReadonlyArray<string> | null\n    shouldEnsure?: boolean\n    url?: string\n  }): Promise<FindComponentsResult | null>\n  protected abstract getPrerenderManifest(): DeepReadonly<PrerenderManifest>\n  protected abstract getNextFontManifest():\n    | DeepReadonly<NextFontManifest>\n    | undefined\n  protected abstract attachRequestMeta(\n    req: ServerRequest,\n    parsedUrl: NextUrlWithParsedQuery\n  ): void\n  protected abstract hasPage(pathname: string): Promise<boolean>\n\n  protected abstract sendRenderResult(\n    req: ServerRequest,\n    res: ServerResponse,\n    options: {\n      result: RenderResult\n      type: 'html' | 'json' | 'rsc'\n      generateEtags: boolean\n      poweredByHeader: boolean\n      revalidate?: Revalidate\n      swrDelta?: SwrDelta\n    }\n  ): Promise<void>\n\n  protected abstract runApi(\n    req: ServerRequest,\n    res: ServerResponse,\n    query: ParsedUrlQuery,\n    match: PagesAPIRouteMatch\n  ): Promise<boolean>\n\n  protected abstract renderHTML(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery,\n    renderOpts: LoadedRenderOpts\n  ): Promise<RenderResult>\n\n  protected abstract getIncrementalCache(options: {\n    requestHeaders: Record<string, undefined | string | string[]>\n    requestProtocol: 'http' | 'https'\n  }): Promise<import('./lib/incremental-cache').IncrementalCache>\n\n  protected abstract getResponseCache(options: {\n    dev: boolean\n  }): ResponseCacheBase\n\n  protected getServerComponentsHmrCache():\n    | ServerComponentsHmrCache\n    | undefined {\n    return this.nextConfig.experimental.serverComponentsHmrCache\n      ? (globalThis as any).__serverComponentsHmrCache\n      : undefined\n  }\n\n  protected abstract loadEnvConfig(params: {\n    dev: boolean\n    forceReload?: boolean\n  }): void\n\n  // TODO-APP: (wyattjoh): Make protected again. Used for turbopack in route-resolver.ts right now.\n  public readonly matchers: RouteMatcherManager\n  protected readonly i18nProvider?: I18NProvider\n  protected readonly localeNormalizer?: LocaleRouteNormalizer\n\n  protected readonly normalizers: {\n    /**\n     * @deprecated\n     */\n    readonly postponed: PostponedPathnameNormalizer | undefined\n    readonly rsc: RSCPathnameNormalizer | undefined\n    readonly prefetchRSC: PrefetchRSCPathnameNormalizer | undefined\n    readonly data: NextDataPathnameNormalizer | undefined\n  }\n\n  private readonly isAppPPREnabled: boolean\n\n  public constructor(options: ServerOptions) {\n    const {\n      dir = '.',\n      quiet = false,\n      conf,\n      dev = false,\n      minimalMode = false,\n      customServer = true,\n      hostname,\n      port,\n      experimentalTestProxy,\n    } = options\n\n    this.experimentalTestProxy = experimentalTestProxy\n    this.serverOptions = options\n\n    this.dir =\n      process.env.NEXT_RUNTIME === 'edge' ? dir : require('path').resolve(dir)\n\n    this.quiet = quiet\n    this.loadEnvConfig({ dev })\n\n    // TODO: should conf be normalized to prevent missing\n    // values from causing issues as this can be user provided\n    this.nextConfig = conf as NextConfigComplete\n    this.hostname = hostname\n    if (this.hostname) {\n      // we format the hostname so that it can be fetched\n      this.fetchHostname = formatHostname(this.hostname)\n    }\n    this.port = port\n    this.distDir =\n      process.env.NEXT_RUNTIME === 'edge'\n        ? this.nextConfig.distDir\n        : require('path').join(this.dir, this.nextConfig.distDir)\n    this.publicDir = this.getPublicDir()\n    this.hasStaticDir = !minimalMode && this.getHasStaticDir()\n\n    this.i18nProvider = this.nextConfig.i18n?.locales\n      ? new I18NProvider(this.nextConfig.i18n)\n      : undefined\n\n    // Configure the locale normalizer, it's used for routes inside `pages/`.\n    this.localeNormalizer = this.i18nProvider\n      ? new LocaleRouteNormalizer(this.i18nProvider)\n      : undefined\n\n    // Only serverRuntimeConfig needs the default\n    // publicRuntimeConfig gets it's default in client/index.js\n    const {\n      serverRuntimeConfig = {},\n      publicRuntimeConfig,\n      assetPrefix,\n      generateEtags,\n    } = this.nextConfig\n\n    this.buildId = this.getBuildId()\n    // this is a hack to avoid Webpack knowing this is equal to this.minimalMode\n    // because we replace this.minimalMode to true in production bundles.\n    const minimalModeKey = 'minimalMode'\n    this[minimalModeKey] =\n      minimalMode || !!process.env.NEXT_PRIVATE_MINIMAL_MODE\n\n    this.enabledDirectories = this.getEnabledDirectories(dev)\n\n    this.isAppPPREnabled =\n      this.enabledDirectories.app &&\n      checkIsAppPPREnabled(this.nextConfig.experimental.ppr)\n\n    this.normalizers = {\n      // We should normalize the pathname from the RSC prefix only in minimal\n      // mode as otherwise that route is not exposed external to the server as\n      // we instead only rely on the headers.\n      postponed:\n        this.isAppPPREnabled && this.minimalMode\n          ? new PostponedPathnameNormalizer()\n          : undefined,\n      rsc:\n        this.enabledDirectories.app && this.minimalMode\n          ? new RSCPathnameNormalizer()\n          : undefined,\n      prefetchRSC:\n        this.isAppPPREnabled && this.minimalMode\n          ? new PrefetchRSCPathnameNormalizer()\n          : undefined,\n      data: this.enabledDirectories.pages\n        ? new NextDataPathnameNormalizer(this.buildId)\n        : undefined,\n    }\n\n    this.nextFontManifest = this.getNextFontManifest()\n\n    if (process.env.NEXT_RUNTIME !== 'edge') {\n      process.env.NEXT_DEPLOYMENT_ID = this.nextConfig.deploymentId || ''\n    }\n\n    this.renderOpts = {\n      supportsDynamicResponse: true,\n      trailingSlash: this.nextConfig.trailingSlash,\n      deploymentId: this.nextConfig.deploymentId,\n      strictNextHead: this.nextConfig.experimental.strictNextHead ?? true,\n      poweredByHeader: this.nextConfig.poweredByHeader,\n      canonicalBase: this.nextConfig.amp.canonicalBase || '',\n      buildId: this.buildId,\n      generateEtags,\n      previewProps: this.getPrerenderManifest().preview,\n      customServer: customServer === true ? true : undefined,\n      ampOptimizerConfig: this.nextConfig.experimental.amp?.optimizer,\n      basePath: this.nextConfig.basePath,\n      images: this.nextConfig.images,\n      optimizeCss: this.nextConfig.experimental.optimizeCss,\n      nextConfigOutput: this.nextConfig.output,\n      nextScriptWorkers: this.nextConfig.experimental.nextScriptWorkers,\n      disableOptimizedLoading:\n        this.nextConfig.experimental.disableOptimizedLoading,\n      domainLocales: this.nextConfig.i18n?.domains,\n      distDir: this.distDir,\n      serverComponents: this.enabledDirectories.app,\n      enableTainting: this.nextConfig.experimental.taint,\n      crossOrigin: this.nextConfig.crossOrigin\n        ? this.nextConfig.crossOrigin\n        : undefined,\n      largePageDataBytes: this.nextConfig.experimental.largePageDataBytes,\n      // Only the `publicRuntimeConfig` key is exposed to the client side\n      // It'll be rendered as part of __NEXT_DATA__ on the client side\n      runtimeConfig:\n        Object.keys(publicRuntimeConfig).length > 0\n          ? publicRuntimeConfig\n          : undefined,\n\n      // @ts-expect-error internal field not publicly exposed\n      isExperimentalCompile: this.nextConfig.experimental.isExperimentalCompile,\n      experimental: {\n        swrDelta: this.nextConfig.swrDelta,\n        clientTraceMetadata: this.nextConfig.experimental.clientTraceMetadata,\n        after: this.nextConfig.experimental.after ?? false,\n        dynamicIO: this.nextConfig.experimental.dynamicIO ?? false,\n      },\n      onInstrumentationRequestError:\n        this.instrumentationOnRequestError.bind(this),\n      reactMaxHeadersLength: this.nextConfig.reactMaxHeadersLength,\n    }\n\n    // Initialize next/config with the environment configuration\n    setConfig({\n      serverRuntimeConfig,\n      publicRuntimeConfig,\n    })\n\n    this.pagesManifest = this.getPagesManifest()\n    this.appPathsManifest = this.getAppPathsManifest()\n    this.appPathRoutes = this.getAppPathRoutes()\n    this.interceptionRoutePatterns = this.getinterceptionRoutePatterns()\n\n    // Configure the routes.\n    this.matchers = this.getRouteMatchers()\n\n    // Start route compilation. We don't wait for the routes to finish loading\n    // because we use the `waitTillReady` promise below in `handleRequest` to\n    // wait. Also we can't `await` in the constructor.\n    void this.matchers.reload()\n\n    this.setAssetPrefix(assetPrefix)\n    this.responseCache = this.getResponseCache({ dev })\n  }\n\n  protected reloadMatchers() {\n    return this.matchers.reload()\n  }\n\n  private handleRSCRequest: RouteHandler<ServerRequest, ServerResponse> = (\n    req,\n    _res,\n    parsedUrl\n  ) => {\n    if (!parsedUrl.pathname) return false\n\n    if (this.normalizers.prefetchRSC?.match(parsedUrl.pathname)) {\n      parsedUrl.pathname = this.normalizers.prefetchRSC.normalize(\n        parsedUrl.pathname,\n        true\n      )\n\n      // Mark the request as a router prefetch request.\n      req.headers[RSC_HEADER.toLowerCase()] = '1'\n      req.headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] = '1'\n      addRequestMeta(req, 'isRSCRequest', true)\n      addRequestMeta(req, 'isPrefetchRSCRequest', true)\n    } else if (this.normalizers.rsc?.match(parsedUrl.pathname)) {\n      parsedUrl.pathname = this.normalizers.rsc.normalize(\n        parsedUrl.pathname,\n        true\n      )\n\n      // Mark the request as a RSC request.\n      req.headers[RSC_HEADER.toLowerCase()] = '1'\n      addRequestMeta(req, 'isRSCRequest', true)\n    } else if (req.headers['x-now-route-matches']) {\n      // If we didn't match, return with the flight headers stripped. If in\n      // minimal mode we didn't match based on the path, this can't be a RSC\n      // request. This is because Vercel only sends this header during\n      // revalidation requests and we want the cache to instead depend on the\n      // request path for flight information.\n      stripFlightHeaders(req.headers)\n\n      return false\n    } else if (req.headers[RSC_HEADER.toLowerCase()] === '1') {\n      addRequestMeta(req, 'isRSCRequest', true)\n\n      if (req.headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] === '1') {\n        addRequestMeta(req, 'isPrefetchRSCRequest', true)\n      }\n    } else {\n      // Otherwise just return without doing anything.\n      return false\n    }\n\n    if (req.url) {\n      const parsed = parseUrl(req.url)\n      parsed.pathname = parsedUrl.pathname\n      req.url = formatUrl(parsed)\n    }\n\n    return false\n  }\n\n  private handleNextDataRequest: RouteHandler<ServerRequest, ServerResponse> =\n    async (req, res, parsedUrl) => {\n      const middleware = this.getMiddleware()\n      const params = matchNextDataPathname(parsedUrl.pathname)\n\n      // ignore for non-next data URLs\n      if (!params || !params.path) {\n        return false\n      }\n\n      if (params.path[0] !== this.buildId) {\n        // Ignore if its a middleware request when we aren't on edge.\n        if (\n          process.env.NEXT_RUNTIME !== 'edge' &&\n          getRequestMeta(req, 'middlewareInvoke')\n        ) {\n          return false\n        }\n\n        // Make sure to 404 if the buildId isn't correct\n        await this.render404(req, res, parsedUrl)\n        return true\n      }\n\n      // remove buildId from URL\n      params.path.shift()\n\n      const lastParam = params.path[params.path.length - 1]\n\n      // show 404 if it doesn't end with .json\n      if (typeof lastParam !== 'string' || !lastParam.endsWith('.json')) {\n        await this.render404(req, res, parsedUrl)\n        return true\n      }\n\n      // re-create page's pathname\n      let pathname = `/${params.path.join('/')}`\n      pathname = getRouteFromAssetPath(pathname, '.json')\n\n      // ensure trailing slash is normalized per config\n      if (middleware) {\n        if (this.nextConfig.trailingSlash && !pathname.endsWith('/')) {\n          pathname += '/'\n        }\n        if (\n          !this.nextConfig.trailingSlash &&\n          pathname.length > 1 &&\n          pathname.endsWith('/')\n        ) {\n          pathname = pathname.substring(0, pathname.length - 1)\n        }\n      }\n\n      if (this.i18nProvider) {\n        // Remove the port from the hostname if present.\n        const hostname = req?.headers.host?.split(':', 1)[0].toLowerCase()\n\n        const domainLocale = this.i18nProvider.detectDomainLocale(hostname)\n        const defaultLocale =\n          domainLocale?.defaultLocale ?? this.i18nProvider.config.defaultLocale\n\n        const localePathResult = this.i18nProvider.analyze(pathname)\n\n        // If the locale is detected from the path, we need to remove it\n        // from the pathname.\n        if (localePathResult.detectedLocale) {\n          pathname = localePathResult.pathname\n        }\n\n        // Update the query with the detected locale and default locale.\n        parsedUrl.query.__nextLocale = localePathResult.detectedLocale\n        parsedUrl.query.__nextDefaultLocale = defaultLocale\n\n        // If the locale is not detected from the path, we need to mark that\n        // it was not inferred from default.\n        if (!localePathResult.detectedLocale) {\n          delete parsedUrl.query.__nextInferredLocaleFromDefault\n        }\n\n        // If no locale was detected and we don't have middleware, we need\n        // to render a 404 page.\n        if (!localePathResult.detectedLocale && !middleware) {\n          parsedUrl.query.__nextLocale = defaultLocale\n          await this.render404(req, res, parsedUrl)\n          return true\n        }\n      }\n\n      parsedUrl.pathname = pathname\n      parsedUrl.query.__nextDataReq = '1'\n\n      return false\n    }\n\n  protected handleNextImageRequest: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = () => false\n\n  protected handleCatchallRenderRequest: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = () => false\n\n  protected handleCatchallMiddlewareRequest: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = () => false\n\n  protected getRouteMatchers(): RouteMatcherManager {\n    // Create a new manifest loader that get's the manifests from the server.\n    const manifestLoader = new ServerManifestLoader((name) => {\n      switch (name) {\n        case PAGES_MANIFEST:\n          return this.getPagesManifest() ?? null\n        case APP_PATHS_MANIFEST:\n          return this.getAppPathsManifest() ?? null\n        default:\n          return null\n      }\n    })\n\n    // Configure the matchers and handlers.\n    const matchers: RouteMatcherManager = new DefaultRouteMatcherManager()\n\n    // Match pages under `pages/`.\n    matchers.push(\n      new PagesRouteMatcherProvider(\n        this.distDir,\n        manifestLoader,\n        this.i18nProvider\n      )\n    )\n\n    // Match api routes under `pages/api/`.\n    matchers.push(\n      new PagesAPIRouteMatcherProvider(\n        this.distDir,\n        manifestLoader,\n        this.i18nProvider\n      )\n    )\n\n    // If the app directory is enabled, then add the app matchers and handlers.\n    if (this.enabledDirectories.app) {\n      // Match app pages under `app/`.\n      matchers.push(\n        new AppPageRouteMatcherProvider(this.distDir, manifestLoader)\n      )\n      matchers.push(\n        new AppRouteRouteMatcherProvider(this.distDir, manifestLoader)\n      )\n    }\n\n    return matchers\n  }\n\n  protected async instrumentationOnRequestError(\n    ...args: Parameters<ServerOnInstrumentationRequestError>\n  ) {\n    const [err, req, ctx] = args\n\n    if (this.instrumentation) {\n      try {\n        await this.instrumentation.onRequestError?.(\n          err,\n          {\n            path: req.url || '',\n            method: req.method || 'GET',\n            // Normalize middleware headers and other server request headers\n            headers:\n              req instanceof NextRequestHint\n                ? Object.fromEntries(req.headers.entries())\n                : req.headers,\n          },\n          ctx\n        )\n      } catch (handlerErr) {\n        // Log the soft error and continue, since errors can thrown from react stream handler\n        console.error('Error in instrumentation.onRequestError:', handlerErr)\n      }\n    }\n  }\n\n  public logError(err: Error): void {\n    if (this.quiet) return\n    Log.error(err)\n  }\n\n  public async handleRequest(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: NextUrlWithParsedQuery\n  ): Promise<void> {\n    await this.prepare()\n    const method = req.method.toUpperCase()\n\n    const tracer = getTracer()\n    return tracer.withPropagatedContext(req.headers, () => {\n      return tracer.trace(\n        BaseServerSpan.handleRequest,\n        {\n          spanName: `${method} ${req.url}`,\n          kind: SpanKind.SERVER,\n          attributes: {\n            'http.method': method,\n            'http.target': req.url,\n          },\n        },\n        async (span) =>\n          this.handleRequestImpl(req, res, parsedUrl).finally(() => {\n            if (!span) return\n\n            const isRSCRequest = getRequestMeta(req, 'isRSCRequest') ?? false\n            span.setAttributes({\n              'http.status_code': res.statusCode,\n              'next.rsc': isRSCRequest,\n            })\n\n            const rootSpanAttributes = tracer.getRootSpanAttributes()\n            // We were unable to get attributes, probably OTEL is not enabled\n            if (!rootSpanAttributes) return\n\n            if (\n              rootSpanAttributes.get('next.span_type') !==\n              BaseServerSpan.handleRequest\n            ) {\n              console.warn(\n                `Unexpected root span type '${rootSpanAttributes.get(\n                  'next.span_type'\n                )}'. Please report this Next.js issue https://github.com/vercel/next.js`\n              )\n              return\n            }\n\n            const route = rootSpanAttributes.get('next.route')\n            if (route) {\n              const name = isRSCRequest\n                ? `RSC ${method} ${route}`\n                : `${method} ${route}`\n\n              span.setAttributes({\n                'next.route': route,\n                'http.route': route,\n                'next.span_name': name,\n              })\n              span.updateName(name)\n            } else {\n              span.updateName(\n                isRSCRequest\n                  ? `RSC ${method} ${req.url}`\n                  : `${method} ${req.url}`\n              )\n            }\n          })\n      )\n    })\n  }\n\n  private async handleRequestImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: NextUrlWithParsedQuery\n  ): Promise<void> {\n    try {\n      // Wait for the matchers to be ready.\n      await this.matchers.waitTillReady()\n\n      // ensure cookies set in middleware are merged and\n      // not overridden by API routes/getServerSideProps\n      patchSetHeaderWithCookieSupport(\n        req,\n        isNodeNextResponse(res) ? res.originalResponse : res\n      )\n\n      const urlParts = (req.url || '').split('?', 1)\n      const urlNoQuery = urlParts[0]\n\n      // this normalizes repeated slashes in the path e.g. hello//world ->\n      // hello/world or backslashes to forward slashes, this does not\n      // handle trailing slash as that is handled the same as a next.config.js\n      // redirect\n      if (urlNoQuery?.match(/(\\\\|\\/\\/)/)) {\n        const cleanUrl = normalizeRepeatedSlashes(req.url!)\n        res.redirect(cleanUrl, 308).body(cleanUrl).send()\n        return\n      }\n\n      // Parse url if parsedUrl not provided\n      if (!parsedUrl || typeof parsedUrl !== 'object') {\n        if (!req.url) {\n          throw new Error('Invariant: url can not be undefined')\n        }\n\n        parsedUrl = parseUrl(req.url!, true)\n      }\n\n      if (!parsedUrl.pathname) {\n        throw new Error(\"Invariant: pathname can't be empty\")\n      }\n\n      // Parse the querystring ourselves if the user doesn't handle querystring parsing\n      if (typeof parsedUrl.query === 'string') {\n        parsedUrl.query = Object.fromEntries(\n          new URLSearchParams(parsedUrl.query)\n        )\n      }\n\n      // Update the `x-forwarded-*` headers.\n      const { originalRequest = null } = isNodeNextRequest(req) ? req : {}\n      const xForwardedProto = originalRequest?.headers['x-forwarded-proto']\n      const isHttps = xForwardedProto\n        ? xForwardedProto === 'https'\n        : !!(originalRequest?.socket as TLSSocket)?.encrypted\n\n      req.headers['x-forwarded-host'] ??= req.headers['host'] ?? this.hostname\n      req.headers['x-forwarded-port'] ??= this.port\n        ? this.port.toString()\n        : isHttps\n          ? '443'\n          : '80'\n      req.headers['x-forwarded-proto'] ??= isHttps ? 'https' : 'http'\n      req.headers['x-forwarded-for'] ??= originalRequest?.socket?.remoteAddress\n\n      // This should be done before any normalization of the pathname happens as\n      // it captures the initial URL.\n      this.attachRequestMeta(req, parsedUrl)\n\n      let finished = await this.handleRSCRequest(req, res, parsedUrl)\n      if (finished) return\n\n      const domainLocale = this.i18nProvider?.detectDomainLocale(\n        getHostname(parsedUrl, req.headers)\n      )\n\n      const defaultLocale =\n        domainLocale?.defaultLocale || this.nextConfig.i18n?.defaultLocale\n      parsedUrl.query.__nextDefaultLocale = defaultLocale\n\n      const url = parseUrlUtil(req.url.replace(/^\\/+/, '/'))\n      const pathnameInfo = getNextPathnameInfo(url.pathname, {\n        nextConfig: this.nextConfig,\n        i18nProvider: this.i18nProvider,\n      })\n      url.pathname = pathnameInfo.pathname\n\n      if (pathnameInfo.basePath) {\n        req.url = removePathPrefix(req.url!, this.nextConfig.basePath)\n      }\n\n      const useMatchedPathHeader =\n        this.minimalMode && typeof req.headers['x-matched-path'] === 'string'\n\n      // TODO: merge handling with invokePath\n      if (useMatchedPathHeader) {\n        try {\n          if (this.enabledDirectories.app) {\n            // ensure /index path is normalized for prerender\n            // in minimal mode\n            if (req.url.match(/^\\/index($|\\?)/)) {\n              req.url = req.url.replace(/^\\/index/, '/')\n            }\n            parsedUrl.pathname =\n              parsedUrl.pathname === '/index' ? '/' : parsedUrl.pathname\n          }\n\n          // x-matched-path is the source of truth, it tells what page\n          // should be rendered because we don't process rewrites in minimalMode\n          let { pathname: matchedPath } = new URL(\n            req.headers['x-matched-path'] as string,\n            'http://localhost'\n          )\n\n          let { pathname: urlPathname } = new URL(req.url, 'http://localhost')\n\n          // For ISR the URL is normalized to the prerenderPath so if\n          // it's a data request the URL path will be the data URL,\n          // basePath is already stripped by this point\n          if (this.normalizers.data?.match(urlPathname)) {\n            parsedUrl.query.__nextDataReq = '1'\n          }\n          // In minimal mode, if PPR is enabled, then we should check to see if\n          // the matched path is a postponed path, and if it is, handle it.\n          else if (\n            this.normalizers.postponed?.match(matchedPath) &&\n            req.method === 'POST'\n          ) {\n            // Decode the postponed state from the request body, it will come as\n            // an array of buffers, so collect them and then concat them to form\n            // the string.\n            const body: Array<Buffer> = []\n            for await (const chunk of req.body) {\n              body.push(chunk)\n            }\n            const postponed = Buffer.concat(body).toString('utf8')\n\n            addRequestMeta(req, 'postponed', postponed)\n\n            // If the request does not have the `x-now-route-matches` header,\n            // it means that the request has it's exact path specified in the\n            // `x-matched-path` header. In this case, we should update the\n            // pathname to the matched path.\n            if (!req.headers['x-now-route-matches']) {\n              urlPathname = this.normalizers.postponed.normalize(\n                matchedPath,\n                true\n              )\n            }\n          }\n          // In minimal mode, if PPR is enabled, then we should check to see if\n          // the request should be a resume request.\n          else if (\n            this.isAppPPREnabled &&\n            this.minimalMode &&\n            req.headers[NEXT_RESUME_HEADER] === '1' &&\n            req.method === 'POST'\n          ) {\n            // Decode the postponed state from the request body, it will come as\n            // an array of buffers, so collect them and then concat them to form\n            // the string.\n            const body: Array<Buffer> = []\n            for await (const chunk of req.body) {\n              body.push(chunk)\n            }\n            const postponed = Buffer.concat(body).toString('utf8')\n\n            addRequestMeta(req, 'postponed', postponed)\n          }\n\n          matchedPath = this.normalize(matchedPath)\n          const normalizedUrlPath = this.stripNextDataPath(urlPathname)\n\n          // Perform locale detection and normalization.\n          const localeAnalysisResult = this.i18nProvider?.analyze(matchedPath, {\n            defaultLocale,\n          })\n\n          // The locale result will be defined even if the locale was not\n          // detected for the request because it will be inferred from the\n          // default locale.\n          if (localeAnalysisResult) {\n            parsedUrl.query.__nextLocale = localeAnalysisResult.detectedLocale\n\n            // If the detected locale was inferred from the default locale, we\n            // need to modify the metadata on the request to indicate that.\n            if (localeAnalysisResult.inferredFromDefault) {\n              parsedUrl.query.__nextInferredLocaleFromDefault = '1'\n            } else {\n              delete parsedUrl.query.__nextInferredLocaleFromDefault\n            }\n          }\n\n          // TODO: check if this is needed any more?\n          matchedPath = denormalizePagePath(matchedPath)\n\n          let srcPathname = matchedPath\n          let pageIsDynamic = isDynamicRoute(srcPathname)\n\n          if (!pageIsDynamic) {\n            const match = await this.matchers.match(srcPathname, {\n              i18n: localeAnalysisResult,\n            })\n\n            // Update the source pathname to the matched page's pathname.\n            if (match) {\n              srcPathname = match.definition.pathname\n              // The page is dynamic if the params are defined.\n              pageIsDynamic = typeof match.params !== 'undefined'\n            }\n          }\n\n          // The rest of this function can't handle i18n properly, so ensure we\n          // restore the pathname with the locale information stripped from it\n          // now that we're done matching if we're using i18n.\n          if (localeAnalysisResult) {\n            matchedPath = localeAnalysisResult.pathname\n          }\n\n          const utils = getUtils({\n            pageIsDynamic,\n            page: srcPathname,\n            i18n: this.nextConfig.i18n,\n            basePath: this.nextConfig.basePath,\n            rewrites: this.getRoutesManifest()?.rewrites || {\n              beforeFiles: [],\n              afterFiles: [],\n              fallback: [],\n            },\n            caseSensitive: !!this.nextConfig.experimental.caseSensitiveRoutes,\n          })\n\n          // Ensure parsedUrl.pathname includes locale before processing\n          // rewrites or they won't match correctly.\n          if (defaultLocale && !pathnameInfo.locale) {\n            parsedUrl.pathname = `/${defaultLocale}${parsedUrl.pathname}`\n          }\n\n          const pathnameBeforeRewrite = parsedUrl.pathname\n          const rewriteParams = utils.handleRewrites(req, parsedUrl)\n          const rewriteParamKeys = Object.keys(rewriteParams)\n          const didRewrite = pathnameBeforeRewrite !== parsedUrl.pathname\n\n          if (didRewrite && parsedUrl.pathname) {\n            addRequestMeta(req, 'rewroteURL', parsedUrl.pathname)\n          }\n          const routeParamKeys = new Set<string>()\n\n          for (const key of Object.keys(parsedUrl.query)) {\n            const value = parsedUrl.query[key]\n\n            normalizeNextQueryParam(key, (normalizedKey) => {\n              if (!parsedUrl) return // typeguard\n\n              parsedUrl.query[normalizedKey] = value\n              routeParamKeys.add(normalizedKey)\n              delete parsedUrl.query[key]\n            })\n          }\n\n          // interpolate dynamic params and normalize URL if needed\n          if (pageIsDynamic) {\n            let params: ParsedUrlQuery | false = {}\n\n            let paramsResult = utils.normalizeDynamicRouteParams(\n              parsedUrl.query\n            )\n\n            // for prerendered ISR paths we attempt parsing the route\n            // params from the URL directly as route-matches may not\n            // contain the correct values due to the filesystem path\n            // matching before the dynamic route has been matched\n            if (\n              !paramsResult.hasValidParams &&\n              !isDynamicRoute(normalizedUrlPath)\n            ) {\n              let matcherParams = utils.dynamicRouteMatcher?.(normalizedUrlPath)\n\n              if (matcherParams) {\n                utils.normalizeDynamicRouteParams(matcherParams)\n                Object.assign(paramsResult.params, matcherParams)\n                paramsResult.hasValidParams = true\n              }\n            }\n\n            // if an action request is bypassing a prerender and we\n            // don't have the params in the URL since it was prerendered\n            // and matched during handle: 'filesystem' rather than dynamic route\n            // resolving we need to parse the params from the matched-path.\n            // Note: this is similar to above case but from match-path instead\n            // of from the request URL since a rewrite could cause that to not\n            // match the src pathname\n            if (\n              // we can have a collision with /index and a top-level /[slug]\n              matchedPath !== '/index' &&\n              !paramsResult.hasValidParams &&\n              !isDynamicRoute(matchedPath)\n            ) {\n              let matcherParams = utils.dynamicRouteMatcher?.(matchedPath)\n\n              if (matcherParams) {\n                const curParamsResult =\n                  utils.normalizeDynamicRouteParams(matcherParams)\n\n                if (curParamsResult.hasValidParams) {\n                  Object.assign(params, matcherParams)\n                  paramsResult = curParamsResult\n                }\n              }\n            }\n\n            if (paramsResult.hasValidParams) {\n              params = paramsResult.params\n            }\n\n            if (\n              req.headers['x-now-route-matches'] &&\n              isDynamicRoute(matchedPath) &&\n              !paramsResult.hasValidParams\n            ) {\n              const opts: Record<string, string> = {}\n              const routeParams = utils.getParamsFromRouteMatches(\n                req,\n                opts,\n                parsedUrl.query.__nextLocale || ''\n              )\n\n              // If this returns a locale, it means that the locale was detected\n              // from the pathname.\n              if (opts.locale) {\n                parsedUrl.query.__nextLocale = opts.locale\n\n                // As the locale was parsed from the pathname, we should mark\n                // that the locale was not inferred as the default.\n                delete parsedUrl.query.__nextInferredLocaleFromDefault\n              }\n              paramsResult = utils.normalizeDynamicRouteParams(\n                routeParams,\n                true\n              )\n\n              if (paramsResult.hasValidParams) {\n                params = paramsResult.params\n              }\n            }\n\n            // handle the actual dynamic route name being requested\n            if (\n              utils.defaultRouteMatches &&\n              normalizedUrlPath === srcPathname &&\n              !paramsResult.hasValidParams &&\n              !utils.normalizeDynamicRouteParams({ ...params }, true)\n                .hasValidParams\n            ) {\n              params = utils.defaultRouteMatches\n            }\n\n            if (params) {\n              matchedPath = utils.interpolateDynamicPath(srcPathname, params)\n              req.url = utils.interpolateDynamicPath(req.url!, params)\n            }\n          }\n\n          if (pageIsDynamic || didRewrite) {\n            utils.normalizeVercelUrl(req, true, [\n              ...rewriteParamKeys,\n              ...Object.keys(utils.defaultRouteRegex?.groups || {}),\n            ])\n          }\n          for (const key of routeParamKeys) {\n            delete parsedUrl.query[key]\n          }\n          parsedUrl.pathname = matchedPath\n          url.pathname = parsedUrl.pathname\n          finished = await this.normalizeAndAttachMetadata(req, res, parsedUrl)\n          if (finished) return\n        } catch (err) {\n          if (err instanceof DecodeError || err instanceof NormalizeError) {\n            res.statusCode = 400\n            return this.renderError(null, req, res, '/_error', {})\n          }\n          throw err\n        }\n      }\n\n      addRequestMeta(req, 'isLocaleDomain', Boolean(domainLocale))\n\n      if (pathnameInfo.locale) {\n        req.url = formatUrl(url)\n        addRequestMeta(req, 'didStripLocale', true)\n      }\n\n      // If we aren't in minimal mode or there is no locale in the query\n      // string, add the locale to the query string.\n      if (!this.minimalMode || !parsedUrl.query.__nextLocale) {\n        // If the locale is in the pathname, add it to the query string.\n        if (pathnameInfo.locale) {\n          parsedUrl.query.__nextLocale = pathnameInfo.locale\n        }\n        // If the default locale is available, add it to the query string and\n        // mark it as inferred rather than implicit.\n        else if (defaultLocale) {\n          parsedUrl.query.__nextLocale = defaultLocale\n          parsedUrl.query.__nextInferredLocaleFromDefault = '1'\n        }\n      }\n\n      // set incremental cache to request meta so it can\n      // be passed down for edge functions and the fetch disk\n      // cache can be leveraged locally\n      if (\n        !(this.serverOptions as any).webServerConfig &&\n        !getRequestMeta(req, 'incrementalCache')\n      ) {\n        let protocol: 'http:' | 'https:' = 'https:'\n\n        try {\n          const parsedFullUrl = new URL(\n            getRequestMeta(req, 'initURL') || '/',\n            'http://n'\n          )\n          protocol = parsedFullUrl.protocol as 'https:' | 'http:'\n        } catch {}\n\n        const incrementalCache = await this.getIncrementalCache({\n          requestHeaders: Object.assign({}, req.headers),\n          requestProtocol: protocol.substring(0, protocol.length - 1) as\n            | 'http'\n            | 'https',\n        })\n        incrementalCache.resetRequestCache()\n        addRequestMeta(req, 'incrementalCache', incrementalCache)\n        ;(globalThis as any).__incrementalCache = incrementalCache\n      }\n\n      // set server components HMR cache to request meta so it can be passed\n      // down for edge functions\n      if (!getRequestMeta(req, 'serverComponentsHmrCache')) {\n        addRequestMeta(\n          req,\n          'serverComponentsHmrCache',\n          this.getServerComponentsHmrCache()\n        )\n      }\n\n      // when invokePath is specified we can short short circuit resolving\n      // we only honor this header if we are inside of a render worker to\n      // prevent external users coercing the routing path\n      const invokePath = getRequestMeta(req, 'invokePath')\n      const useInvokePath =\n        !useMatchedPathHeader &&\n        process.env.NEXT_RUNTIME !== 'edge' &&\n        invokePath\n\n      if (useInvokePath) {\n        const invokeStatus = getRequestMeta(req, 'invokeStatus')\n        if (invokeStatus) {\n          const invokeQuery = getRequestMeta(req, 'invokeQuery')\n\n          if (invokeQuery) {\n            Object.assign(parsedUrl.query, invokeQuery)\n          }\n\n          res.statusCode = invokeStatus\n          let err: Error | null = getRequestMeta(req, 'invokeError') || null\n\n          return this.renderError(err, req, res, '/_error', parsedUrl.query)\n        }\n\n        const parsedMatchedPath = new URL(invokePath || '/', 'http://n')\n        const invokePathnameInfo = getNextPathnameInfo(\n          parsedMatchedPath.pathname,\n          {\n            nextConfig: this.nextConfig,\n            parseData: false,\n          }\n        )\n\n        if (invokePathnameInfo.locale) {\n          parsedUrl.query.__nextLocale = invokePathnameInfo.locale\n        }\n\n        if (parsedUrl.pathname !== parsedMatchedPath.pathname) {\n          parsedUrl.pathname = parsedMatchedPath.pathname\n          addRequestMeta(req, 'rewroteURL', invokePathnameInfo.pathname)\n        }\n        const normalizeResult = normalizeLocalePath(\n          removePathPrefix(parsedUrl.pathname, this.nextConfig.basePath || ''),\n          this.nextConfig.i18n?.locales || []\n        )\n\n        if (normalizeResult.detectedLocale) {\n          parsedUrl.query.__nextLocale = normalizeResult.detectedLocale\n        }\n        parsedUrl.pathname = normalizeResult.pathname\n\n        for (const key of Object.keys(parsedUrl.query)) {\n          if (!key.startsWith('__next') && !key.startsWith('_next')) {\n            delete parsedUrl.query[key]\n          }\n        }\n        const invokeQuery = getRequestMeta(req, 'invokeQuery')\n\n        if (invokeQuery) {\n          Object.assign(parsedUrl.query, invokeQuery)\n        }\n\n        finished = await this.normalizeAndAttachMetadata(req, res, parsedUrl)\n        if (finished) return\n\n        await this.handleCatchallRenderRequest(req, res, parsedUrl)\n        return\n      }\n\n      if (\n        process.env.NEXT_RUNTIME !== 'edge' &&\n        getRequestMeta(req, 'middlewareInvoke')\n      ) {\n        finished = await this.normalizeAndAttachMetadata(req, res, parsedUrl)\n        if (finished) return\n\n        finished = await this.handleCatchallMiddlewareRequest(\n          req,\n          res,\n          parsedUrl\n        )\n        if (finished) return\n\n        const err = new Error()\n        ;(err as any).result = {\n          response: new Response(null, {\n            headers: {\n              'x-middleware-next': '1',\n            },\n          }),\n        }\n        ;(err as any).bubble = true\n        throw err\n      }\n\n      // This wasn't a request via the matched path or the invoke path, so\n      // prepare for a legacy run by removing the base path.\n\n      // ensure we strip the basePath when not using an invoke header\n      if (!useMatchedPathHeader && pathnameInfo.basePath) {\n        parsedUrl.pathname = removePathPrefix(\n          parsedUrl.pathname,\n          pathnameInfo.basePath\n        )\n      }\n\n      res.statusCode = 200\n      return await this.run(req, res, parsedUrl)\n    } catch (err: any) {\n      if (err instanceof NoFallbackError) {\n        throw err\n      }\n\n      if (\n        (err && typeof err === 'object' && err.code === 'ERR_INVALID_URL') ||\n        err instanceof DecodeError ||\n        err instanceof NormalizeError\n      ) {\n        res.statusCode = 400\n        return this.renderError(null, req, res, '/_error', {})\n      }\n\n      if (\n        this.minimalMode ||\n        this.renderOpts.dev ||\n        (isBubbledError(err) && err.bubble)\n      ) {\n        throw err\n      }\n      this.logError(getProperError(err))\n      res.statusCode = 500\n      res.body('Internal Server Error').send()\n    }\n  }\n\n  /**\n   * Normalizes a pathname without attaching any metadata from any matched\n   * normalizer.\n   *\n   * @param pathname the pathname to normalize\n   * @returns the normalized pathname\n   */\n  private normalize = (pathname: string) => {\n    const normalizers: Array<PathnameNormalizer> = []\n\n    if (this.normalizers.data) {\n      normalizers.push(this.normalizers.data)\n    }\n\n    if (this.normalizers.postponed) {\n      normalizers.push(this.normalizers.postponed)\n    }\n\n    // We have to put the prefetch normalizer before the RSC normalizer\n    // because the RSC normalizer will match the prefetch RSC routes too.\n    if (this.normalizers.prefetchRSC) {\n      normalizers.push(this.normalizers.prefetchRSC)\n    }\n\n    if (this.normalizers.rsc) {\n      normalizers.push(this.normalizers.rsc)\n    }\n\n    for (const normalizer of normalizers) {\n      if (!normalizer.match(pathname)) continue\n\n      return normalizer.normalize(pathname, true)\n    }\n\n    return pathname\n  }\n\n  private normalizeAndAttachMetadata: RouteHandler<\n    ServerRequest,\n    ServerResponse\n  > = async (req, res, url) => {\n    let finished = await this.handleNextImageRequest(req, res, url)\n    if (finished) return true\n\n    if (this.enabledDirectories.pages) {\n      finished = await this.handleNextDataRequest(req, res, url)\n      if (finished) return true\n    }\n\n    return false\n  }\n\n  /**\n   * @internal - this method is internal to Next.js and should not be used directly by end-users\n   */\n  public getRequestHandlerWithMetadata(\n    meta: RequestMeta\n  ): BaseRequestHandler<ServerRequest, ServerResponse> {\n    const handler = this.getRequestHandler()\n    return (req, res, parsedUrl) => {\n      setRequestMeta(req, meta)\n      return handler(req, res, parsedUrl)\n    }\n  }\n\n  public getRequestHandler(): BaseRequestHandler<\n    ServerRequest,\n    ServerResponse\n  > {\n    return this.handleRequest.bind(this)\n  }\n\n  protected abstract handleUpgrade(\n    req: ServerRequest,\n    socket: any,\n    head?: any\n  ): Promise<void>\n\n  public setAssetPrefix(prefix?: string): void {\n    this.renderOpts.assetPrefix = prefix ? prefix.replace(/\\/$/, '') : ''\n  }\n\n  protected prepared: boolean = false\n  protected preparedPromise: Promise<void> | null = null\n  /**\n   * Runs async initialization of server.\n   * It is idempotent, won't fire underlying initialization more than once.\n   */\n  public async prepare(): Promise<void> {\n    if (this.prepared) return\n\n    if (this.preparedPromise === null) {\n      // Get instrumentation module\n      this.instrumentation = await this.loadInstrumentationModule()\n      this.preparedPromise = this.prepareImpl().then(() => {\n        this.prepared = true\n        this.preparedPromise = null\n      })\n    }\n    return this.preparedPromise\n  }\n  protected async prepareImpl(): Promise<void> {}\n  protected async loadInstrumentationModule(): Promise<any> {}\n\n  // Backwards compatibility\n  protected async close(): Promise<void> {}\n\n  protected getAppPathRoutes(): Record<string, string[]> {\n    const appPathRoutes: Record<string, string[]> = {}\n\n    Object.keys(this.appPathsManifest || {}).forEach((entry) => {\n      const normalizedPath = normalizeAppPath(entry)\n      if (!appPathRoutes[normalizedPath]) {\n        appPathRoutes[normalizedPath] = []\n      }\n      appPathRoutes[normalizedPath].push(entry)\n    })\n    return appPathRoutes\n  }\n\n  protected async run(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl: UrlWithParsedQuery\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.run, async () =>\n      this.runImpl(req, res, parsedUrl)\n    )\n  }\n\n  private async runImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl: UrlWithParsedQuery\n  ): Promise<void> {\n    await this.handleCatchallRenderRequest(req, res, parsedUrl)\n  }\n\n  private async pipe(\n    fn: (\n      ctx: RequestContext<ServerRequest, ServerResponse>\n    ) => Promise<ResponsePayload | null>,\n    partialContext: Omit<\n      RequestContext<ServerRequest, ServerResponse>,\n      'renderOpts'\n    >\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.pipe, async () =>\n      this.pipeImpl(fn, partialContext)\n    )\n  }\n\n  private async pipeImpl(\n    fn: (\n      ctx: RequestContext<ServerRequest, ServerResponse>\n    ) => Promise<ResponsePayload | null>,\n    partialContext: Omit<\n      RequestContext<ServerRequest, ServerResponse>,\n      'renderOpts'\n    >\n  ): Promise<void> {\n    const isBotRequest = isBot(partialContext.req.headers['user-agent'] || '')\n    const ctx: RequestContext<ServerRequest, ServerResponse> = {\n      ...partialContext,\n      renderOpts: {\n        ...this.renderOpts,\n        supportsDynamicResponse: !isBotRequest,\n        isBot: !!isBotRequest,\n      },\n    }\n    const payload = await fn(ctx)\n    if (payload === null) {\n      return\n    }\n    const { req, res } = ctx\n    const originalStatus = res.statusCode\n    const { body, type } = payload\n    let { revalidate } = payload\n    if (!res.sent) {\n      const { generateEtags, poweredByHeader, dev } = this.renderOpts\n\n      // In dev, we should not cache pages for any reason.\n      if (dev) {\n        res.setHeader('Cache-Control', 'no-store, must-revalidate')\n        revalidate = undefined\n      }\n\n      await this.sendRenderResult(req, res, {\n        result: body,\n        type,\n        generateEtags,\n        poweredByHeader,\n        revalidate,\n        swrDelta: this.nextConfig.swrDelta,\n      })\n      res.statusCode = originalStatus\n    }\n  }\n\n  private async getStaticHTML(\n    fn: (\n      ctx: RequestContext<ServerRequest, ServerResponse>\n    ) => Promise<ResponsePayload | null>,\n    partialContext: Omit<\n      RequestContext<ServerRequest, ServerResponse>,\n      'renderOpts'\n    >\n  ): Promise<string | null> {\n    const ctx: RequestContext<ServerRequest, ServerResponse> = {\n      ...partialContext,\n      renderOpts: {\n        ...this.renderOpts,\n        supportsDynamicResponse: false,\n      },\n    }\n    const payload = await fn(ctx)\n    if (payload === null) {\n      return null\n    }\n    return payload.body.toUnchunkedString()\n  }\n\n  public async render(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    parsedUrl?: NextUrlWithParsedQuery,\n    internalRender = false\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.render, async () =>\n      this.renderImpl(req, res, pathname, query, parsedUrl, internalRender)\n    )\n  }\n\n  private getWaitUntil(): WaitUntil | undefined {\n    const builtinRequestContext = getBuiltinRequestContext()\n    if (builtinRequestContext) {\n      // the platform provided a request context.\n      // use the `waitUntil` from there, whether actually present or not --\n      // if not present, `unstable_after` will error.\n      return builtinRequestContext.waitUntil\n    }\n\n    if (process.env.__NEXT_TEST_MODE) {\n      // we're in a test, use a no-op.\n      return Server.noopWaitUntil\n    }\n\n    if (this.minimalMode || process.env.NEXT_RUNTIME === 'edge') {\n      // we're built for a serverless environment, and `waitUntil` is not available,\n      // but using a noop would likely lead to incorrect behavior,\n      // because we have no way of keeping the invocation alive.\n      // return nothing, and `unstable_after` will error if used.\n      return undefined\n    }\n\n    // we're in `next start` or `next dev`. noop is fine for both.\n    return Server.noopWaitUntil\n  }\n\n  private static noopWaitUntil(promise: Promise<any>) {\n    promise.catch((err: unknown) => {\n      console.error(err)\n    })\n  }\n\n  private async renderImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    parsedUrl?: NextUrlWithParsedQuery,\n    internalRender = false\n  ): Promise<void> {\n    if (!pathname.startsWith('/')) {\n      console.warn(\n        `Cannot render page with path \"${pathname}\", did you mean \"/${pathname}\"?. See more info here: https://nextjs.org/docs/messages/render-no-starting-slash`\n      )\n    }\n\n    if (\n      this.renderOpts.customServer &&\n      pathname === '/index' &&\n      !(await this.hasPage('/index'))\n    ) {\n      // maintain backwards compatibility for custom server\n      // (see custom-server integration tests)\n      pathname = '/'\n    }\n\n    // we allow custom servers to call render for all URLs\n    // so check if we need to serve a static _next file or not.\n    // we don't modify the URL for _next/data request but still\n    // call render so we special case this to prevent an infinite loop\n    if (\n      !internalRender &&\n      !this.minimalMode &&\n      !query.__nextDataReq &&\n      (req.url?.match(/^\\/_next\\//) ||\n        (this.hasStaticDir && req.url!.match(/^\\/static\\//)))\n    ) {\n      return this.handleRequest(req, res, parsedUrl)\n    }\n\n    if (isBlockedPage(pathname)) {\n      return this.render404(req, res, parsedUrl)\n    }\n\n    return this.pipe((ctx) => this.renderToResponse(ctx), {\n      req,\n      res,\n      pathname,\n      query,\n    })\n  }\n\n  protected async getStaticPaths({\n    pathname,\n  }: {\n    pathname: string\n    requestHeaders: import('./lib/incremental-cache').IncrementalCache['requestHeaders']\n    page: string\n    isAppPath: boolean\n  }): Promise<{\n    staticPaths?: string[]\n    fallbackMode?: FallbackMode\n  }> {\n    // Read whether or not fallback should exist from the manifest.\n    const fallbackField =\n      this.getPrerenderManifest().dynamicRoutes[pathname]?.fallback\n\n    return {\n      // `staticPaths` is intentionally set to `undefined` as it should've\n      // been caught when checking disk data.\n      staticPaths: undefined,\n      fallbackMode: parseFallbackField(fallbackField),\n    }\n  }\n\n  private async renderToResponseWithComponents(\n    requestContext: RequestContext<ServerRequest, ServerResponse>,\n    findComponentsResult: FindComponentsResult\n  ): Promise<ResponsePayload | null> {\n    return getTracer().trace(\n      BaseServerSpan.renderToResponseWithComponents,\n      async () =>\n        this.renderToResponseWithComponentsImpl(\n          requestContext,\n          findComponentsResult\n        )\n    )\n  }\n\n  protected pathCouldBeIntercepted(resolvedPathname: string): boolean {\n    return (\n      isInterceptionRouteAppPath(resolvedPathname) ||\n      this.interceptionRoutePatterns.some((regexp) => {\n        return regexp.test(resolvedPathname)\n      })\n    )\n  }\n\n  protected setVaryHeader(\n    req: ServerRequest,\n    res: ServerResponse,\n    isAppPath: boolean,\n    resolvedPathname: string\n  ): void {\n    const baseVaryHeader = `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}`\n    const isRSCRequest = getRequestMeta(req, 'isRSCRequest') ?? false\n\n    let addedNextUrlToVary = false\n\n    if (isAppPath && this.pathCouldBeIntercepted(resolvedPathname)) {\n      // Interception route responses can vary based on the `Next-URL` header.\n      // We use the Vary header to signal this behavior to the client to properly cache the response.\n      res.setHeader('vary', `${baseVaryHeader}, ${NEXT_URL}`)\n      addedNextUrlToVary = true\n    } else if (isAppPath || isRSCRequest) {\n      // We don't need to include `Next-URL` in the Vary header for non-interception routes since it won't affect the response.\n      // We also set this header for pages to avoid caching issues when navigating between pages and app.\n      res.setHeader('vary', baseVaryHeader)\n    }\n\n    if (!addedNextUrlToVary) {\n      // Remove `Next-URL` from the request headers we determined it wasn't necessary to include in the Vary header.\n      // This is to avoid any dependency on the `Next-URL` header being present when preparing the response.\n      delete req.headers[NEXT_URL]\n    }\n  }\n\n  private async renderToResponseWithComponentsImpl(\n    {\n      req,\n      res,\n      pathname,\n      renderOpts: opts,\n    }: RequestContext<ServerRequest, ServerResponse>,\n    { components, query }: FindComponentsResult\n  ): Promise<ResponsePayload | null> {\n    if (pathname === UNDERSCORE_NOT_FOUND_ROUTE) {\n      pathname = '/404'\n    }\n    const is404Page = pathname === '/404'\n\n    const is500Page = pathname === '/500'\n    const isAppPath = components.isAppPath === true\n\n    const hasServerProps = !!components.getServerSideProps\n    let hasGetStaticPaths = !!components.getStaticPaths\n    const isServerAction = getIsServerAction(req)\n    const hasGetInitialProps = !!components.Component?.getInitialProps\n    let isSSG = !!components.getStaticProps\n\n    // Compute the iSSG cache key. We use the rewroteUrl since\n    // pages with fallback: false are allowed to be rewritten to\n    // and we need to look up the path by the rewritten path\n    let urlPathname = parseUrl(req.url || '').pathname || '/'\n\n    let resolvedUrlPathname = getRequestMeta(req, 'rewroteURL') || urlPathname\n\n    this.setVaryHeader(req, res, isAppPath, resolvedUrlPathname)\n\n    let staticPaths: string[] | undefined\n    let fallbackMode: FallbackMode | undefined\n    let hasFallback = false\n\n    const isDynamic = isDynamicRoute(components.page)\n\n    const prerenderManifest = this.getPrerenderManifest()\n\n    if (isAppPath && isDynamic) {\n      const pathsResult = await this.getStaticPaths({\n        pathname,\n        page: components.page,\n        isAppPath,\n        requestHeaders: req.headers,\n      })\n\n      staticPaths = pathsResult.staticPaths\n      fallbackMode = pathsResult.fallbackMode\n      hasFallback = typeof fallbackMode !== 'undefined'\n\n      if (this.nextConfig.output === 'export') {\n        const page = components.page\n        if (!staticPaths) {\n          throw new Error(\n            `Page \"${page}\" is missing exported function \"generateStaticParams()\", which is required with \"output: export\" config.`\n          )\n        }\n\n        const resolvedWithoutSlash = removeTrailingSlash(resolvedUrlPathname)\n        if (!staticPaths.includes(resolvedWithoutSlash)) {\n          throw new Error(\n            `Page \"${page}\" is missing param \"${resolvedWithoutSlash}\" in \"generateStaticParams()\", which is required with \"output: export\" config.`\n          )\n        }\n      }\n\n      if (hasFallback) {\n        hasGetStaticPaths = true\n      }\n    }\n\n    if (\n      hasFallback ||\n      staticPaths?.includes(resolvedUrlPathname) ||\n      // this signals revalidation in deploy environments\n      // TODO: make this more generic\n      req.headers['x-now-route-matches']\n    ) {\n      isSSG = true\n    } else if (!this.renderOpts.dev) {\n      isSSG ||= !!prerenderManifest.routes[toRoute(pathname)]\n    }\n\n    // Toggle whether or not this is a Data request\n    const isNextDataRequest =\n      !!(\n        query.__nextDataReq ||\n        (req.headers['x-nextjs-data'] &&\n          (this.serverOptions as any).webServerConfig)\n      ) &&\n      (isSSG || hasServerProps)\n\n    /**\n     * If true, this indicates that the request being made is for an app\n     * prefetch request.\n     */\n    const isPrefetchRSCRequest =\n      getRequestMeta(req, 'isPrefetchRSCRequest') ?? false\n\n    // NOTE: Don't delete headers[RSC] yet, it still needs to be used in renderToHTML later\n\n    const isRSCRequest = getRequestMeta(req, 'isRSCRequest') ?? false\n\n    // when we are handling a middleware prefetch and it doesn't\n    // resolve to a static data route we bail early to avoid\n    // unexpected SSR invocations\n    if (\n      !isSSG &&\n      req.headers['x-middleware-prefetch'] &&\n      !(is404Page || pathname === '/_error')\n    ) {\n      res.setHeader('x-matched-path', pathname)\n      res.setHeader('x-middleware-skip', '1')\n      res.setHeader(\n        'cache-control',\n        'private, no-cache, no-store, max-age=0, must-revalidate'\n      )\n      res.body('{}').send()\n      return null\n    }\n\n    delete query.__nextDataReq\n\n    // normalize req.url for SSG paths as it is not exposed\n    // to getStaticProps and the asPath should not expose /_next/data\n    if (\n      isSSG &&\n      this.minimalMode &&\n      req.headers['x-matched-path'] &&\n      req.url.startsWith('/_next/data')\n    ) {\n      req.url = this.stripNextDataPath(req.url)\n    }\n\n    if (\n      !!req.headers['x-nextjs-data'] &&\n      (!res.statusCode || res.statusCode === 200)\n    ) {\n      res.setHeader(\n        'x-nextjs-matched-path',\n        `${query.__nextLocale ? `/${query.__nextLocale}` : ''}${pathname}`\n      )\n    }\n\n    let routeModule: RouteModule | undefined\n    if (components.routeModule) {\n      routeModule = components.routeModule\n    }\n\n    /**\n     * If the route being rendered is an app page, and the ppr feature has been\n     * enabled, then the given route _could_ support PPR.\n     */\n    const couldSupportPPR: boolean =\n      this.isAppPPREnabled &&\n      typeof routeModule !== 'undefined' &&\n      isAppPageRouteModule(routeModule)\n\n    // When enabled, this will allow the use of the `?__nextppronly` query to\n    // enable debugging of the static shell.\n    const hasDebugStaticShellQuery =\n      process.env.__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING === '1' &&\n      typeof query.__nextppronly !== 'undefined' &&\n      couldSupportPPR\n\n    // This page supports PPR if it is marked as being `PARTIALLY_STATIC` in the\n    // prerender manifest and this is an app page.\n    const isRoutePPREnabled: boolean =\n      couldSupportPPR &&\n      ((\n        prerenderManifest.routes[pathname] ??\n        prerenderManifest.dynamicRoutes[pathname]\n      )?.renderingMode === 'PARTIALLY_STATIC' ||\n        // Ideally we'd want to check the appConfig to see if this page has PPR\n        // enabled or not, but that would require plumbing the appConfig through\n        // to the server during development. We assume that the page supports it\n        // but only during development.\n        (hasDebugStaticShellQuery &&\n          (this.renderOpts.dev === true ||\n            this.experimentalTestProxy === true)))\n\n    const isDebugStaticShell: boolean =\n      hasDebugStaticShellQuery && isRoutePPREnabled\n\n    // We should enable debugging dynamic accesses when the static shell\n    // debugging has been enabled and we're also in development mode.\n    const isDebugDynamicAccesses =\n      isDebugStaticShell && this.renderOpts.dev === true\n\n    // If we're in minimal mode, then try to get the postponed information from\n    // the request metadata. If available, use it for resuming the postponed\n    // render.\n    const minimalPostponed = isRoutePPREnabled\n      ? getRequestMeta(req, 'postponed')\n      : undefined\n\n    // If PPR is enabled, and this is a RSC request (but not a prefetch), then\n    // we can use this fact to only generate the flight data for the request\n    // because we can't cache the HTML (as it's also dynamic).\n    const isDynamicRSCRequest =\n      isRoutePPREnabled && isRSCRequest && !isPrefetchRSCRequest\n\n    // we need to ensure the status code if /404 is visited directly\n    if (is404Page && !isNextDataRequest && !isRSCRequest) {\n      res.statusCode = 404\n    }\n\n    // ensure correct status is set when visiting a status page\n    // directly e.g. /500\n    if (STATIC_STATUS_PAGES.includes(pathname)) {\n      res.statusCode = parseInt(pathname.slice(1), 10)\n    }\n\n    if (\n      // Server actions can use non-GET/HEAD methods.\n      !isServerAction &&\n      // Resume can use non-GET/HEAD methods.\n      !minimalPostponed &&\n      !is404Page &&\n      !is500Page &&\n      pathname !== '/_error' &&\n      req.method !== 'HEAD' &&\n      req.method !== 'GET' &&\n      (typeof components.Component === 'string' || isSSG)\n    ) {\n      res.statusCode = 405\n      res.setHeader('Allow', ['GET', 'HEAD'])\n      await this.renderError(null, req, res, pathname)\n      return null\n    }\n\n    // handle static page\n    if (typeof components.Component === 'string') {\n      return {\n        type: 'html',\n        // TODO: Static pages should be serialized as RenderResult\n        body: RenderResult.fromStatic(components.Component),\n      }\n    }\n\n    // Ensure that if the `amp` query parameter is falsy that we remove it from\n    // the query object. This ensures it won't be found by the `in` operator.\n    if ('amp' in query && !query.amp) delete query.amp\n\n    if (opts.supportsDynamicResponse === true) {\n      const isBotRequest = isBot(req.headers['user-agent'] || '')\n      const isSupportedDocument =\n        typeof components.Document?.getInitialProps !== 'function' ||\n        // The built-in `Document` component also supports dynamic HTML for concurrent mode.\n        NEXT_BUILTIN_DOCUMENT in components.Document\n\n      // Disable dynamic HTML in cases that we know it won't be generated,\n      // so that we can continue generating a cache key when possible.\n      // TODO-APP: should the first render for a dynamic app path\n      // be static so we can collect revalidate and populate the\n      // cache if there are no dynamic data requirements\n      opts.supportsDynamicResponse =\n        !isSSG && !isBotRequest && !query.amp && isSupportedDocument\n      opts.isBot = isBotRequest\n    }\n\n    // In development, we always want to generate dynamic HTML.\n    if (!isNextDataRequest && isAppPath && opts.dev) {\n      opts.supportsDynamicResponse = true\n    }\n\n    const defaultLocale = isSSG\n      ? this.nextConfig.i18n?.defaultLocale\n      : query.__nextDefaultLocale\n\n    const locale = query.__nextLocale\n    const locales = this.nextConfig.i18n?.locales\n\n    let previewData: PreviewData\n    let isPreviewMode = false\n\n    if (hasServerProps || isSSG || isAppPath) {\n      // For the edge runtime, we don't support preview mode in SSG.\n      if (process.env.NEXT_RUNTIME !== 'edge') {\n        const { tryGetPreviewData } =\n          require('./api-utils/node/try-get-preview-data') as typeof import('./api-utils/node/try-get-preview-data')\n        previewData = tryGetPreviewData(\n          req,\n          res,\n          this.renderOpts.previewProps,\n          !!this.nextConfig.experimental.multiZoneDraftMode\n        )\n        isPreviewMode = previewData !== false\n      }\n    }\n\n    // If this is a request for an app path that should be statically generated\n    // and we aren't in the edge runtime, strip the flight headers so it will\n    // generate the static response.\n    if (\n      isAppPath &&\n      !opts.dev &&\n      !isPreviewMode &&\n      isSSG &&\n      isRSCRequest &&\n      !isDynamicRSCRequest &&\n      (!isEdgeRuntime(opts.runtime) ||\n        (this.serverOptions as any).webServerConfig)\n    ) {\n      stripFlightHeaders(req.headers)\n    }\n\n    let isOnDemandRevalidate = false\n    let revalidateOnlyGenerated = false\n\n    if (isSSG) {\n      ;({ isOnDemandRevalidate, revalidateOnlyGenerated } =\n        checkIsOnDemandRevalidate(req, this.renderOpts.previewProps))\n    }\n\n    if (isSSG && this.minimalMode && req.headers['x-matched-path']) {\n      // the url value is already correct when the matched-path header is set\n      resolvedUrlPathname = urlPathname\n    }\n\n    urlPathname = removeTrailingSlash(urlPathname)\n    resolvedUrlPathname = removeTrailingSlash(resolvedUrlPathname)\n    if (this.localeNormalizer) {\n      resolvedUrlPathname = this.localeNormalizer.normalize(resolvedUrlPathname)\n    }\n\n    const handleRedirect = (pageData: any) => {\n      const redirect = {\n        destination: pageData.pageProps.__N_REDIRECT,\n        statusCode: pageData.pageProps.__N_REDIRECT_STATUS,\n        basePath: pageData.pageProps.__N_REDIRECT_BASE_PATH,\n      }\n      const statusCode = getRedirectStatus(redirect)\n      const { basePath } = this.nextConfig\n\n      if (\n        basePath &&\n        redirect.basePath !== false &&\n        redirect.destination.startsWith('/')\n      ) {\n        redirect.destination = `${basePath}${redirect.destination}`\n      }\n\n      if (redirect.destination.startsWith('/')) {\n        redirect.destination = normalizeRepeatedSlashes(redirect.destination)\n      }\n\n      res\n        .redirect(redirect.destination, statusCode)\n        .body(redirect.destination)\n        .send()\n    }\n\n    // remove /_next/data prefix from urlPathname so it matches\n    // for direct page visit and /_next/data visit\n    if (isNextDataRequest) {\n      resolvedUrlPathname = this.stripNextDataPath(resolvedUrlPathname)\n      urlPathname = this.stripNextDataPath(urlPathname)\n    }\n\n    let ssgCacheKey: string | null = null\n    if (\n      !isPreviewMode &&\n      isSSG &&\n      !opts.supportsDynamicResponse &&\n      !isServerAction &&\n      !minimalPostponed &&\n      !isDynamicRSCRequest\n    ) {\n      ssgCacheKey = `${locale ? `/${locale}` : ''}${\n        (pathname === '/' || resolvedUrlPathname === '/') && locale\n          ? ''\n          : resolvedUrlPathname\n      }${query.amp ? '.amp' : ''}`\n    }\n\n    if ((is404Page || is500Page) && isSSG) {\n      ssgCacheKey = `${locale ? `/${locale}` : ''}${pathname}${\n        query.amp ? '.amp' : ''\n      }`\n    }\n\n    if (ssgCacheKey) {\n      // we only encode path delimiters for path segments from\n      // getStaticPaths so we need to attempt decoding the URL\n      // to match against and only escape the path delimiters\n      // this allows non-ascii values to be handled e.g. Japanese characters\n\n      // TODO: investigate adding this handling for non-SSG pages so\n      // non-ascii names work there also\n      ssgCacheKey = ssgCacheKey\n        .split('/')\n        .map((seg) => {\n          try {\n            seg = escapePathDelimiters(decodeURIComponent(seg), true)\n          } catch (_) {\n            // An improperly encoded URL was provided\n            throw new DecodeError('failed to decode param')\n          }\n          return seg\n        })\n        .join('/')\n\n      // ensure /index and / is normalized to one key\n      ssgCacheKey =\n        ssgCacheKey === '/index' && pathname === '/' ? '/' : ssgCacheKey\n    }\n    let protocol: 'http:' | 'https:' = 'https:'\n\n    try {\n      const parsedFullUrl = new URL(\n        getRequestMeta(req, 'initURL') || '/',\n        'http://n'\n      )\n      protocol = parsedFullUrl.protocol as 'https:' | 'http:'\n    } catch {}\n\n    // use existing incrementalCache instance if available\n    const incrementalCache: import('./lib/incremental-cache').IncrementalCache =\n      (globalThis as any).__incrementalCache ||\n      (await this.getIncrementalCache({\n        requestHeaders: Object.assign({}, req.headers),\n        requestProtocol: protocol.substring(0, protocol.length - 1) as\n          | 'http'\n          | 'https',\n      }))\n\n    // TODO: investigate, this is not safe across multiple concurrent requests\n    incrementalCache.resetRequestCache()\n\n    type RendererContext = {\n      /**\n       * The postponed data for this render. This is only provided when resuming\n       * a render that has been postponed.\n       */\n      postponed: string | undefined\n\n      /**\n       * The unknown route params for this render.\n       */\n      fallbackRouteParams: FallbackRouteParams | null\n    }\n    type Renderer = (\n      context: RendererContext\n    ) => Promise<ResponseCacheEntry | null>\n\n    const doRender: Renderer = async ({ postponed, fallbackRouteParams }) => {\n      // In development, we always want to generate dynamic HTML.\n      let supportsDynamicResponse: boolean =\n        // If we're in development, we always support dynamic HTML, unless it's\n        // a data request, in which case we only produce static HTML.\n        (!isNextDataRequest && opts.dev === true) ||\n        // If this is not SSG or does not have static paths, then it supports\n        // dynamic HTML.\n        (!isSSG && !hasGetStaticPaths) ||\n        // If this request has provided postponed data, it supports dynamic\n        // HTML.\n        typeof postponed === 'string' ||\n        // If this is a dynamic RSC request, then this render supports dynamic\n        // HTML (it's dynamic).\n        isDynamicRSCRequest\n\n      const origQuery = parseUrl(req.url || '', true).query\n\n      // clear any dynamic route params so they aren't in\n      // the resolvedUrl\n      if (opts.params) {\n        Object.keys(opts.params).forEach((key) => {\n          delete origQuery[key]\n        })\n      }\n      const hadTrailingSlash =\n        urlPathname !== '/' && this.nextConfig.trailingSlash\n\n      const resolvedUrl = formatUrl({\n        pathname: `${resolvedUrlPathname}${hadTrailingSlash ? '/' : ''}`,\n        // make sure to only add query values from original URL\n        query: origQuery,\n      })\n      const renderOpts: LoadedRenderOpts = {\n        ...components,\n        ...opts,\n        ...(isAppPath\n          ? {\n              incrementalCache,\n              // This is a revalidation request if the request is for a static\n              // page and it is not being resumed from a postponed render and\n              // it is not a dynamic RSC request then it is a revalidation\n              // request.\n              isRevalidate: isSSG && !postponed && !isDynamicRSCRequest,\n              serverActions: this.nextConfig.experimental.serverActions,\n            }\n          : {}),\n        isNextDataRequest,\n        resolvedUrl,\n        locale,\n        locales,\n        defaultLocale,\n        multiZoneDraftMode: this.nextConfig.experimental.multiZoneDraftMode,\n        // For getServerSideProps and getInitialProps we need to ensure we use the original URL\n        // and not the resolved URL to prevent a hydration mismatch on\n        // asPath\n        resolvedAsPath:\n          hasServerProps || hasGetInitialProps\n            ? formatUrl({\n                // we use the original URL pathname less the _next/data prefix if\n                // present\n                pathname: `${urlPathname}${hadTrailingSlash ? '/' : ''}`,\n                query: origQuery,\n              })\n            : resolvedUrl,\n        experimental: {\n          ...opts.experimental,\n          isRoutePPREnabled,\n        },\n        supportsDynamicResponse,\n        isOnDemandRevalidate,\n        isDraftMode: isPreviewMode,\n        isServerAction,\n        postponed,\n        waitUntil: this.getWaitUntil(),\n        onClose: res.onClose.bind(res),\n        // only available in dev\n        setAppIsrStatus: (this as any).setAppIsrStatus,\n      }\n\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        supportsDynamicResponse = false\n        renderOpts.nextExport = true\n        renderOpts.supportsDynamicResponse = false\n        renderOpts.isStaticGeneration = true\n        renderOpts.isRevalidate = true\n        renderOpts.isDebugStaticShell = isDebugStaticShell\n        renderOpts.isDebugDynamicAccesses = isDebugDynamicAccesses\n      }\n\n      // Legacy render methods will return a render result that needs to be\n      // served by the server.\n      let result: RenderResult\n\n      if (routeModule) {\n        if (isAppRouteRouteModule(routeModule)) {\n          if (\n            // The type check here ensures that `req` is correctly typed, and the\n            // environment variable check provides dead code elimination.\n            process.env.NEXT_RUNTIME === 'edge' ||\n            !isNodeNextRequest(req) ||\n            !isNodeNextResponse(res)\n          ) {\n            throw new Error(\n              'Invariant: App Route Route Modules cannot be used in the edge runtime'\n            )\n          }\n\n          const context: AppRouteRouteHandlerContext = {\n            params: opts.params,\n            prerenderManifest,\n            renderOpts: {\n              experimental: {\n                after: renderOpts.experimental.after,\n                dynamicIO: renderOpts.experimental.dynamicIO,\n              },\n              supportsDynamicResponse,\n              incrementalCache,\n              isRevalidate: isSSG,\n              waitUntil: this.getWaitUntil(),\n              onClose: res.onClose.bind(res),\n              onInstrumentationRequestError:\n                this.renderOpts.onInstrumentationRequestError,\n            },\n          }\n\n          try {\n            const request = NextRequestAdapter.fromNodeNextRequest(\n              req,\n              signalFromNodeResponse(res.originalResponse)\n            )\n\n            const response = await routeModule.handle(request, context)\n\n            ;(req as any).fetchMetrics = (\n              context.renderOpts as any\n            ).fetchMetrics\n\n            const cacheTags = (context.renderOpts as any).fetchTags\n\n            // If the request is for a static response, we can cache it so long\n            // as it's not edge.\n            if (isSSG) {\n              const blob = await response.blob()\n\n              // Copy the headers from the response.\n              const headers = toNodeOutgoingHttpHeaders(response.headers)\n\n              if (cacheTags) {\n                headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n              }\n\n              if (!headers['content-type'] && blob.type) {\n                headers['content-type'] = blob.type\n              }\n\n              const revalidate = context.renderOpts.store?.revalidate ?? false\n\n              // Create the cache entry for the response.\n              const cacheEntry: ResponseCacheEntry = {\n                value: {\n                  kind: CachedRouteKind.APP_ROUTE,\n                  status: response.status,\n                  body: Buffer.from(await blob.arrayBuffer()),\n                  headers,\n                },\n                revalidate,\n                isFallback: false,\n              }\n\n              return cacheEntry\n            }\n\n            // Send the response now that we have copied it into the cache.\n            await sendResponse(\n              req,\n              res,\n              response,\n              context.renderOpts.pendingWaitUntil\n            )\n            return null\n          } catch (err) {\n            await this.instrumentationOnRequestError(err, req, {\n              routerKind: 'App Router',\n              routePath: pathname,\n              routeType: 'route',\n              revalidateReason: getRevalidateReason(renderOpts),\n            })\n\n            // If this is during static generation, throw the error again.\n            if (isSSG) throw err\n\n            Log.error(err)\n\n            // Otherwise, send a 500 response.\n            await sendResponse(req, res, handleInternalServerErrorResponse())\n\n            return null\n          }\n        } else if (\n          isPagesRouteModule(routeModule) ||\n          isAppPageRouteModule(routeModule)\n        ) {\n          // An OPTIONS request to a page handler is invalid.\n          if (req.method === 'OPTIONS' && !is404Page) {\n            await sendResponse(req, res, handleBadRequestResponse())\n            return null\n          }\n\n          if (isPagesRouteModule(routeModule)) {\n            // Due to the way we pass data by mutating `renderOpts`, we can't extend\n            // the object here but only updating its `clientReferenceManifest` and\n            // `nextFontManifest` properties.\n            // https://github.com/vercel/next.js/blob/df7cbd904c3bd85f399d1ce90680c0ecf92d2752/packages/next/server/render.tsx#L947-L952\n            renderOpts.nextFontManifest = this.nextFontManifest\n            renderOpts.clientReferenceManifest =\n              components.clientReferenceManifest\n\n            const request = isNodeNextRequest(req) ? req.originalRequest : req\n            const response = isNodeNextResponse(res)\n              ? res.originalResponse\n              : res\n\n            // Call the built-in render method on the module.\n            try {\n              result = await routeModule.render(\n                // TODO: fix this type\n                // @ts-expect-error - preexisting accepted this\n                request,\n                response,\n                {\n                  page: pathname,\n                  params: opts.params,\n                  query,\n                  renderOpts,\n                }\n              )\n            } catch (err) {\n              await this.instrumentationOnRequestError(err, req, {\n                routerKind: 'Pages Router',\n                routePath: pathname,\n                routeType: 'render',\n                revalidateReason: getRevalidateReason({\n                  isRevalidate: isSSG,\n                  isOnDemandRevalidate: renderOpts.isOnDemandRevalidate,\n                }),\n              })\n              throw err\n            }\n          } else {\n            const module = components.routeModule as AppPageRouteModule\n\n            // Due to the way we pass data by mutating `renderOpts`, we can't extend the\n            // object here but only updating its `nextFontManifest` field.\n            // https://github.com/vercel/next.js/blob/df7cbd904c3bd85f399d1ce90680c0ecf92d2752/packages/next/server/render.tsx#L947-L952\n            renderOpts.nextFontManifest = this.nextFontManifest\n\n            // Call the built-in render method on the module.\n            result = await module.render(req, res, {\n              page: is404Page ? '/404' : pathname,\n              params: opts.params,\n              query,\n              fallbackRouteParams,\n              renderOpts,\n              serverComponentsHmrCache: this.getServerComponentsHmrCache(),\n            })\n          }\n        } else {\n          throw new Error('Invariant: Unknown route module type')\n        }\n      } else {\n        // If we didn't match a page, we should fallback to using the legacy\n        // render method.\n        result = await this.renderHTML(req, res, pathname, query, renderOpts)\n      }\n\n      const { metadata } = result\n\n      const {\n        headers = {},\n        // Add any fetch tags that were on the page to the response headers.\n        fetchTags: cacheTags,\n      } = metadata\n\n      if (cacheTags) {\n        headers[NEXT_CACHE_TAGS_HEADER] = cacheTags\n      }\n\n      // Pull any fetch metrics from the render onto the request.\n      ;(req as any).fetchMetrics = metadata.fetchMetrics\n\n      // we don't throw static to dynamic errors in dev as isSSG\n      // is a best guess in dev since we don't have the prerender pass\n      // to know whether the path is actually static or not\n      if (\n        isAppPath &&\n        isSSG &&\n        metadata.revalidate === 0 &&\n        !this.renderOpts.dev &&\n        !isRoutePPREnabled\n      ) {\n        const staticBailoutInfo = metadata.staticBailoutInfo\n\n        const err = new Error(\n          `Page changed from static to dynamic at runtime ${urlPathname}${\n            staticBailoutInfo?.description\n              ? `, reason: ${staticBailoutInfo.description}`\n              : ``\n          }` +\n            `\\nsee more here https://nextjs.org/docs/messages/app-static-to-dynamic-error`\n        )\n\n        if (staticBailoutInfo?.stack) {\n          const stack = staticBailoutInfo.stack\n          err.stack = err.message + stack.substring(stack.indexOf('\\n'))\n        }\n\n        throw err\n      }\n\n      // Based on the metadata, we can determine what kind of cache result we\n      // should return.\n\n      // Handle `isNotFound`.\n      if ('isNotFound' in metadata && metadata.isNotFound) {\n        return {\n          value: null,\n          revalidate: metadata.revalidate,\n          isFallback: false,\n        } satisfies ResponseCacheEntry\n      }\n\n      // Handle `isRedirect`.\n      if (metadata.isRedirect) {\n        return {\n          value: {\n            kind: CachedRouteKind.REDIRECT,\n            props: metadata.pageData ?? metadata.flightData,\n          } satisfies CachedRedirectValue,\n          revalidate: metadata.revalidate,\n          isFallback: false,\n        } satisfies ResponseCacheEntry\n      }\n\n      // Handle `isNull`.\n      if (result.isNull) {\n        return null\n      }\n\n      // We now have a valid HTML result that we can return to the user.\n      if (isAppPath) {\n        return {\n          value: {\n            kind: CachedRouteKind.APP_PAGE,\n            html: result,\n            headers,\n            rscData: metadata.flightData,\n            postponed: metadata.postponed,\n            status: res.statusCode,\n          } satisfies CachedAppPageValue,\n          revalidate: metadata.revalidate,\n          isFallback: !!fallbackRouteParams,\n        } satisfies ResponseCacheEntry\n      }\n\n      return {\n        value: {\n          kind: CachedRouteKind.PAGES,\n          html: result,\n          pageData: metadata.pageData ?? metadata.flightData,\n          headers,\n          status: isAppPath ? res.statusCode : undefined,\n        } satisfies CachedPageValue,\n        revalidate: metadata.revalidate ?? 1,\n        isFallback: query.__nextFallback === 'true',\n      }\n    }\n\n    const responseGenerator: ResponseGenerator = async ({\n      hasResolved,\n      previousCacheEntry,\n      isRevalidating,\n    }): Promise<ResponseCacheEntry | null> => {\n      const isProduction = !this.renderOpts.dev\n      const didRespond = hasResolved || res.sent\n\n      // If we haven't found the static paths for the route, then do it now.\n      if (!staticPaths && isDynamic) {\n        if (hasGetStaticPaths) {\n          const pathsResult = await this.getStaticPaths({\n            pathname,\n            requestHeaders: req.headers,\n            isAppPath,\n            page: components.page,\n          })\n\n          staticPaths = pathsResult.staticPaths\n          fallbackMode = pathsResult.fallbackMode\n        } else {\n          staticPaths = undefined\n          fallbackMode = FallbackMode.NOT_FOUND\n        }\n      }\n\n      // When serving a bot request, we want to serve a blocking render and not\n      // the prerendered page. This ensures that the correct content is served\n      // to the bot in the head.\n      if (\n        fallbackMode === FallbackMode.PRERENDER &&\n        isBot(req.headers['user-agent'] || '')\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      // skip on-demand revalidate if cache is not present and\n      // revalidate-if-generated is set\n      if (\n        isOnDemandRevalidate &&\n        revalidateOnlyGenerated &&\n        !previousCacheEntry &&\n        !this.minimalMode\n      ) {\n        await this.render404(req, res)\n        return null\n      }\n\n      if (previousCacheEntry?.isStale === -1) {\n        isOnDemandRevalidate = true\n      }\n\n      // TODO: adapt for PPR\n      // only allow on-demand revalidate for fallback: true/blocking\n      // or for prerendered fallback: false paths\n      if (\n        isOnDemandRevalidate &&\n        (fallbackMode !== FallbackMode.NOT_FOUND || previousCacheEntry)\n      ) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      // We use `ssgCacheKey` here as it is normalized to match the encoding\n      // from getStaticPaths along with including the locale.\n      //\n      // We use the `resolvedUrlPathname` for the development case when this\n      // is an app path since it doesn't include locale information.\n      let staticPathKey =\n        ssgCacheKey ?? (opts.dev && isAppPath ? resolvedUrlPathname : null)\n      if (staticPathKey && query.amp) {\n        staticPathKey = staticPathKey.replace(/\\.amp$/, '')\n      }\n\n      const isPageIncludedInStaticPaths =\n        staticPathKey && staticPaths?.includes(staticPathKey)\n\n      // When experimental compile is used, no pages have been prerendered,\n      // so they should all be blocking.\n\n      // @ts-expect-error internal field\n      if (this.nextConfig.experimental.isExperimentalCompile) {\n        fallbackMode = FallbackMode.BLOCKING_STATIC_RENDER\n      }\n\n      // When we did not respond from cache, we need to choose to block on\n      // rendering or return a skeleton.\n      //\n      // - Data requests always block.\n      // - Blocking mode fallback always blocks.\n      // - Preview mode toggles all pages to be resolved in a blocking manner.\n      // - Non-dynamic pages should block (though this is an impossible\n      //   case in production).\n      // - Dynamic pages should return their skeleton if not defined in\n      //   getStaticPaths, then finish the data request on the client-side.\n      //\n      if (\n        process.env.NEXT_RUNTIME !== 'edge' &&\n        !this.minimalMode &&\n        fallbackMode !== FallbackMode.BLOCKING_STATIC_RENDER &&\n        staticPathKey &&\n        !didRespond &&\n        !isPreviewMode &&\n        isDynamic &&\n        (isProduction || !staticPaths || !isPageIncludedInStaticPaths)\n      ) {\n        if (\n          // In development, fall through to render to handle missing\n          // getStaticPaths.\n          (isProduction || (staticPaths && staticPaths?.length > 0)) &&\n          // When fallback isn't present, abort this render so we 404\n          fallbackMode === FallbackMode.NOT_FOUND\n        ) {\n          throw new NoFallbackError()\n        }\n\n        let fallbackResponse: ResponseCacheEntry | null | undefined\n\n        // If this is a pages router page.\n        if (isPagesRouteModule(components.routeModule) && !isNextDataRequest) {\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await this.responseCache.get(\n            isProduction ? (locale ? `/${locale}${pathname}` : pathname) : null,\n            // This is the response generator for the fallback shell.\n            async ({\n              previousCacheEntry: previousFallbackCacheEntry = null,\n            }) => {\n              // For the pages router, fallbacks cannot be revalidated or\n              // generated in production. In the case of a missing fallback,\n              // we return null, but if it's being revalidated, we just return\n              // the previous fallback cache entry. This preserves the previous\n              // behavior.\n              if (isProduction) {\n                return toResponseCacheEntry(previousFallbackCacheEntry)\n              }\n\n              // For the pages router, fallbacks can only be generated on\n              // demand in development, so if we're not in production, and we\n              // aren't a app path, then just add the __nextFallback query\n              // and render.\n              query.__nextFallback = 'true'\n\n              // We pass `undefined` and `null` as it doesn't apply to the pages\n              // router.\n              return doRender({\n                postponed: undefined,\n                fallbackRouteParams: null,\n              })\n            },\n            {\n              routeKind: RouteKind.PAGES,\n              incrementalCache,\n              isRoutePPREnabled,\n              isFallback: true,\n            }\n          )\n        }\n        // If this is a app router page, PPR is enabled, and PFPR is also\n        // enabled, then we should use the fallback renderer.\n        else if (\n          isRoutePPREnabled &&\n          this.nextConfig.experimental.pprFallbacks &&\n          isAppPageRouteModule(components.routeModule) &&\n          !isRSCRequest\n        ) {\n          // We use the response cache here to handle the revalidation and\n          // management of the fallback shell.\n          fallbackResponse = await this.responseCache.get(\n            isProduction ? pathname : null,\n            // This is the response generator for the fallback shell.\n            async () =>\n              doRender({\n                // We pass `undefined` as rendering a fallback isn't resumed\n                // here.\n                postponed: undefined,\n                fallbackRouteParams: isProduction\n                  ? getFallbackRouteParams(pathname)\n                  : null,\n              }),\n            {\n              routeKind: RouteKind.APP_PAGE,\n              incrementalCache,\n              isRoutePPREnabled,\n              isFallback: true,\n            }\n          )\n        }\n\n        // If the fallback response was set to null, then we should return null.\n        if (fallbackResponse === null) return null\n\n        // Otherwise, if we did get a fallback response, we should return it.\n        if (fallbackResponse) {\n          // Remove the revalidate from the response to prevent it from being\n          // used in the surrounding cache.\n          delete fallbackResponse.revalidate\n\n          return fallbackResponse\n        }\n      }\n\n      const context: RendererContext = {\n        // Only requests that aren't revalidating can be resumed. If we have the\n        // minimal postponed data, then we should resume the render with it.\n        postponed:\n          !isOnDemandRevalidate && !isRevalidating && minimalPostponed\n            ? minimalPostponed\n            : undefined,\n        // This is a regular render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      }\n\n      // When we're in minimal mode, if we're trying to debug the static shell,\n      // we should just return nothing instead of resuming the dynamic render.\n      if (\n        (isDebugStaticShell || isDebugDynamicAccesses) &&\n        typeof context.postponed !== 'undefined'\n      ) {\n        return {\n          revalidate: 1,\n          isFallback: false,\n          value: {\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.fromStatic(''),\n            pageData: {},\n            headers: undefined,\n            status: undefined,\n          } satisfies CachedPageValue,\n        }\n      }\n\n      // Perform the render.\n      const result = await doRender(context)\n      if (!result) return null\n\n      return {\n        ...result,\n        revalidate: result.revalidate ?? 1,\n      }\n    }\n\n    const cacheEntry = await this.responseCache.get(\n      ssgCacheKey,\n      responseGenerator,\n      {\n        routeKind:\n          // If the route module is not defined, we can assume it's a page being\n          // rendered and thus check isAppPath.\n          routeModule?.definition.kind ??\n          (isAppPath ? RouteKind.APP_PAGE : RouteKind.PAGES),\n        incrementalCache,\n        isOnDemandRevalidate,\n        isPrefetch: req.headers.purpose === 'prefetch',\n        isRoutePPREnabled,\n      }\n    )\n\n    if (isPreviewMode) {\n      res.setHeader(\n        'Cache-Control',\n        'private, no-cache, no-store, max-age=0, must-revalidate'\n      )\n    }\n\n    if (!cacheEntry) {\n      if (ssgCacheKey && !(isOnDemandRevalidate && revalidateOnlyGenerated)) {\n        // A cache entry might not be generated if a response is written\n        // in `getInitialProps` or `getServerSideProps`, but those shouldn't\n        // have a cache key. If we do have a cache key but we don't end up\n        // with a cache entry, then either Next.js or the application has a\n        // bug that needs fixing.\n        throw new Error('invariant: cache entry required but not generated')\n      }\n      return null\n    }\n\n    // If we're not in minimal mode and the cache entry that was returned was a\n    // app page fallback, then we need to kick off the dynamic shell generation.\n    if (\n      ssgCacheKey &&\n      !this.minimalMode &&\n      isRoutePPREnabled &&\n      this.nextConfig.experimental.pprFallbacks &&\n      cacheEntry.value?.kind === CachedRouteKind.APP_PAGE &&\n      cacheEntry.isFallback &&\n      !isOnDemandRevalidate\n    ) {\n      scheduleOnNextTick(async () => {\n        try {\n          await this.responseCache.get(\n            ssgCacheKey,\n            () =>\n              doRender({\n                // We're an on-demand request, so we don't need to pass in the\n                // fallbackRouteParams.\n                fallbackRouteParams: null,\n                postponed: undefined,\n              }),\n            {\n              routeKind: RouteKind.APP_PAGE,\n              incrementalCache,\n              isOnDemandRevalidate: true,\n              isPrefetch: false,\n              isRoutePPREnabled: true,\n            }\n          )\n        } catch (err) {\n          console.error('Error occurred while rendering dynamic shell', err)\n        }\n      })\n    }\n\n    const didPostpone =\n      cacheEntry.value?.kind === CachedRouteKind.APP_PAGE &&\n      typeof cacheEntry.value.postponed === 'string'\n\n    if (\n      isSSG &&\n      !this.minimalMode &&\n      // We don't want to send a cache header for requests that contain dynamic\n      // data. If this is a Dynamic RSC request or wasn't a Prefetch RSC\n      // request, then we should set the cache header.\n      !isDynamicRSCRequest &&\n      (!didPostpone || isPrefetchRSCRequest)\n    ) {\n      // set x-nextjs-cache header to match the header\n      // we set for the image-optimizer\n      res.setHeader(\n        'x-nextjs-cache',\n        isOnDemandRevalidate\n          ? 'REVALIDATED'\n          : cacheEntry.isMiss\n            ? 'MISS'\n            : cacheEntry.isStale\n              ? 'STALE'\n              : 'HIT'\n      )\n      // Set a header used by the client router to signal the response is static\n      // and should respect the `static` cache staleTime value.\n      res.setHeader(NEXT_IS_PRERENDER_HEADER, '1')\n    }\n\n    const { value: cachedData } = cacheEntry\n\n    // If the cache value is an image, we should error early.\n    if (cachedData?.kind === CachedRouteKind.IMAGE) {\n      throw new Error('invariant SSG should not return an image cache value')\n    }\n\n    // Coerce the revalidate parameter from the render.\n    let revalidate: Revalidate | undefined\n\n    // If this is a resume request in minimal mode it is streamed with dynamic\n    // content and should not be cached.\n    if (minimalPostponed) {\n      revalidate = 0\n    }\n\n    // If this is in minimal mode and this is a flight request that isn't a\n    // prefetch request while PPR is enabled, it cannot be cached as it contains\n    // dynamic content.\n    else if (\n      this.minimalMode &&\n      isRSCRequest &&\n      !isPrefetchRSCRequest &&\n      isRoutePPREnabled\n    ) {\n      revalidate = 0\n    } else if (\n      typeof cacheEntry.revalidate !== 'undefined' &&\n      (!this.renderOpts.dev || (hasServerProps && !isNextDataRequest))\n    ) {\n      // If this is a preview mode request, we shouldn't cache it\n      if (isPreviewMode) {\n        revalidate = 0\n      }\n\n      // If this isn't SSG, then we should set change the header only if it is\n      // not set already.\n      else if (!isSSG) {\n        if (!res.getHeader('Cache-Control')) {\n          revalidate = 0\n        }\n      }\n\n      // If we are rendering the 404 page we derive the cache-control\n      // revalidate period from the value that trigged the not found\n      // to be rendered. So if `getStaticProps` returns\n      // { notFound: true, revalidate 60 } the revalidate period should\n      // be 60 but if a static asset 404s directly it should have a revalidate\n      // period of 0 so that it doesn't get cached unexpectedly by a CDN\n      else if (is404Page) {\n        const notFoundRevalidate = getRequestMeta(req, 'notFoundRevalidate')\n        revalidate =\n          typeof notFoundRevalidate === 'undefined' ? 0 : notFoundRevalidate\n      }\n\n      // If the cache entry has a revalidate value that's a number, use it.\n      else if (typeof cacheEntry.revalidate === 'number') {\n        if (cacheEntry.revalidate < 1) {\n          throw new Error(\n            `Invalid revalidate configuration provided: ${cacheEntry.revalidate} < 1`\n          )\n        }\n\n        revalidate = cacheEntry.revalidate\n      }\n      // Otherwise if the revalidate value is false, then we should use the cache\n      // time of one year.\n      else if (cacheEntry.revalidate === false) {\n        revalidate = CACHE_ONE_YEAR\n      }\n    }\n\n    cacheEntry.revalidate = revalidate\n\n    // If there's a callback for `onCacheEntry`, call it with the cache entry\n    // and the revalidate options.\n    const onCacheEntry = getRequestMeta(req, 'onCacheEntry')\n    if (onCacheEntry) {\n      const finished = await onCacheEntry(\n        {\n          ...cacheEntry,\n          // TODO: remove this when upstream doesn't\n          // always expect this value to be \"PAGE\"\n          value: {\n            ...cacheEntry.value,\n            kind:\n              cacheEntry.value?.kind === CachedRouteKind.APP_PAGE\n                ? 'PAGE'\n                : cacheEntry.value?.kind,\n          },\n        },\n        {\n          url: getRequestMeta(req, 'initURL'),\n        }\n      )\n      if (finished) {\n        // TODO: maybe we have to end the request?\n        return null\n      }\n    }\n\n    if (!cachedData) {\n      // add revalidate metadata before rendering 404 page\n      // so that we can use this as source of truth for the\n      // cache-control header instead of what the 404 page returns\n      // for the revalidate value\n      addRequestMeta(req, 'notFoundRevalidate', cacheEntry.revalidate)\n\n      // If cache control is already set on the response we don't\n      // override it to allow users to customize it via next.config\n      if (cacheEntry.revalidate && !res.getHeader('Cache-Control')) {\n        res.setHeader(\n          'Cache-Control',\n          formatRevalidate({\n            revalidate: cacheEntry.revalidate,\n            swrDelta: this.nextConfig.swrDelta,\n          })\n        )\n      }\n      if (isNextDataRequest) {\n        res.statusCode = 404\n        res.body('{\"notFound\":true}').send()\n        return null\n      }\n\n      if (this.renderOpts.dev) {\n        query.__nextNotFoundSrcPage = pathname\n      }\n      await this.render404(req, res, { pathname, query }, false)\n      return null\n    } else if (cachedData.kind === CachedRouteKind.REDIRECT) {\n      // If cache control is already set on the response we don't\n      // override it to allow users to customize it via next.config\n      if (cacheEntry.revalidate && !res.getHeader('Cache-Control')) {\n        res.setHeader(\n          'Cache-Control',\n          formatRevalidate({\n            revalidate: cacheEntry.revalidate,\n            swrDelta: this.nextConfig.swrDelta,\n          })\n        )\n      }\n\n      if (isNextDataRequest) {\n        return {\n          type: 'json',\n          body: RenderResult.fromStatic(\n            // @TODO: Handle flight data.\n            JSON.stringify(cachedData.props)\n          ),\n          revalidate: cacheEntry.revalidate,\n        }\n      } else {\n        await handleRedirect(cachedData.props)\n        return null\n      }\n    } else if (cachedData.kind === CachedRouteKind.APP_ROUTE) {\n      const headers = { ...cachedData.headers }\n\n      if (!(this.minimalMode && isSSG)) {\n        delete headers[NEXT_CACHE_TAGS_HEADER]\n      }\n\n      await sendResponse(\n        req,\n        res,\n        new Response(cachedData.body, {\n          headers: fromNodeOutgoingHttpHeaders(headers),\n          status: cachedData.status || 200,\n        })\n      )\n      return null\n    } else if (cachedData.kind === CachedRouteKind.APP_PAGE) {\n      // If the request has a postponed state and it's a resume request we\n      // should error.\n      if (didPostpone && minimalPostponed) {\n        throw new Error(\n          'Invariant: postponed state should not be present on a resume request'\n        )\n      }\n\n      if (cachedData.headers) {\n        const headers = { ...cachedData.headers }\n\n        if (!this.minimalMode || !isSSG) {\n          delete headers[NEXT_CACHE_TAGS_HEADER]\n        }\n\n        for (let [key, value] of Object.entries(headers)) {\n          if (typeof value === 'undefined') continue\n\n          if (Array.isArray(value)) {\n            for (const v of value) {\n              res.appendHeader(key, v)\n            }\n          } else if (typeof value === 'number') {\n            value = value.toString()\n            res.appendHeader(key, value)\n          } else {\n            res.appendHeader(key, value)\n          }\n        }\n      }\n\n      if (\n        this.minimalMode &&\n        isSSG &&\n        cachedData.headers?.[NEXT_CACHE_TAGS_HEADER]\n      ) {\n        res.setHeader(\n          NEXT_CACHE_TAGS_HEADER,\n          cachedData.headers[NEXT_CACHE_TAGS_HEADER] as string\n        )\n      }\n\n      // If the request is a data request, then we shouldn't set the status code\n      // from the response because it should always be 200. This should be gated\n      // behind the experimental PPR flag.\n      if (cachedData.status && (!isRSCRequest || !isRoutePPREnabled)) {\n        res.statusCode = cachedData.status\n      }\n\n      // Mark that the request did postpone.\n      if (didPostpone) {\n        res.setHeader(NEXT_DID_POSTPONE_HEADER, '1')\n      }\n\n      // we don't go through this block when preview mode is true\n      // as preview mode is a dynamic request (bypasses cache) and doesn't\n      // generate both HTML and payloads in the same request so continue to just\n      // return the generated payload\n      if (isRSCRequest && !isPreviewMode) {\n        // If this is a dynamic RSC request, then stream the response.\n        if (typeof cachedData.rscData === 'undefined') {\n          if (cachedData.postponed) {\n            throw new Error('Invariant: Expected postponed to be undefined')\n          }\n\n          return {\n            type: 'rsc',\n            body: cachedData.html,\n            // Dynamic RSC responses cannot be cached, even if they're\n            // configured with `force-static` because we have no way of\n            // distinguishing between `force-static` and pages that have no\n            // postponed state.\n            // TODO: distinguish `force-static` from pages with no postponed state (static)\n            revalidate: isDynamicRSCRequest ? 0 : cacheEntry.revalidate,\n          }\n        }\n\n        // As this isn't a prefetch request, we should serve the static flight\n        // data.\n        return {\n          type: 'rsc',\n          body: RenderResult.fromStatic(cachedData.rscData),\n          revalidate: cacheEntry.revalidate,\n        }\n      }\n\n      // This is a request for HTML data.\n      let body = cachedData.html\n\n      // If there's no postponed state, we should just serve the HTML. This\n      // should also be the case for a resume request because it's completed\n      // as a server render (rather than a static render).\n      if (!didPostpone || this.minimalMode) {\n        return {\n          type: 'html',\n          body,\n          revalidate: cacheEntry.revalidate,\n        }\n      }\n\n      // If we're debugging the static shell or the dynamic API accesses, we\n      // should just serve the HTML without resuming the render. The returned\n      // HTML will be the static shell so all the Dynamic API's will be used\n      // during static generation.\n      if (isDebugStaticShell || isDebugDynamicAccesses) {\n        // Since we're not resuming the render, we need to at least add the\n        // closing body and html tags to create valid HTML.\n        body.chain(\n          new ReadableStream({\n            start(controller) {\n              controller.enqueue(ENCODED_TAGS.CLOSED.BODY_AND_HTML)\n              controller.close()\n            },\n          })\n        )\n\n        return { type: 'html', body, revalidate: 0 }\n      }\n\n      // This request has postponed, so let's create a new transformer that the\n      // dynamic data can pipe to that will attach the dynamic data to the end\n      // of the response.\n      const transformer = new TransformStream<Uint8Array, Uint8Array>()\n      body.chain(transformer.readable)\n\n      // Perform the render again, but this time, provide the postponed state.\n      // We don't await because we want the result to start streaming now, and\n      // we've already chained the transformer's readable to the render result.\n      doRender({\n        postponed: cachedData.postponed,\n        // This is a resume render, not a fallback render, so we don't need to\n        // set this.\n        fallbackRouteParams: null,\n      })\n        .then(async (result) => {\n          if (!result) {\n            throw new Error('Invariant: expected a result to be returned')\n          }\n\n          if (result.value?.kind !== CachedRouteKind.APP_PAGE) {\n            throw new Error(\n              `Invariant: expected a page response, got ${result.value?.kind}`\n            )\n          }\n\n          // Pipe the resume result to the transformer.\n          await result.value.html.pipeTo(transformer.writable)\n        })\n        .catch((err) => {\n          // An error occurred during piping or preparing the render, abort\n          // the transformers writer so we can terminate the stream.\n          transformer.writable.abort(err).catch((e) => {\n            console.error(\"couldn't abort transformer\", e)\n          })\n        })\n\n      return {\n        type: 'html',\n        body,\n        // We don't want to cache the response if it has postponed data because\n        // the response being sent to the client it's dynamic parts are streamed\n        // to the client on the same request.\n        revalidate: 0,\n      }\n    } else if (isNextDataRequest) {\n      return {\n        type: 'json',\n        body: RenderResult.fromStatic(JSON.stringify(cachedData.pageData)),\n        revalidate: cacheEntry.revalidate,\n      }\n    } else {\n      return {\n        type: 'html',\n        body: cachedData.html,\n        revalidate: cacheEntry.revalidate,\n      }\n    }\n  }\n\n  private stripNextDataPath(path: string, stripLocale = true) {\n    if (path.includes(this.buildId)) {\n      const splitPath = path.substring(\n        path.indexOf(this.buildId) + this.buildId.length\n      )\n\n      path = denormalizePagePath(splitPath.replace(/\\.json$/, ''))\n    }\n\n    if (this.localeNormalizer && stripLocale) {\n      return this.localeNormalizer.normalize(path)\n    }\n    return path\n  }\n\n  // map the route to the actual bundle name\n  protected getOriginalAppPaths(route: string) {\n    if (this.enabledDirectories.app) {\n      const originalAppPath = this.appPathRoutes?.[route]\n\n      if (!originalAppPath) {\n        return null\n      }\n\n      return originalAppPath\n    }\n    return null\n  }\n\n  protected async renderPageComponent(\n    ctx: RequestContext<ServerRequest, ServerResponse>,\n    bubbleNoFallback: boolean\n  ) {\n    const { query, pathname } = ctx\n\n    const appPaths = this.getOriginalAppPaths(pathname)\n    const isAppPath = Array.isArray(appPaths)\n\n    let page = pathname\n    if (isAppPath) {\n      // the last item in the array is the root page, if there are parallel routes\n      page = appPaths[appPaths.length - 1]\n    }\n\n    const result = await this.findPageComponents({\n      page,\n      query,\n      params: ctx.renderOpts.params || {},\n      isAppPath,\n      sriEnabled: !!this.nextConfig.experimental.sri?.algorithm,\n      appPaths,\n      // Ensuring for loading page component routes is done via the matcher.\n      shouldEnsure: false,\n    })\n    if (result) {\n      getTracer().getRootSpanAttributes()?.set('next.route', pathname)\n      try {\n        return await this.renderToResponseWithComponents(ctx, result)\n      } catch (err) {\n        const isNoFallbackError = err instanceof NoFallbackError\n\n        if (!isNoFallbackError || (isNoFallbackError && bubbleNoFallback)) {\n          throw err\n        }\n      }\n    }\n    return false\n  }\n\n  private async renderToResponse(\n    ctx: RequestContext<ServerRequest, ServerResponse>\n  ): Promise<ResponsePayload | null> {\n    return getTracer().trace(\n      BaseServerSpan.renderToResponse,\n      {\n        spanName: `rendering page`,\n        attributes: {\n          'next.route': ctx.pathname,\n        },\n      },\n      async () => {\n        return this.renderToResponseImpl(ctx)\n      }\n    )\n  }\n\n  protected abstract getMiddleware(): MiddlewareRoutingItem | undefined\n  protected abstract getFallbackErrorComponents(\n    url?: string\n  ): Promise<LoadComponentsReturnType | null>\n  protected abstract getRoutesManifest(): NormalizedRouteManifest | undefined\n\n  private async renderToResponseImpl(\n    ctx: RequestContext<ServerRequest, ServerResponse>\n  ): Promise<ResponsePayload | null> {\n    const { res, query, pathname } = ctx\n    let page = pathname\n    const bubbleNoFallback = !!query._nextBubbleNoFallback\n    delete query[NEXT_RSC_UNION_QUERY]\n    delete query._nextBubbleNoFallback\n\n    const options: MatchOptions = {\n      i18n: this.i18nProvider?.fromQuery(pathname, query),\n    }\n\n    try {\n      for await (const match of this.matchers.matchAll(pathname, options)) {\n        // when a specific invoke-output is meant to be matched\n        // ensure a prior dynamic route/page doesn't take priority\n        const invokeOutput = getRequestMeta(ctx.req, 'invokeOutput')\n        if (\n          !this.minimalMode &&\n          typeof invokeOutput === 'string' &&\n          isDynamicRoute(invokeOutput || '') &&\n          invokeOutput !== match.definition.pathname\n        ) {\n          continue\n        }\n\n        const result = await this.renderPageComponent(\n          {\n            ...ctx,\n            pathname: match.definition.pathname,\n            renderOpts: {\n              ...ctx.renderOpts,\n              params: match.params,\n            },\n          },\n          bubbleNoFallback\n        )\n        if (result !== false) return result\n      }\n\n      // currently edge functions aren't receiving the x-matched-path\n      // header so we need to fallback to matching the current page\n      // when we weren't able to match via dynamic route to handle\n      // the rewrite case\n      // @ts-expect-error extended in child class web-server\n      if (this.serverOptions.webServerConfig) {\n        // @ts-expect-error extended in child class web-server\n        ctx.pathname = this.serverOptions.webServerConfig.page\n        const result = await this.renderPageComponent(ctx, bubbleNoFallback)\n        if (result !== false) return result\n      }\n    } catch (error) {\n      const err = getProperError(error)\n\n      if (error instanceof MissingStaticPage) {\n        console.error(\n          'Invariant: failed to load static page',\n          JSON.stringify(\n            {\n              page,\n              url: ctx.req.url,\n              matchedPath: ctx.req.headers['x-matched-path'],\n              initUrl: getRequestMeta(ctx.req, 'initURL'),\n              didRewrite: !!getRequestMeta(ctx.req, 'rewroteURL'),\n              rewroteUrl: getRequestMeta(ctx.req, 'rewroteURL'),\n            },\n            null,\n            2\n          )\n        )\n        throw err\n      }\n\n      if (err instanceof NoFallbackError && bubbleNoFallback) {\n        throw err\n      }\n      if (err instanceof DecodeError || err instanceof NormalizeError) {\n        res.statusCode = 400\n        return await this.renderErrorToResponse(ctx, err)\n      }\n\n      res.statusCode = 500\n\n      // if pages/500 is present we still need to trigger\n      // /_error `getInitialProps` to allow reporting error\n      if (await this.hasPage('/500')) {\n        ctx.query.__nextCustomErrorRender = '1'\n        await this.renderErrorToResponse(ctx, err)\n        delete ctx.query.__nextCustomErrorRender\n      }\n\n      const isWrappedError = err instanceof WrappedBuildError\n\n      if (!isWrappedError) {\n        if (\n          (this.minimalMode && process.env.NEXT_RUNTIME !== 'edge') ||\n          this.renderOpts.dev\n        ) {\n          if (isError(err)) err.page = page\n          throw err\n        }\n        this.logError(getProperError(err))\n      }\n      const response = await this.renderErrorToResponse(\n        ctx,\n        isWrappedError ? (err as WrappedBuildError).innerError : err\n      )\n      return response\n    }\n\n    if (\n      this.getMiddleware() &&\n      !!ctx.req.headers['x-nextjs-data'] &&\n      (!res.statusCode || res.statusCode === 200 || res.statusCode === 404)\n    ) {\n      res.setHeader(\n        'x-nextjs-matched-path',\n        `${query.__nextLocale ? `/${query.__nextLocale}` : ''}${pathname}`\n      )\n      res.statusCode = 200\n      res.setHeader('content-type', 'application/json')\n      res.body('{}')\n      res.send()\n      return null\n    }\n\n    res.statusCode = 404\n    return this.renderErrorToResponse(ctx, null)\n  }\n\n  public async renderToHTML(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: ParsedUrlQuery = {}\n  ): Promise<string | null> {\n    return getTracer().trace(BaseServerSpan.renderToHTML, async () => {\n      return this.renderToHTMLImpl(req, res, pathname, query)\n    })\n  }\n\n  private async renderToHTMLImpl(\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: ParsedUrlQuery = {}\n  ): Promise<string | null> {\n    return this.getStaticHTML((ctx) => this.renderToResponse(ctx), {\n      req,\n      res,\n      pathname,\n      query,\n    })\n  }\n\n  public async renderError(\n    err: Error | null,\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    setHeaders = true\n  ): Promise<void> {\n    return getTracer().trace(BaseServerSpan.renderError, async () => {\n      return this.renderErrorImpl(err, req, res, pathname, query, setHeaders)\n    })\n  }\n\n  private async renderErrorImpl(\n    err: Error | null,\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: NextParsedUrlQuery = {},\n    setHeaders = true\n  ): Promise<void> {\n    if (setHeaders) {\n      res.setHeader(\n        'Cache-Control',\n        'private, no-cache, no-store, max-age=0, must-revalidate'\n      )\n    }\n\n    return this.pipe(\n      async (ctx) => {\n        const response = await this.renderErrorToResponse(ctx, err)\n        if (this.minimalMode && res.statusCode === 500) {\n          throw err\n        }\n        return response\n      },\n      { req, res, pathname, query }\n    )\n  }\n\n  private customErrorNo404Warn = execOnce(() => {\n    Log.warn(\n      `You have added a custom /_error page without a custom /404 page. This prevents the 404 page from being auto statically optimized.\\nSee here for info: https://nextjs.org/docs/messages/custom-error-no-custom-404`\n    )\n  })\n\n  private async renderErrorToResponse(\n    ctx: RequestContext<ServerRequest, ServerResponse>,\n    err: Error | null\n  ): Promise<ResponsePayload | null> {\n    return getTracer().trace(BaseServerSpan.renderErrorToResponse, async () => {\n      return this.renderErrorToResponseImpl(ctx, err)\n    })\n  }\n\n  protected async renderErrorToResponseImpl(\n    ctx: RequestContext<ServerRequest, ServerResponse>,\n    err: Error | null\n  ): Promise<ResponsePayload | null> {\n    // Short-circuit favicon.ico in development to avoid compiling 404 page when the app has no favicon.ico.\n    // Since favicon.ico is automatically requested by the browser.\n    if (this.renderOpts.dev && ctx.pathname === '/favicon.ico') {\n      return {\n        type: 'html',\n        body: RenderResult.fromStatic(''),\n      }\n    }\n    const { res, query } = ctx\n\n    try {\n      let result: null | FindComponentsResult = null\n\n      const is404 = res.statusCode === 404\n      let using404Page = false\n\n      if (is404) {\n        if (this.enabledDirectories.app) {\n          // Use the not-found entry in app directory\n          result = await this.findPageComponents({\n            page: UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n            query,\n            params: {},\n            isAppPath: true,\n            shouldEnsure: true,\n            url: ctx.req.url,\n          })\n          using404Page = result !== null\n        }\n\n        if (!result && (await this.hasPage('/404'))) {\n          result = await this.findPageComponents({\n            page: '/404',\n            query,\n            params: {},\n            isAppPath: false,\n            // Ensuring can't be done here because you never \"match\" a 404 route.\n            shouldEnsure: true,\n            url: ctx.req.url,\n          })\n          using404Page = result !== null\n        }\n      }\n      let statusPage = `/${res.statusCode}`\n\n      if (\n        !ctx.query.__nextCustomErrorRender &&\n        !result &&\n        STATIC_STATUS_PAGES.includes(statusPage)\n      ) {\n        // skip ensuring /500 in dev mode as it isn't used and the\n        // dev overlay is used instead\n        if (statusPage !== '/500' || !this.renderOpts.dev) {\n          result = await this.findPageComponents({\n            page: statusPage,\n            query,\n            params: {},\n            isAppPath: false,\n            // Ensuring can't be done here because you never \"match\" a 500\n            // route.\n            shouldEnsure: true,\n            url: ctx.req.url,\n          })\n        }\n      }\n\n      if (!result) {\n        result = await this.findPageComponents({\n          page: '/_error',\n          query,\n          params: {},\n          isAppPath: false,\n          // Ensuring can't be done here because you never \"match\" an error\n          // route.\n          shouldEnsure: true,\n          url: ctx.req.url,\n        })\n        statusPage = '/_error'\n      }\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !using404Page &&\n        (await this.hasPage('/_error')) &&\n        !(await this.hasPage('/404'))\n      ) {\n        this.customErrorNo404Warn()\n      }\n\n      if (!result) {\n        // this can occur when a project directory has been moved/deleted\n        // which is handled in the parent process in development\n        if (this.renderOpts.dev) {\n          return {\n            type: 'html',\n            // wait for dev-server to restart before refreshing\n            body: RenderResult.fromStatic(\n              `\n              <pre>missing required error components, refreshing...</pre>\n              <script>\n                async function check() {\n                  const res = await fetch(location.href).catch(() => ({}))\n\n                  if (res.status === 200) {\n                    location.reload()\n                  } else {\n                    setTimeout(check, 1000)\n                  }\n                }\n                check()\n              </script>`\n            ),\n          }\n        }\n\n        throw new WrappedBuildError(\n          new Error('missing required error components')\n        )\n      }\n\n      // If the page has a route module, use it for the new match. If it doesn't\n      // have a route module, remove the match.\n      if (result.components.routeModule) {\n        addRequestMeta(ctx.req, 'match', {\n          definition: result.components.routeModule.definition,\n          params: undefined,\n        })\n      } else {\n        removeRequestMeta(ctx.req, 'match')\n      }\n\n      try {\n        return await this.renderToResponseWithComponents(\n          {\n            ...ctx,\n            pathname: statusPage,\n            renderOpts: {\n              ...ctx.renderOpts,\n              err,\n            },\n          },\n          result\n        )\n      } catch (maybeFallbackError) {\n        if (maybeFallbackError instanceof NoFallbackError) {\n          throw new Error('invariant: failed to render error page')\n        }\n        throw maybeFallbackError\n      }\n    } catch (error) {\n      const renderToHtmlError = getProperError(error)\n      const isWrappedError = renderToHtmlError instanceof WrappedBuildError\n      if (!isWrappedError) {\n        this.logError(renderToHtmlError)\n      }\n      res.statusCode = 500\n      const fallbackComponents = await this.getFallbackErrorComponents(\n        ctx.req.url\n      )\n\n      if (fallbackComponents) {\n        // There was an error, so use it's definition from the route module\n        // to add the match to the request.\n        addRequestMeta(ctx.req, 'match', {\n          definition: fallbackComponents.routeModule!.definition,\n          params: undefined,\n        })\n\n        return this.renderToResponseWithComponents(\n          {\n            ...ctx,\n            pathname: '/_error',\n            renderOpts: {\n              ...ctx.renderOpts,\n              // We render `renderToHtmlError` here because `err` is\n              // already captured in the stacktrace.\n              err: isWrappedError\n                ? renderToHtmlError.innerError\n                : renderToHtmlError,\n            },\n          },\n          {\n            query,\n            components: fallbackComponents,\n          }\n        )\n      }\n      return {\n        type: 'html',\n        body: RenderResult.fromStatic('Internal Server Error'),\n      }\n    }\n  }\n\n  public async renderErrorToHTML(\n    err: Error | null,\n    req: ServerRequest,\n    res: ServerResponse,\n    pathname: string,\n    query: ParsedUrlQuery = {}\n  ): Promise<string | null> {\n    return this.getStaticHTML((ctx) => this.renderErrorToResponse(ctx, err), {\n      req,\n      res,\n      pathname,\n      query,\n    })\n  }\n\n  public async render404(\n    req: ServerRequest,\n    res: ServerResponse,\n    parsedUrl?: Pick<NextUrlWithParsedQuery, 'pathname' | 'query'>,\n    setHeaders = true\n  ): Promise<void> {\n    const { pathname, query } = parsedUrl ? parsedUrl : parseUrl(req.url!, true)\n\n    if (this.nextConfig.i18n) {\n      query.__nextLocale ||= this.nextConfig.i18n.defaultLocale\n      query.__nextDefaultLocale ||= this.nextConfig.i18n.defaultLocale\n    }\n\n    res.statusCode = 404\n    return this.renderError(null, req, res, pathname!, query, setHeaders)\n  }\n}\n"],"names":["NoFallbackError","WrappedBuildError","Server","Error","constructor","innerError","getServerComponentsHmrCache","nextConfig","experimental","serverComponentsHmrCache","globalThis","__serverComponentsHmrCache","undefined","options","handleRSCRequest","req","_res","parsedUrl","pathname","normalizers","prefetchRSC","match","normalize","headers","RSC_HEADER","toLowerCase","NEXT_ROUTER_PREFETCH_HEADER","addRequestMeta","rsc","stripFlightHeaders","url","parsed","parseUrl","formatUrl","handleNextDataRequest","res","middleware","getMiddleware","params","matchNextDataPathname","path","buildId","process","env","NEXT_RUNTIME","getRequestMeta","render404","shift","lastParam","length","endsWith","join","getRouteFromAssetPath","trailingSlash","substring","i18nProvider","hostname","host","split","domainLocale","detectDomainLocale","defaultLocale","config","localePathResult","analyze","detectedLocale","query","__nextLocale","__nextDefaultLocale","__nextInferredLocaleFromDefault","__nextDataReq","handleNextImageRequest","handleCatchallRenderRequest","handleCatchallMiddlewareRequest","data","push","postponed","normalizer","normalizeAndAttachMetadata","finished","enabledDirectories","pages","prepared","preparedPromise","customErrorNo404Warn","execOnce","Log","warn","dir","quiet","conf","dev","minimalMode","customServer","port","experimentalTestProxy","serverOptions","require","resolve","loadEnvConfig","fetchHostname","formatHostname","distDir","publicDir","getPublicDir","hasStaticDir","getHasStaticDir","i18n","locales","I18NProvider","localeNormalizer","LocaleRouteNormalizer","serverRuntimeConfig","publicRuntimeConfig","assetPrefix","generateEtags","getBuildId","minimalModeKey","NEXT_PRIVATE_MINIMAL_MODE","getEnabledDirectories","isAppPPREnabled","app","checkIsAppPPREnabled","ppr","PostponedPathnameNormalizer","RSCPathnameNormalizer","PrefetchRSCPathnameNormalizer","NextDataPathnameNormalizer","nextFontManifest","getNextFontManifest","NEXT_DEPLOYMENT_ID","deploymentId","renderOpts","supportsDynamicResponse","strictNextHead","poweredByHeader","canonicalBase","amp","previewProps","getPrerenderManifest","preview","ampOptimizerConfig","optimizer","basePath","images","optimizeCss","nextConfigOutput","output","nextScriptWorkers","disableOptimizedLoading","domainLocales","domains","serverComponents","enableTainting","taint","crossOrigin","largePageDataBytes","runtimeConfig","Object","keys","isExperimentalCompile","swrDelta","clientTraceMetadata","after","dynamicIO","onInstrumentationRequestError","instrumentationOnRequestError","bind","reactMaxHeadersLength","setConfig","pagesManifest","getPagesManifest","appPathsManifest","getAppPathsManifest","appPathRoutes","getAppPathRoutes","interceptionRoutePatterns","getinterceptionRoutePatterns","matchers","getRouteMatchers","reload","setAssetPrefix","responseCache","getResponseCache","reloadMatchers","manifestLoader","ServerManifestLoader","name","PAGES_MANIFEST","APP_PATHS_MANIFEST","DefaultRouteMatcherManager","PagesRouteMatcherProvider","PagesAPIRouteMatcherProvider","AppPageRouteMatcherProvider","AppRouteRouteMatcherProvider","args","err","ctx","instrumentation","onRequestError","method","NextRequestHint","fromEntries","entries","handlerErr","console","error","logError","handleRequest","prepare","toUpperCase","tracer","getTracer","withPropagatedContext","trace","BaseServerSpan","spanName","kind","SpanKind","SERVER","attributes","span","handleRequestImpl","finally","isRSCRequest","setAttributes","statusCode","rootSpanAttributes","getRootSpanAttributes","get","route","updateName","originalRequest","waitTillReady","patchSetHeaderWithCookieSupport","isNodeNextResponse","originalResponse","urlParts","urlNoQuery","cleanUrl","normalizeRepeatedSlashes","redirect","body","send","URLSearchParams","isNodeNextRequest","xForwardedProto","isHttps","socket","encrypted","toString","remoteAddress","attachRequestMeta","getHostname","parseUrlUtil","replace","pathnameInfo","getNextPathnameInfo","removePathPrefix","useMatchedPathHeader","matchedPath","URL","urlPathname","chunk","Buffer","concat","NEXT_RESUME_HEADER","normalizedUrlPath","stripNextDataPath","localeAnalysisResult","inferredFromDefault","denormalizePagePath","srcPathname","pageIsDynamic","isDynamicRoute","definition","utils","getUtils","page","rewrites","getRoutesManifest","beforeFiles","afterFiles","fallback","caseSensitive","caseSensitiveRoutes","locale","pathnameBeforeRewrite","rewriteParams","handleRewrites","rewriteParamKeys","didRewrite","routeParamKeys","Set","key","value","normalizeNextQueryParam","normalizedKey","add","paramsResult","normalizeDynamicRouteParams","hasValidParams","matcherParams","dynamicRouteMatcher","assign","curParamsResult","opts","routeParams","getParamsFromRouteMatches","defaultRouteMatches","interpolateDynamicPath","normalizeVercelUrl","defaultRouteRegex","groups","DecodeError","NormalizeError","renderError","Boolean","webServerConfig","protocol","parsedFullUrl","incrementalCache","getIncrementalCache","requestHeaders","requestProtocol","resetRequestCache","__incrementalCache","invokePath","useInvokePath","invokeStatus","invokeQuery","parsedMatchedPath","invokePathnameInfo","parseData","normalizeResult","normalizeLocalePath","startsWith","result","response","Response","bubble","run","code","isBubbledError","getProperError","getRequestHandlerWithMetadata","meta","handler","getRequestHandler","setRequestMeta","prefix","loadInstrumentationModule","prepareImpl","then","close","forEach","entry","normalizedPath","normalizeAppPath","runImpl","pipe","fn","partialContext","pipeImpl","isBotRequest","isBot","payload","originalStatus","type","revalidate","sent","setHeader","sendRenderResult","getStaticHTML","toUnchunkedString","render","internalRender","renderImpl","getWaitUntil","builtinRequestContext","getBuiltinRequestContext","waitUntil","__NEXT_TEST_MODE","noopWaitUntil","promise","catch","hasPage","isBlockedPage","renderToResponse","getStaticPaths","fallbackField","dynamicRoutes","staticPaths","fallbackMode","parseFallbackField","renderToResponseWithComponents","requestContext","findComponentsResult","renderToResponseWithComponentsImpl","pathCouldBeIntercepted","resolvedPathname","isInterceptionRouteAppPath","some","regexp","test","setVaryHeader","isAppPath","baseVaryHeader","NEXT_ROUTER_STATE_TREE_HEADER","addedNextUrlToVary","NEXT_URL","components","prerenderManifest","cacheEntry","UNDERSCORE_NOT_FOUND_ROUTE","is404Page","is500Page","hasServerProps","getServerSideProps","hasGetStaticPaths","isServerAction","getIsServerAction","hasGetInitialProps","Component","getInitialProps","isSSG","getStaticProps","resolvedUrlPathname","hasFallback","isDynamic","pathsResult","resolvedWithoutSlash","removeTrailingSlash","includes","routes","toRoute","isNextDataRequest","isPrefetchRSCRequest","routeModule","couldSupportPPR","isAppPageRouteModule","hasDebugStaticShellQuery","__NEXT_EXPERIMENTAL_STATIC_SHELL_DEBUGGING","__nextppronly","isRoutePPREnabled","renderingMode","isDebugStaticShell","isDebugDynamicAccesses","minimalPostponed","isDynamicRSCRequest","STATIC_STATUS_PAGES","parseInt","slice","RenderResult","fromStatic","isSupportedDocument","Document","NEXT_BUILTIN_DOCUMENT","previewData","isPreviewMode","tryGetPreviewData","multiZoneDraftMode","isEdgeRuntime","runtime","isOnDemandRevalidate","revalidateOnlyGenerated","checkIsOnDemandRevalidate","handleRedirect","pageData","destination","pageProps","__N_REDIRECT","__N_REDIRECT_STATUS","__N_REDIRECT_BASE_PATH","getRedirectStatus","ssgCacheKey","map","seg","escapePathDelimiters","decodeURIComponent","_","doRender","fallbackRouteParams","origQuery","hadTrailingSlash","resolvedUrl","isRevalidate","serverActions","resolvedAsPath","isDraftMode","onClose","setAppIsrStatus","nextExport","isStaticGeneration","isAppRouteRouteModule","context","request","NextRequestAdapter","fromNodeNextRequest","signalFromNodeResponse","handle","fetchMetrics","cacheTags","fetchTags","blob","toNodeOutgoingHttpHeaders","NEXT_CACHE_TAGS_HEADER","store","CachedRouteKind","APP_ROUTE","status","from","arrayBuffer","isFallback","sendResponse","pendingWaitUntil","routerKind","routePath","routeType","revalidateReason","getRevalidateReason","handleInternalServerErrorResponse","isPagesRouteModule","handleBadRequestResponse","clientReferenceManifest","module","renderHTML","metadata","staticBailoutInfo","description","stack","message","indexOf","isNotFound","isRedirect","REDIRECT","props","flightData","isNull","APP_PAGE","html","rscData","PAGES","__nextFallback","responseGenerator","hasResolved","previousCacheEntry","isRevalidating","isProduction","didRespond","FallbackMode","NOT_FOUND","PRERENDER","BLOCKING_STATIC_RENDER","isStale","staticPathKey","isPageIncludedInStaticPaths","fallbackResponse","previousFallbackCacheEntry","toResponseCacheEntry","routeKind","RouteKind","pprFallbacks","getFallbackRouteParams","isPrefetch","purpose","scheduleOnNextTick","didPostpone","isMiss","NEXT_IS_PRERENDER_HEADER","cachedData","IMAGE","getHeader","notFoundRevalidate","CACHE_ONE_YEAR","onCacheEntry","formatRevalidate","__nextNotFoundSrcPage","JSON","stringify","fromNodeOutgoingHttpHeaders","Array","isArray","v","appendHeader","NEXT_DID_POSTPONE_HEADER","chain","ReadableStream","start","controller","enqueue","ENCODED_TAGS","CLOSED","BODY_AND_HTML","transformer","TransformStream","readable","pipeTo","writable","abort","e","stripLocale","splitPath","getOriginalAppPaths","originalAppPath","renderPageComponent","bubbleNoFallback","appPaths","findPageComponents","sriEnabled","sri","algorithm","shouldEnsure","set","isNoFallbackError","renderToResponseImpl","_nextBubbleNoFallback","NEXT_RSC_UNION_QUERY","fromQuery","matchAll","invokeOutput","MissingStaticPage","initUrl","rewroteUrl","renderErrorToResponse","__nextCustomErrorRender","isWrappedError","isError","renderToHTML","renderToHTMLImpl","setHeaders","renderErrorImpl","renderErrorToResponseImpl","is404","using404Page","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","statusPage","NODE_ENV","removeRequestMeta","maybeFallbackError","renderToHtmlError","fallbackComponents","getFallbackErrorComponents","renderErrorToHTML"],"mappings":"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"}