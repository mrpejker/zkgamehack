{"version":3,"sources":["../../../src/server/app-render/postponed-state.ts"],"sourcesContent":["import type { FallbackRouteParams } from '../../client/components/fallback-params'\nimport type { Params } from '../../client/components/params'\n\nexport enum DynamicState {\n  /**\n   * The dynamic access occurred during the RSC render phase.\n   */\n  DATA = 1,\n\n  /**\n   * The dynamic access occurred during the HTML shell render phase.\n   */\n  HTML = 2,\n}\n\n/**\n * The postponed state for dynamic data.\n */\nexport type DynamicDataPostponedState = {\n  /**\n   * The type of dynamic state.\n   */\n  readonly type: DynamicState.DATA\n}\n\n/**\n * The postponed state for dynamic HTML.\n */\nexport type DynamicHTMLPostponedState = {\n  /**\n   * The type of dynamic state.\n   */\n  readonly type: DynamicState.HTML\n\n  /**\n   * The postponed data used by React.\n   */\n  readonly data: object\n}\n\nexport type PostponedState =\n  | DynamicDataPostponedState\n  | DynamicHTMLPostponedState\n\nexport function getDynamicHTMLPostponedState(\n  data: object,\n  fallbackRouteParams: FallbackRouteParams | null\n): string {\n  if (!fallbackRouteParams || fallbackRouteParams.size === 0) {\n    return JSON.stringify(data)\n  }\n\n  const replacements: Array<[string, string]> = Array.from(fallbackRouteParams)\n  const replacementsString = JSON.stringify(replacements)\n\n  // Serialized as `<length><replacements><data>`\n  return `${replacementsString.length}${replacementsString}${JSON.stringify(data)}`\n}\n\nexport function getDynamicDataPostponedState(): string {\n  return 'null'\n}\n\nexport function parsePostponedState(\n  state: string,\n  params: Params | undefined\n): PostponedState {\n  try {\n    if (state === 'null') {\n      return { type: DynamicState.DATA }\n    }\n\n    if (/^[0-9]/.test(state)) {\n      const match = state.match(/^([0-9]*)/)?.[1]\n      if (!match) {\n        throw new Error(`Invariant: invalid postponed state ${state}`)\n      }\n\n      // This is the length of the replacements entries.\n      const length = parseInt(match)\n      const replacements = JSON.parse(\n        state.slice(\n          match.length,\n          // We then go to the end of the string.\n          match.length + length\n        )\n      ) as ReadonlyArray<[string, string]>\n\n      let postponed = state.slice(match.length + length)\n      for (const [key, searchValue] of replacements) {\n        const value = params?.[key] ?? ''\n        const replaceValue = Array.isArray(value) ? value.join('/') : value\n        postponed = postponed.replaceAll(searchValue, replaceValue)\n      }\n\n      return {\n        type: DynamicState.HTML,\n        data: JSON.parse(postponed),\n      }\n    }\n\n    return {\n      type: DynamicState.HTML,\n      data: JSON.parse(state),\n    }\n  } catch (err) {\n    console.error('Failed to parse postponed state', err)\n    return { type: DynamicState.DATA }\n  }\n}\n\nexport function getPostponedFromState(state: PostponedState): any {\n  if (state.type === DynamicState.DATA) {\n    return null\n  }\n\n  return state.data\n}\n"],"names":["DynamicState","getDynamicHTMLPostponedState","data","fallbackRouteParams","size","JSON","stringify","replacements","Array","from","replacementsString","length","getDynamicDataPostponedState","parsePostponedState","state","params","type","test","match","Error","parseInt","parse","slice","postponed","key","searchValue","value","replaceValue","isArray","join","replaceAll","err","console","error","getPostponedFromState"],"mappings":";UAGYA;IACV;;GAEC;IAGD;;GAEC;GARSA,iBAAAA;AAyCZ,OAAO,SAASC,6BACdC,IAAY,EACZC,mBAA+C;IAE/C,IAAI,CAACA,uBAAuBA,oBAAoBC,IAAI,KAAK,GAAG;QAC1D,OAAOC,KAAKC,SAAS,CAACJ;IACxB;IAEA,MAAMK,eAAwCC,MAAMC,IAAI,CAACN;IACzD,MAAMO,qBAAqBL,KAAKC,SAAS,CAACC;IAE1C,+CAA+C;IAC/C,OAAO,CAAC,EAAEG,mBAAmBC,MAAM,CAAC,EAAED,mBAAmB,EAAEL,KAAKC,SAAS,CAACJ,MAAM,CAAC;AACnF;AAEA,OAAO,SAASU;IACd,OAAO;AACT;AAEA,OAAO,SAASC,oBACdC,KAAa,EACbC,MAA0B;IAE1B,IAAI;QACF,IAAID,UAAU,QAAQ;YACpB,OAAO;gBAAEE,IAAI;YAAoB;QACnC;QAEA,IAAI,SAASC,IAAI,CAACH,QAAQ;gBACVA;YAAd,MAAMI,SAAQJ,eAAAA,MAAMI,KAAK,CAAC,iCAAZJ,YAA0B,CAAC,EAAE;YAC3C,IAAI,CAACI,OAAO;gBACV,MAAM,IAAIC,MAAM,CAAC,mCAAmC,EAAEL,MAAM,CAAC;YAC/D;YAEA,kDAAkD;YAClD,MAAMH,SAASS,SAASF;YACxB,MAAMX,eAAeF,KAAKgB,KAAK,CAC7BP,MAAMQ,KAAK,CACTJ,MAAMP,MAAM,EACZ,uCAAuC;YACvCO,MAAMP,MAAM,GAAGA;YAInB,IAAIY,YAAYT,MAAMQ,KAAK,CAACJ,MAAMP,MAAM,GAAGA;YAC3C,KAAK,MAAM,CAACa,KAAKC,YAAY,IAAIlB,aAAc;gBAC7C,MAAMmB,QAAQX,CAAAA,0BAAAA,MAAQ,CAACS,IAAI,KAAI;gBAC/B,MAAMG,eAAenB,MAAMoB,OAAO,CAACF,SAASA,MAAMG,IAAI,CAAC,OAAOH;gBAC9DH,YAAYA,UAAUO,UAAU,CAACL,aAAaE;YAChD;YAEA,OAAO;gBACLX,IAAI;gBACJd,MAAMG,KAAKgB,KAAK,CAACE;YACnB;QACF;QAEA,OAAO;YACLP,IAAI;YACJd,MAAMG,KAAKgB,KAAK,CAACP;QACnB;IACF,EAAE,OAAOiB,KAAK;QACZC,QAAQC,KAAK,CAAC,mCAAmCF;QACjD,OAAO;YAAEf,IAAI;QAAoB;IACnC;AACF;AAEA,OAAO,SAASkB,sBAAsBpB,KAAqB;IACzD,IAAIA,MAAME,IAAI,QAAwB;QACpC,OAAO;IACT;IAEA,OAAOF,MAAMZ,IAAI;AACnB"}