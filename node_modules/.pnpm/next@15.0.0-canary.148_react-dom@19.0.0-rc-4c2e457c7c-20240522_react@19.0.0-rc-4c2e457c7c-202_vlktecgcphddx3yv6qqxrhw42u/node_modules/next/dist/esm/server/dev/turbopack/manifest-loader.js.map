{"version":3,"sources":["../../../../src/server/dev/turbopack/manifest-loader.ts"],"sourcesContent":["import type {\n  EdgeFunctionDefinition,\n  MiddlewareManifest,\n} from '../../../build/webpack/plugins/middleware-plugin'\nimport type { BuildManifest } from '../../get-page-files'\nimport type { AppBuildManifest } from '../../../build/webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from '../../../build/webpack/plugins/pages-manifest-plugin'\nimport { pathToRegexp } from 'next/dist/compiled/path-to-regexp'\nimport type { ActionManifest } from '../../../build/webpack/plugins/flight-client-entry-plugin'\nimport type { NextFontManifest } from '../../../build/webpack/plugins/next-font-manifest-plugin'\nimport type { LoadableManifest } from '../../load-components'\nimport {\n  APP_BUILD_MANIFEST,\n  APP_PATHS_MANIFEST,\n  BUILD_MANIFEST,\n  INTERCEPTION_ROUTE_REWRITE_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  NEXT_FONT_MANIFEST,\n  PAGES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST,\n} from '../../../shared/lib/constants'\nimport { join, posix } from 'path'\nimport { readFile } from 'fs/promises'\nimport type { SetupOpts } from '../../lib/router-utils/setup-dev-bundler'\nimport { deleteCache } from '../require-cache'\nimport { writeFileAtomic } from '../../../lib/fs/write-atomic'\nimport { isInterceptionRouteRewrite } from '../../../lib/generate-interception-routes-rewrites'\nimport {\n  type ClientBuildManifest,\n  normalizeRewritesForBuildManifest,\n  srcEmptySsgManifest,\n  processRoute,\n} from '../../../build/webpack/plugins/build-manifest-plugin'\nimport type { Entrypoints } from './types'\nimport getAssetPathFromRoute from '../../../shared/lib/router/utils/get-asset-path-from-route'\nimport { getEntryKey, type EntryKey } from './entry-key'\nimport type { CustomRoutes } from '../../../lib/load-custom-routes'\nimport { getSortedRoutes } from '../../../shared/lib/router/utils'\nimport { existsSync } from 'fs'\nimport { addMetadataIdToRoute, addRouteSuffix, removeRouteSuffix } from '../turbopack-utils'\nimport { tryToParsePath } from '../../../lib/try-to-parse-path'\n\ninterface InstrumentationDefinition {\n  files: string[]\n  name: 'instrumentation'\n}\n\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n  instrumentation?: InstrumentationDefinition\n}\n\nasync function readPartialManifest<T>(\n  distDir: string,\n  name:\n    | typeof MIDDLEWARE_MANIFEST\n    | typeof BUILD_MANIFEST\n    | typeof APP_BUILD_MANIFEST\n    | typeof PAGES_MANIFEST\n    | typeof APP_PATHS_MANIFEST\n    | `${typeof SERVER_REFERENCE_MANIFEST}.json`\n    | `${typeof NEXT_FONT_MANIFEST}.json`\n    | typeof REACT_LOADABLE_MANIFEST,\n  pageName: string,\n  type: 'pages' | 'app' | 'middleware' | 'instrumentation' = 'pages'\n): Promise<T> {\n  const page = pageName.replace(/\\/sitemap\\/route$/, '/sitemap.xml/route')\n\n  let manifestPath = posix.join(\n    distDir,\n    `server`,\n    type,\n    type === 'middleware' || type === 'instrumentation'\n      ? ''\n      : type === 'app'\n        ? page\n        : getAssetPathFromRoute(page),\n    name\n  )\n  // existsSync is faster than using the async version\n  if(!existsSync(manifestPath) && page.endsWith('/route')) {\n    // TODO: Improve implementation of metadata routes, currently it requires this extra check for the variants of the files that can be written.\n    const metadataPage = addRouteSuffix(addMetadataIdToRoute(removeRouteSuffix(page.replace(/\\/sitemap\\.xml\\/route$/, '/sitemap/route'))))\n    manifestPath = posix.join(\n      distDir,\n      `server`,\n      type,\n      type === 'middleware' || type === 'instrumentation'\n        ? ''\n        : type === 'app'\n          ? metadataPage\n          : getAssetPathFromRoute(metadataPage),\n      name\n    )\n  }\n  return JSON.parse(await readFile(posix.join(manifestPath), 'utf-8')) as T\n}\n\nexport class TurbopackManifestLoader {\n  private actionManifests: Map<EntryKey, ActionManifest> = new Map()\n  private appBuildManifests: Map<EntryKey, AppBuildManifest> = new Map()\n  private appPathsManifests: Map<EntryKey, PagesManifest> = new Map()\n  private buildManifests: Map<EntryKey, BuildManifest> = new Map()\n  private fontManifests: Map<EntryKey, NextFontManifest> = new Map()\n  private loadableManifests: Map<EntryKey, LoadableManifest> = new Map()\n  private middlewareManifests: Map<EntryKey, TurbopackMiddlewareManifest> =\n    new Map()\n  private pagesManifests: Map<string, PagesManifest> = new Map()\n  private encryptionKey: string\n\n  private readonly distDir: string\n  private readonly buildId: string\n\n  constructor({\n    distDir,\n    buildId,\n    encryptionKey,\n  }: {\n    buildId: string\n    distDir: string\n    encryptionKey: string\n  }) {\n    this.distDir = distDir\n    this.buildId = buildId\n    this.encryptionKey = encryptionKey\n  }\n\n  delete(key: EntryKey) {\n    this.actionManifests.delete(key)\n    this.appBuildManifests.delete(key)\n    this.appPathsManifests.delete(key)\n    this.buildManifests.delete(key)\n    this.fontManifests.delete(key)\n    this.loadableManifests.delete(key)\n    this.middlewareManifests.delete(key)\n    this.pagesManifests.delete(key)\n  }\n\n  async loadActionManifest(pageName: string): Promise<void> {\n    this.actionManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${SERVER_REFERENCE_MANIFEST}.json`,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async mergeActionManifests(manifests: Iterable<ActionManifest>) {\n    type ActionEntries = ActionManifest['edge' | 'node']\n    const manifest: ActionManifest = {\n      node: {},\n      edge: {},\n      encryptionKey: this.encryptionKey,\n    }\n\n    function mergeActionIds(\n      actionEntries: ActionEntries,\n      other: ActionEntries\n    ): void {\n      for (const key in other) {\n        const action = (actionEntries[key] ??= {\n          workers: {},\n          layer: {},\n        })\n        Object.assign(action.workers, other[key].workers)\n        Object.assign(action.layer, other[key].layer)\n      }\n    }\n\n    for (const m of manifests) {\n      mergeActionIds(manifest.node, m.node)\n      mergeActionIds(manifest.edge, m.edge)\n    }\n\n    return manifest\n  }\n\n  private async writeActionManifest(): Promise<void> {\n    const actionManifest = await this.mergeActionManifests(\n      this.actionManifests.values()\n    )\n    const actionManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.json`\n    )\n    const actionManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${SERVER_REFERENCE_MANIFEST}.js`\n    )\n    const json = JSON.stringify(actionManifest, null, 2)\n    deleteCache(actionManifestJsonPath)\n    deleteCache(actionManifestJsPath)\n    await writeFileAtomic(actionManifestJsonPath, json)\n    await writeFileAtomic(\n      actionManifestJsPath,\n      `self.__RSC_SERVER_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadAppBuildManifest(pageName: string): Promise<void> {\n    this.appBuildManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_BUILD_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private mergeAppBuildManifests(manifests: Iterable<AppBuildManifest>) {\n    const manifest: AppBuildManifest = {\n      pages: {},\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n    }\n    return manifest\n  }\n\n  private async writeAppBuildManifest(): Promise<void> {\n    const appBuildManifest = this.mergeAppBuildManifests(\n      this.appBuildManifests.values()\n    )\n    const appBuildManifestPath = join(this.distDir, APP_BUILD_MANIFEST)\n    deleteCache(appBuildManifestPath)\n    await writeFileAtomic(\n      appBuildManifestPath,\n      JSON.stringify(appBuildManifest, null, 2)\n    )\n  }\n\n  async loadAppPathsManifest(pageName: string): Promise<void> {\n    this.appPathsManifests.set(\n      getEntryKey('app', 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        APP_PATHS_MANIFEST,\n        pageName,\n        'app'\n      )\n    )\n  }\n\n  private async writeAppPathsManifest(): Promise<void> {\n    const appPathsManifest = this.mergePagesManifests(\n      this.appPathsManifests.values()\n    )\n    const appPathsManifestPath = join(\n      this.distDir,\n      'server',\n      APP_PATHS_MANIFEST\n    )\n    deleteCache(appPathsManifestPath)\n    await writeFileAtomic(\n      appPathsManifestPath,\n      JSON.stringify(appPathsManifest, null, 2)\n    )\n  }\n\n\n  async loadBuildManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.buildManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(this.distDir, BUILD_MANIFEST, pageName, type)\n    )\n  }\n\n  private mergeBuildManifests(manifests: Iterable<BuildManifest>) {\n    const manifest: Partial<BuildManifest> & Pick<BuildManifest, 'pages'> = {\n      pages: {\n        '/_app': [],\n      },\n      // Something in next.js depends on these to exist even for app dir rendering\n      devFiles: [],\n      ampDevFiles: [],\n      polyfillFiles: [],\n      lowPriorityFiles: [\n        `static/${this.buildId}/_ssgManifest.js`,\n        `static/${this.buildId}/_buildManifest.js`,\n      ],\n      rootMainFiles: [],\n      ampFirstPages: [],\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.pages, m.pages)\n      if (m.rootMainFiles.length) manifest.rootMainFiles = m.rootMainFiles\n      // polyfillFiles should always be the same, so we can overwrite instead of actually merging\n      if (m.polyfillFiles.length) manifest.polyfillFiles = m.polyfillFiles\n    }\n    return manifest\n  }\n\n  private async writeBuildManifest(\n    entrypoints: Entrypoints,\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined,\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n  ): Promise<void> {\n    const rewrites = productionRewrites ?? {\n      ...devRewrites,\n      beforeFiles: (devRewrites?.beforeFiles ?? []).map(processRoute),\n      afterFiles: (devRewrites?.afterFiles ?? []).map(processRoute),\n      fallback: (devRewrites?.fallback ?? []).map(processRoute),\n    }\n    const buildManifest = this.mergeBuildManifests(this.buildManifests.values())\n    const buildManifestPath = join(this.distDir, BUILD_MANIFEST)\n    const middlewareBuildManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_BUILD_MANIFEST}.js`\n    )\n    const interceptionRewriteManifestPath = join(\n      this.distDir,\n      'server',\n      `${INTERCEPTION_ROUTE_REWRITE_MANIFEST}.js`\n    )\n    deleteCache(buildManifestPath)\n    deleteCache(middlewareBuildManifestPath)\n    deleteCache(interceptionRewriteManifestPath)\n    await writeFileAtomic(\n      buildManifestPath,\n      JSON.stringify(buildManifest, null, 2)\n    )\n    await writeFileAtomic(\n      middlewareBuildManifestPath,\n      `self.__BUILD_MANIFEST=${JSON.stringify(buildManifest)};`\n    )\n\n    const interceptionRewrites = JSON.stringify(\n      rewrites.beforeFiles.filter(isInterceptionRouteRewrite)\n    )\n\n    await writeFileAtomic(\n      interceptionRewriteManifestPath,\n      `self.__INTERCEPTION_ROUTE_REWRITE_MANIFEST=${JSON.stringify(\n        interceptionRewrites\n      )};`\n    )\n\n    const pagesKeys = [...entrypoints.page.keys()]\n    if (entrypoints.global.app) {\n      pagesKeys.push('/_app')\n    }\n    if (entrypoints.global.error) {\n      pagesKeys.push('/_error')\n    }\n\n    const sortedPageKeys = getSortedRoutes(pagesKeys)\n    const content: ClientBuildManifest = {\n      __rewrites: normalizeRewritesForBuildManifest(rewrites) as any,\n      ...Object.fromEntries(\n        sortedPageKeys.map((pathname) => [\n          pathname,\n          [`static/chunks/pages${pathname === '/' ? '/index' : pathname}.js`],\n        ])\n      ),\n      sortedPages: sortedPageKeys,\n    }\n    const buildManifestJs = `self.__BUILD_MANIFEST = ${JSON.stringify(\n      content\n    )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_buildManifest.js'),\n      buildManifestJs\n    )\n    await writeFileAtomic(\n      join(this.distDir, 'static', this.buildId, '_ssgManifest.js'),\n      srcEmptySsgManifest\n    )\n  }\n\n  private async writeClientMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    const matchers = middlewareManifest?.middleware['/']?.matchers || []\n\n    const clientMiddlewareManifestPath = join(\n      this.distDir,\n      'static',\n      this.buildId,\n      `${TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST}`\n    )\n    deleteCache(clientMiddlewareManifestPath)\n    await writeFileAtomic(\n      clientMiddlewareManifestPath,\n      JSON.stringify(matchers, null, 2)\n    )\n  }\n\n  private async writeFallbackBuildManifest(): Promise<void> {\n    const fallbackBuildManifest = this.mergeBuildManifests(\n      [\n        this.buildManifests.get(getEntryKey('pages', 'server', '_app')),\n        this.buildManifests.get(getEntryKey('pages', 'server', '_error')),\n      ].filter(Boolean) as BuildManifest[]\n    )\n    const fallbackBuildManifestPath = join(\n      this.distDir,\n      `fallback-${BUILD_MANIFEST}`\n    )\n    deleteCache(fallbackBuildManifestPath)\n    await writeFileAtomic(\n      fallbackBuildManifestPath,\n      JSON.stringify(fallbackBuildManifest, null, 2)\n    )\n  }\n\n  async loadFontManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.fontManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        `${NEXT_FONT_MANIFEST}.json`,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeFontManifests(manifests: Iterable<NextFontManifest>) {\n    const manifest: NextFontManifest = {\n      app: {},\n      appUsingSizeAdjust: false,\n      pages: {},\n      pagesUsingSizeAdjust: false,\n    }\n    for (const m of manifests) {\n      Object.assign(manifest.app, m.app)\n      Object.assign(manifest.pages, m.pages)\n\n      manifest.appUsingSizeAdjust =\n        manifest.appUsingSizeAdjust || m.appUsingSizeAdjust\n      manifest.pagesUsingSizeAdjust =\n        manifest.pagesUsingSizeAdjust || m.pagesUsingSizeAdjust\n    }\n    return manifest\n  }\n\n  private async writeNextFontManifest(): Promise<void> {\n    const fontManifest = this.mergeFontManifests(this.fontManifests.values())\n    const json = JSON.stringify(fontManifest, null, 2)\n\n    const fontManifestJsonPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.json`\n    )\n    const fontManifestJsPath = join(\n      this.distDir,\n      'server',\n      `${NEXT_FONT_MANIFEST}.js`\n    )\n    deleteCache(fontManifestJsonPath)\n    deleteCache(fontManifestJsPath)\n    await writeFileAtomic(fontManifestJsonPath, json)\n    await writeFileAtomic(\n      fontManifestJsPath,\n      `self.__NEXT_FONT_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadLoadableManifest(\n    pageName: string,\n    type: 'app' | 'pages' = 'pages'\n  ): Promise<void> {\n    this.loadableManifests.set(\n      getEntryKey(type, 'server', pageName),\n      await readPartialManifest(\n        this.distDir,\n        REACT_LOADABLE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  private mergeLoadableManifests(manifests: Iterable<LoadableManifest>) {\n    const manifest: LoadableManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writeLoadableManifest(): Promise<void> {\n    const loadableManifest = this.mergeLoadableManifests(\n      this.loadableManifests.values()\n    )\n    const loadableManifestPath = join(this.distDir, REACT_LOADABLE_MANIFEST)\n    const middlewareloadableManifestPath = join(\n      this.distDir,\n      'server',\n      `${MIDDLEWARE_REACT_LOADABLE_MANIFEST}.js`\n    )\n\n    const json = JSON.stringify(loadableManifest, null, 2)\n\n    deleteCache(loadableManifestPath)\n    deleteCache(middlewareloadableManifestPath)\n    await writeFileAtomic(loadableManifestPath, json)\n    await writeFileAtomic(\n      middlewareloadableManifestPath,\n      `self.__REACT_LOADABLE_MANIFEST=${JSON.stringify(json)}`\n    )\n  }\n\n  async loadMiddlewareManifest(\n    pageName: string,\n    type: 'pages' | 'app' | 'middleware' | 'instrumentation'\n  ): Promise<void> {\n    this.middlewareManifests.set(\n      getEntryKey(\n        type === 'middleware' || type === 'instrumentation' ? 'root' : type,\n        'server',\n        pageName\n      ),\n      await readPartialManifest(\n        this.distDir,\n        MIDDLEWARE_MANIFEST,\n        pageName,\n        type\n      )\n    )\n  }\n\n  getMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.get(key)\n  }\n\n  deleteMiddlewareManifest(key: EntryKey) {\n    return this.middlewareManifests.delete(key)\n  }\n\n  private mergeMiddlewareManifests(\n    manifests: Iterable<TurbopackMiddlewareManifest>\n  ): MiddlewareManifest {\n    const manifest: MiddlewareManifest = {\n      version: 3,\n      middleware: {},\n      sortedMiddleware: [],\n      functions: {},\n    }\n    let instrumentation: InstrumentationDefinition | undefined = undefined\n    for (const m of manifests) {\n      Object.assign(manifest.functions, m.functions)\n      Object.assign(manifest.middleware, m.middleware)\n      if (m.instrumentation) {\n        instrumentation = m.instrumentation\n      }\n    }\n    const updateFunctionDefinition = (\n      fun: EdgeFunctionDefinition\n    ): EdgeFunctionDefinition => {\n      return {\n        ...fun,\n        files: [...(instrumentation?.files ?? []), ...fun.files],\n      }\n    }\n    for (const key of Object.keys(manifest.middleware)) {\n      const value = manifest.middleware[key]\n      manifest.middleware[key] = updateFunctionDefinition(value)\n    }\n    for (const key of Object.keys(manifest.functions)) {\n      const value = manifest.functions[key]\n      manifest.functions[key] = updateFunctionDefinition(value)\n    }\n    for (const fun of Object.values(manifest.functions).concat(\n      Object.values(manifest.middleware)\n    )) {\n      for (const matcher of fun.matchers) {\n        if (!matcher.regexp) {\n          matcher.regexp = pathToRegexp(matcher.originalSource, [], {\n            delimiter: '/',\n            sensitive: false,\n            strict: true,\n          }).source.replaceAll('\\\\/', '/')\n        }\n      }\n    }\n    manifest.sortedMiddleware = Object.keys(manifest.middleware)\n\n    return manifest\n  }\n\n  private async writeMiddlewareManifest(): Promise<void> {\n    const middlewareManifest = this.mergeMiddlewareManifests(\n      this.middlewareManifests.values()\n    )\n\n    // Normalize regexes as it uses path-to-regexp\n    for (const key in middlewareManifest.middleware) {\n      middlewareManifest.middleware[key].matchers.forEach((matcher) => {\n        if (!matcher.regexp.startsWith('^')) {\n          const parsedPage = tryToParsePath(matcher.regexp)\n          if (parsedPage.error || !parsedPage.regexStr) {\n            throw new Error(`Invalid source: ${matcher.regexp}`)\n          }\n          matcher.regexp = parsedPage.regexStr\n        }\n      })\n    }\n\n    const middlewareManifestPath = join(\n      this.distDir,\n      'server',\n      MIDDLEWARE_MANIFEST\n    )\n    deleteCache(middlewareManifestPath)\n    await writeFileAtomic(\n      middlewareManifestPath,\n      JSON.stringify(middlewareManifest, null, 2)\n    )\n  }\n\n  async loadPagesManifest(pageName: string): Promise<void> {\n    this.pagesManifests.set(\n      getEntryKey('pages', 'server', pageName),\n      await readPartialManifest(this.distDir, PAGES_MANIFEST, pageName)\n    )\n  }\n\n  private mergePagesManifests(manifests: Iterable<PagesManifest>) {\n    const manifest: PagesManifest = {}\n    for (const m of manifests) {\n      Object.assign(manifest, m)\n    }\n    return manifest\n  }\n\n  private async writePagesManifest(): Promise<void> {\n    const pagesManifest = this.mergePagesManifests(this.pagesManifests.values())\n    const pagesManifestPath = join(this.distDir, 'server', PAGES_MANIFEST)\n    deleteCache(pagesManifestPath)\n    await writeFileAtomic(\n      pagesManifestPath,\n      JSON.stringify(pagesManifest, null, 2)\n    )\n  }\n\n  async writeManifests({\n    devRewrites,\n    productionRewrites,\n    entrypoints,\n  }: {\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined\n    productionRewrites: CustomRoutes['rewrites'] | undefined\n    entrypoints: Entrypoints\n  }) {\n    await this.writeActionManifest()\n    await this.writeAppBuildManifest()\n    await this.writeAppPathsManifest()\n    await this.writeBuildManifest(entrypoints, devRewrites, productionRewrites)\n    await this.writeFallbackBuildManifest()\n    await this.writeLoadableManifest()\n    await this.writeMiddlewareManifest()\n    await this.writeClientMiddlewareManifest()\n    await this.writeNextFontManifest()\n    await this.writePagesManifest()\n  }\n}\n"],"names":["pathToRegexp","APP_BUILD_MANIFEST","APP_PATHS_MANIFEST","BUILD_MANIFEST","INTERCEPTION_ROUTE_REWRITE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","NEXT_FONT_MANIFEST","PAGES_MANIFEST","REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","join","posix","readFile","deleteCache","writeFileAtomic","isInterceptionRouteRewrite","normalizeRewritesForBuildManifest","srcEmptySsgManifest","processRoute","getAssetPathFromRoute","getEntryKey","getSortedRoutes","existsSync","addMetadataIdToRoute","addRouteSuffix","removeRouteSuffix","tryToParsePath","readPartialManifest","distDir","name","pageName","type","page","replace","manifestPath","endsWith","metadataPage","JSON","parse","TurbopackManifestLoader","constructor","buildId","encryptionKey","actionManifests","Map","appBuildManifests","appPathsManifests","buildManifests","fontManifests","loadableManifests","middlewareManifests","pagesManifests","delete","key","loadActionManifest","set","mergeActionManifests","manifests","manifest","node","edge","mergeActionIds","actionEntries","other","action","workers","layer","Object","assign","m","writeActionManifest","actionManifest","values","actionManifestJsonPath","actionManifestJsPath","json","stringify","loadAppBuildManifest","mergeAppBuildManifests","pages","writeAppBuildManifest","appBuildManifest","appBuildManifestPath","loadAppPathsManifest","writeAppPathsManifest","appPathsManifest","mergePagesManifests","appPathsManifestPath","loadBuildManifest","mergeBuildManifests","devFiles","ampDevFiles","polyfillFiles","lowPriorityFiles","rootMainFiles","ampFirstPages","length","writeBuildManifest","entrypoints","devRewrites","productionRewrites","rewrites","beforeFiles","map","afterFiles","fallback","buildManifest","buildManifestPath","middlewareBuildManifestPath","interceptionRewriteManifestPath","interceptionRewrites","filter","pagesKeys","keys","global","app","push","error","sortedPageKeys","content","__rewrites","fromEntries","pathname","sortedPages","buildManifestJs","writeClientMiddlewareManifest","middlewareManifest","mergeMiddlewareManifests","matchers","middleware","clientMiddlewareManifestPath","writeFallbackBuildManifest","fallbackBuildManifest","get","Boolean","fallbackBuildManifestPath","loadFontManifest","mergeFontManifests","appUsingSizeAdjust","pagesUsingSizeAdjust","writeNextFontManifest","fontManifest","fontManifestJsonPath","fontManifestJsPath","loadLoadableManifest","mergeLoadableManifests","writeLoadableManifest","loadableManifest","loadableManifestPath","middlewareloadableManifestPath","loadMiddlewareManifest","getMiddlewareManifest","deleteMiddlewareManifest","version","sortedMiddleware","functions","instrumentation","undefined","updateFunctionDefinition","fun","files","value","concat","matcher","regexp","originalSource","delimiter","sensitive","strict","source","replaceAll","writeMiddlewareManifest","forEach","startsWith","parsedPage","regexStr","Error","middlewareManifestPath","loadPagesManifest","writePagesManifest","pagesManifest","pagesManifestPath","writeManifests"],"mappings":"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"}