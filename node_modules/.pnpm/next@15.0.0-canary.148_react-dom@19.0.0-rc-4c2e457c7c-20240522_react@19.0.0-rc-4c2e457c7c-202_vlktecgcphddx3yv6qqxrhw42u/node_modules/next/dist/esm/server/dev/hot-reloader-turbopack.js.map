{"version":3,"sources":["../../../src/server/dev/hot-reloader-turbopack.ts"],"sourcesContent":["import type { Socket } from 'net'\nimport { mkdir, writeFile } from 'fs/promises'\nimport { join, extname } from 'path'\n\nimport ws from 'next/dist/compiled/ws'\n\nimport type { OutputState } from '../../build/output/store'\nimport { store as consoleStore } from '../../build/output/store'\nimport type {\n  CompilationError,\n  HMR_ACTION_TYPES,\n  NextJsHotReloaderInterface,\n  ReloadPageAction,\n  SyncAction,\n  TurbopackConnectedAction,\n} from './hot-reloader-types'\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from './hot-reloader-types'\nimport type { Update as TurbopackUpdate } from '../../build/swc'\nimport {\n  createDefineEnv,\n  type Endpoint,\n  type TurbopackResult,\n  type WrittenEndpoint,\n} from '../../build/swc'\nimport * as Log from '../../build/output/log'\nimport {\n  getVersionInfo,\n  matchNextPageBundleRequest,\n} from './hot-reloader-webpack'\nimport { BLOCKED_PAGES } from '../../shared/lib/constants'\nimport { getOverlayMiddleware } from '../../client/components/react-dev-overlay/server/middleware-turbopack'\nimport { PageNotFoundError } from '../../shared/lib/utils'\nimport { debounce } from '../utils'\nimport { deleteAppClientCache, deleteCache } from './require-cache'\nimport {\n  clearAllModuleContexts,\n  clearModuleContext,\n} from '../lib/render-server'\nimport { denormalizePagePath } from '../../shared/lib/page-path/denormalize-page-path'\nimport { trace } from '../../trace'\nimport {\n  AssetMapper,\n  type ChangeSubscriptions,\n  type ClientState,\n  type EntryIssuesMap,\n  formatIssue,\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  handlePagesErrorRoute,\n  handleRouteType,\n  hasEntrypointForKey,\n  msToNs,\n  processIssues,\n  type ReadyIds,\n  renderStyledStringToErrorAnsi,\n  type SendHmr,\n  type StartBuilding,\n  processTopLevelIssues,\n  type TopLevelIssuesMap,\n  isWellKnownError,\n  printNonFatalIssue,\n  normalizedPageToTurbopackStructureRoute,\n} from './turbopack-utils'\nimport {\n  propagateServerField,\n  type ServerFields,\n  type SetupOpts,\n} from '../lib/router-utils/setup-dev-bundler'\nimport { TurbopackManifestLoader } from './turbopack/manifest-loader'\nimport type { Entrypoints } from './turbopack/types'\nimport { findPagePathData } from './on-demand-entry-handler'\nimport type { RouteDefinition } from '../route-definitions/route-definition'\nimport {\n  type EntryKey,\n  getEntryKey,\n  splitEntryKey,\n} from './turbopack/entry-key'\nimport { FAST_REFRESH_RUNTIME_RELOAD } from './messages'\nimport { generateEncryptionKeyBase64 } from '../app-render/encryption-utils'\nimport { isAppPageRouteDefinition } from '../route-definitions/app-page-route-definition'\nimport { normalizeAppPath } from '../../shared/lib/router/utils/app-paths'\nimport { getNodeDebugType } from '../lib/utils'\n// import { getSupportedBrowsers } from '../../build/utils'\n\nconst wsServer = new ws.Server({ noServer: true })\nconst isTestMode = !!(\n  process.env.NEXT_TEST_MODE ||\n  process.env.__NEXT_TEST_MODE ||\n  process.env.DEBUG\n)\n\nconst sessionId = Math.floor(Number.MAX_SAFE_INTEGER * Math.random())\n\nexport async function createHotReloaderTurbopack(\n  opts: SetupOpts,\n  serverFields: ServerFields,\n  distDir: string,\n  resetFetch: () => void\n): Promise<NextJsHotReloaderInterface> {\n  const dev = true\n  const buildId = 'development'\n  const { nextConfig, dir } = opts\n\n  const { loadBindings } =\n    require('../../build/swc') as typeof import('../../build/swc')\n\n  let bindings = await loadBindings()\n\n  // For the debugging purpose, check if createNext or equivalent next instance setup in test cases\n  // works correctly. Normally `run-test` hides output so only will be visible when `--debug` flag is used.\n  if (process.env.TURBOPACK && isTestMode) {\n    require('console').log('Creating turbopack project', {\n      dir,\n      testMode: isTestMode,\n    })\n  }\n\n  const hasRewrites =\n    opts.fsChecker.rewrites.afterFiles.length > 0 ||\n    opts.fsChecker.rewrites.beforeFiles.length > 0 ||\n    opts.fsChecker.rewrites.fallback.length > 0\n\n  const hotReloaderSpan = trace('hot-reloader', undefined, {\n    version: process.env.__NEXT_VERSION as string,\n  })\n  // Ensure the hotReloaderSpan is flushed immediately as it's the parentSpan for all processing\n  // of the current `next dev` invocation.\n  hotReloaderSpan.stop()\n\n  const encryptionKey = await generateEncryptionKeyBase64(dev)\n\n  // TODO: Implement\n  let clientRouterFilters: any\n  if (nextConfig.experimental.clientRouterFilter) {\n    // TODO this need to be set correctly for persistent caching to work\n  }\n\n  // const supportedBrowsers = await getSupportedBrowsers(dir, dev)\n  const supportedBrowsers = [\n    'last 1 Chrome versions, last 1 Firefox versions, last 1 Safari versions, last 1 Edge versions',\n  ]\n\n  const project = await bindings.turbo.createProject(\n    {\n      projectPath: dir,\n      rootPath:\n        opts.nextConfig.experimental.turbo?.root ||\n        opts.nextConfig.outputFileTracingRoot ||\n        dir,\n      nextConfig: opts.nextConfig,\n      jsConfig: await getTurbopackJsConfig(dir, nextConfig),\n      watch: dev,\n      dev,\n      env: process.env as Record<string, string>,\n      defineEnv: createDefineEnv({\n        isTurbopack: true,\n        clientRouterFilters,\n        config: nextConfig,\n        dev,\n        distDir,\n        fetchCacheKeyPrefix: opts.nextConfig.experimental.fetchCacheKeyPrefix,\n        hasRewrites,\n        // TODO: Implement\n        middlewareMatchers: undefined,\n      }),\n      buildId,\n      encryptionKey,\n      previewProps: opts.fsChecker.prerenderManifest.preview,\n      browserslistQuery: supportedBrowsers.join(', '),\n    },\n    {\n      memoryLimit: opts.nextConfig.experimental.turbo?.memoryLimit,\n    }\n  )\n  opts.onCleanup(() => project.onExit())\n  const entrypointsSubscription = project.entrypointsSubscribe()\n\n  const currentWrittenEntrypoints: Map<EntryKey, WrittenEndpoint> = new Map()\n  const currentEntrypoints: Entrypoints = {\n    global: {\n      app: undefined,\n      document: undefined,\n      error: undefined,\n\n      middleware: undefined,\n      instrumentation: undefined,\n    },\n\n    page: new Map(),\n    app: new Map(),\n  }\n\n  const currentTopLevelIssues: TopLevelIssuesMap = new Map()\n  const currentEntryIssues: EntryIssuesMap = new Map()\n\n  const manifestLoader = new TurbopackManifestLoader({\n    buildId,\n    distDir,\n    encryptionKey,\n  })\n\n  // Dev specific\n  const changeSubscriptions: ChangeSubscriptions = new Map()\n  const serverPathState = new Map<string, string>()\n  const readyIds: ReadyIds = new Set()\n  let currentEntriesHandlingResolve: ((value?: unknown) => void) | undefined\n  let currentEntriesHandling = new Promise(\n    (resolve) => (currentEntriesHandlingResolve = resolve)\n  )\n\n  const assetMapper = new AssetMapper()\n\n  function clearRequireCache(\n    key: EntryKey,\n    writtenEndpoint: WrittenEndpoint,\n    {\n      force,\n    }: {\n      // Always clear the cache, don't check if files have changed\n      force?: boolean\n    } = {}\n  ): void {\n    if (force) {\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        serverPathState.set(path, contentHash)\n      }\n    } else {\n      // Figure out if the server files have changed\n      let hasChange = false\n      for (const { path, contentHash } of writtenEndpoint.serverPaths) {\n        // We ignore source maps\n        if (path.endsWith('.map')) continue\n        const localKey = `${key}:${path}`\n        const localHash = serverPathState.get(localKey)\n        const globalHash = serverPathState.get(path)\n        if (\n          (localHash && localHash !== contentHash) ||\n          (globalHash && globalHash !== contentHash)\n        ) {\n          hasChange = true\n          serverPathState.set(key, contentHash)\n          serverPathState.set(path, contentHash)\n        } else {\n          if (!localHash) {\n            serverPathState.set(key, contentHash)\n          }\n          if (!globalHash) {\n            serverPathState.set(path, contentHash)\n          }\n        }\n      }\n\n      if (!hasChange) {\n        return\n      }\n    }\n\n    resetFetch()\n\n    const hasAppPaths = writtenEndpoint.serverPaths.some(({ path: p }) =>\n      p.startsWith('server/app')\n    )\n\n    if (hasAppPaths) {\n      deleteAppClientCache()\n    }\n\n    const serverPaths = writtenEndpoint.serverPaths.map(({ path: p }) =>\n      join(distDir, p)\n    )\n\n    for (const file of serverPaths) {\n      clearModuleContext(file)\n      deleteCache(file)\n    }\n\n    return\n  }\n\n  const buildingIds = new Set()\n\n  const startBuilding: StartBuilding = (id, requestUrl, forceRebuild) => {\n    if (!forceRebuild && readyIds.has(id)) {\n      return () => {}\n    }\n    if (buildingIds.size === 0) {\n      consoleStore.setState(\n        {\n          loading: true,\n          trigger: id,\n          url: requestUrl,\n        } as OutputState,\n        true\n      )\n    }\n    buildingIds.add(id)\n    return function finishBuilding() {\n      if (buildingIds.size === 0) {\n        return\n      }\n      readyIds.add(id)\n      buildingIds.delete(id)\n      if (buildingIds.size === 0) {\n        hmrEventHappened = false\n        consoleStore.setState(\n          {\n            loading: false,\n          } as OutputState,\n          true\n        )\n      }\n    }\n  }\n\n  let hmrEventHappened = false\n  let hmrHash = 0\n\n  const clients = new Set<ws>()\n  const clientStates = new WeakMap<ws, ClientState>()\n\n  function sendToClient(client: ws, payload: HMR_ACTION_TYPES) {\n    client.send(JSON.stringify(payload))\n  }\n\n  function sendEnqueuedMessages() {\n    for (const [, issueMap] of currentEntryIssues) {\n      if (\n        [...issueMap.values()].filter((i) => i.severity !== 'warning').length >\n        0\n      ) {\n        // During compilation errors we want to delay the HMR events until errors are fixed\n        return\n      }\n    }\n\n    for (const client of clients) {\n      const state = clientStates.get(client)\n      if (!state) {\n        continue\n      }\n\n      for (const [, issueMap] of state.clientIssues) {\n        if (\n          [...issueMap.values()].filter((i) => i.severity !== 'warning')\n            .length > 0\n        ) {\n          // During compilation errors we want to delay the HMR events until errors are fixed\n          return\n        }\n      }\n\n      for (const payload of state.hmrPayloads.values()) {\n        sendToClient(client, payload)\n      }\n      state.hmrPayloads.clear()\n\n      if (state.turbopackUpdates.length > 0) {\n        sendToClient(client, {\n          action: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_MESSAGE,\n          data: state.turbopackUpdates,\n        })\n        state.turbopackUpdates.length = 0\n      }\n    }\n  }\n  const sendEnqueuedMessagesDebounce = debounce(sendEnqueuedMessages, 2)\n\n  const sendHmr: SendHmr = (id: string, payload: HMR_ACTION_TYPES) => {\n    for (const client of clients) {\n      clientStates.get(client)?.hmrPayloads.set(id, payload)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  function sendTurbopackMessage(payload: TurbopackUpdate) {\n    // TODO(PACK-2049): For some reason we end up emitting hundreds of issues messages on bigger apps,\n    //   a lot of which are duplicates.\n    //   They are currently not handled on the client at all, so might as well not send them for now.\n    payload.diagnostics = []\n    payload.issues = []\n\n    for (const client of clients) {\n      clientStates.get(client)?.turbopackUpdates.push(payload)\n    }\n\n    hmrEventHappened = true\n    sendEnqueuedMessagesDebounce()\n  }\n\n  async function subscribeToChanges(\n    key: EntryKey,\n    includeIssues: boolean,\n    endpoint: Endpoint,\n    makePayload: (\n      change: TurbopackResult\n    ) => Promise<HMR_ACTION_TYPES> | HMR_ACTION_TYPES | void\n  ) {\n    if (changeSubscriptions.has(key)) {\n      return\n    }\n\n    const { side } = splitEntryKey(key)\n\n    const changedPromise = endpoint[`${side}Changed`](includeIssues)\n    changeSubscriptions.set(key, changedPromise)\n    const changed = await changedPromise\n\n    for await (const change of changed) {\n      processIssues(currentEntryIssues, key, change, false, true)\n      const payload = await makePayload(change)\n      if (payload) {\n        sendHmr(key, payload)\n      }\n    }\n  }\n\n  async function unsubscribeFromChanges(key: EntryKey) {\n    const subscription = await changeSubscriptions.get(key)\n    if (subscription) {\n      await subscription.return?.()\n      changeSubscriptions.delete(key)\n    }\n    currentEntryIssues.delete(key)\n  }\n\n  async function subscribeToHmrEvents(client: ws, id: string) {\n    const key = getEntryKey('assets', 'client', id)\n    if (!hasEntrypointForKey(currentEntrypoints, key, assetMapper)) {\n      // maybe throw an error / force the client to reload?\n      return\n    }\n\n    const state = clientStates.get(client)\n    if (!state || state.subscriptions.has(id)) {\n      return\n    }\n\n    const subscription = project!.hmrEvents(id)\n    state.subscriptions.set(id, subscription)\n\n    // The subscription will always emit once, which is the initial\n    // computation. This is not a change, so swallow it.\n    try {\n      await subscription.next()\n\n      for await (const data of subscription) {\n        processIssues(state.clientIssues, key, data, false, true)\n        if (data.type !== 'issues') {\n          sendTurbopackMessage(data)\n        }\n      }\n    } catch (e) {\n      // The client might be using an HMR session from a previous server, tell them\n      // to fully reload the page to resolve the issue. We can't use\n      // `hotReloader.send` since that would force every connected client to\n      // reload, only this client is out of date.\n      const reloadAction: ReloadPageAction = {\n        action: HMR_ACTIONS_SENT_TO_BROWSER.RELOAD_PAGE,\n      }\n      sendToClient(client, reloadAction)\n      client.close()\n      return\n    }\n  }\n\n  function unsubscribeFromHmrEvents(client: ws, id: string) {\n    const state = clientStates.get(client)\n    if (!state) {\n      return\n    }\n\n    const subscription = state.subscriptions.get(id)\n    subscription?.return!()\n\n    const key = getEntryKey('assets', 'client', id)\n    state.clientIssues.delete(key)\n  }\n\n  async function handleEntrypointsSubscription() {\n    for await (const entrypoints of entrypointsSubscription) {\n      if (!currentEntriesHandlingResolve) {\n        currentEntriesHandling = new Promise(\n          // eslint-disable-next-line no-loop-func\n          (resolve) => (currentEntriesHandlingResolve = resolve)\n        )\n      }\n\n      processTopLevelIssues(currentTopLevelIssues, entrypoints)\n\n      await handleEntrypoints({\n        entrypoints,\n\n        currentEntrypoints,\n\n        currentEntryIssues,\n        manifestLoader,\n        devRewrites: opts.fsChecker.rewrites,\n        productionRewrites: undefined,\n        logErrors: true,\n\n        dev: {\n          assetMapper,\n          changeSubscriptions,\n          clients,\n          clientStates,\n          serverFields,\n\n          hooks: {\n            handleWrittenEndpoint: (id, result) => {\n              currentWrittenEntrypoints.set(id, result)\n              clearRequireCache(id, result)\n            },\n            propagateServerField: propagateServerField.bind(null, opts),\n            sendHmr,\n            startBuilding,\n            subscribeToChanges,\n            unsubscribeFromChanges,\n            unsubscribeFromHmrEvents,\n          },\n        },\n      })\n\n      currentEntriesHandlingResolve!()\n      currentEntriesHandlingResolve = undefined\n    }\n  }\n\n  await mkdir(join(distDir, 'server'), { recursive: true })\n  await mkdir(join(distDir, 'static', buildId), { recursive: true })\n  await writeFile(\n    join(distDir, 'package.json'),\n    JSON.stringify(\n      {\n        type: 'commonjs',\n      },\n      null,\n      2\n    )\n  )\n  const overlayMiddleware = getOverlayMiddleware(project)\n  const versionInfoPromise = getVersionInfo(\n    isTestMode || opts.telemetry.isEnabled\n  )\n\n  let devtoolsFrontendUrl: string | undefined\n  const nodeDebugType = getNodeDebugType()\n  if (nodeDebugType) {\n    const debugPort = process.debugPort\n    let debugInfo\n    try {\n      // It requires to use 127.0.0.1 instead of localhost for server-side fetching.\n      const debugInfoList = await fetch(\n        `http://127.0.0.1:${debugPort}/json/list`\n      ).then((res) => res.json())\n      debugInfo = debugInfoList[0]\n    } catch {}\n    if (debugInfo) {\n      devtoolsFrontendUrl = debugInfo.devtoolsFrontendUrl\n    }\n  }\n\n  const hotReloader: NextJsHotReloaderInterface = {\n    turbopackProject: project,\n    activeWebpackConfigs: undefined,\n    serverStats: null,\n    edgeServerStats: null,\n    async run(req, res, _parsedUrl) {\n      // intercept page chunks request and ensure them with turbopack\n      if (req.url?.startsWith('/_next/static/chunks/pages/')) {\n        const params = matchNextPageBundleRequest(req.url)\n\n        if (params) {\n          const decodedPagePath = `/${params.path\n            .map((param: string) => decodeURIComponent(param))\n            .join('/')}`\n\n          const denormalizedPagePath = denormalizePagePath(decodedPagePath)\n\n          await hotReloader\n            .ensurePage({\n              page: denormalizedPagePath,\n              clientOnly: false,\n              definition: undefined,\n              url: req.url,\n            })\n            .catch(console.error)\n        }\n      }\n\n      await overlayMiddleware(req, res)\n\n      // Request was not finished.\n      return { finished: undefined }\n    },\n\n    // TODO: Figure out if socket type can match the NextJsHotReloaderInterface\n    onHMR(req, socket: Socket, head, onUpgrade) {\n      wsServer.handleUpgrade(req, socket, head, (client) => {\n        onUpgrade(client)\n        const clientIssues: EntryIssuesMap = new Map()\n        const subscriptions: Map<string, AsyncIterator<any>> = new Map()\n\n        clients.add(client)\n        clientStates.set(client, {\n          clientIssues,\n          hmrPayloads: new Map(),\n          turbopackUpdates: [],\n          subscriptions,\n        })\n\n        client.on('close', () => {\n          // Remove active subscriptions\n          for (const subscription of subscriptions.values()) {\n            subscription.return?.()\n          }\n          clientStates.delete(client)\n          clients.delete(client)\n        })\n\n        client.addEventListener('message', ({ data }) => {\n          const parsedData = JSON.parse(\n            typeof data !== 'string' ? data.toString() : data\n          )\n\n          // Next.js messages\n          switch (parsedData.event) {\n            case 'ping':\n              // Ping doesn't need additional handling in Turbopack.\n              break\n            case 'span-end': {\n              hotReloaderSpan.manualTraceChild(\n                parsedData.spanName,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                parsedData.attributes\n              )\n              break\n            }\n            case 'client-hmr-latency': // { id, startTime, endTime, page, updatedModules, isPageHidden }\n              hotReloaderSpan.manualTraceChild(\n                parsedData.event,\n                msToNs(parsedData.startTime),\n                msToNs(parsedData.endTime),\n                {\n                  updatedModules: parsedData.updatedModules,\n                  page: parsedData.page,\n                  isPageHidden: parsedData.isPageHidden,\n                }\n              )\n              break\n            case 'client-error': // { errorCount, clientId }\n            case 'client-warning': // { warningCount, clientId }\n            case 'client-success': // { clientId }\n            case 'server-component-reload-page': // { clientId }\n            case 'client-reload-page': // { clientId }\n            case 'client-removed-page': // { page }\n            case 'client-full-reload': // { stackTrace, hadRuntimeError }\n              const { hadRuntimeError, dependencyChain } = parsedData\n              if (hadRuntimeError) {\n                Log.warn(FAST_REFRESH_RUNTIME_RELOAD)\n              }\n              if (\n                Array.isArray(dependencyChain) &&\n                typeof dependencyChain[0] === 'string'\n              ) {\n                const cleanedModulePath = dependencyChain[0]\n                  .replace(/^\\[project\\]/, '.')\n                  .replace(/ \\[.*\\] \\(.*\\)$/, '')\n                Log.warn(\n                  `Fast Refresh had to perform a full reload when ${cleanedModulePath} changed. Read more: https://nextjs.org/docs/messages/fast-refresh-reload`\n                )\n              }\n              break\n            case 'client-added-page':\n              // TODO\n              break\n\n            default:\n              // Might be a Turbopack message...\n              if (!parsedData.type) {\n                throw new Error(`unrecognized HMR message \"${data}\"`)\n              }\n          }\n\n          // Turbopack messages\n          switch (parsedData.type) {\n            case 'turbopack-subscribe':\n              subscribeToHmrEvents(client, parsedData.path)\n              break\n\n            case 'turbopack-unsubscribe':\n              unsubscribeFromHmrEvents(client, parsedData.path)\n              break\n\n            default:\n              if (!parsedData.event) {\n                throw new Error(`unrecognized Turbopack HMR message \"${data}\"`)\n              }\n          }\n        })\n\n        const turbopackConnected: TurbopackConnectedAction = {\n          action: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_CONNECTED,\n          data: { sessionId },\n        }\n        sendToClient(client, turbopackConnected)\n\n        const errors: CompilationError[] = []\n\n        for (const entryIssues of currentEntryIssues.values()) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                message: formatIssue(issue),\n              })\n            } else {\n              printNonFatalIssue(issue)\n            }\n          }\n        }\n\n        ;(async function () {\n          const versionInfo = await versionInfoPromise\n\n          const sync: SyncAction = {\n            action: HMR_ACTIONS_SENT_TO_BROWSER.SYNC,\n            errors,\n            warnings: [],\n            hash: '',\n            versionInfo,\n            debug: {\n              devtoolsFrontendUrl,\n            },\n          }\n\n          sendToClient(client, sync)\n        })()\n      })\n    },\n\n    send(action) {\n      const payload = JSON.stringify(action)\n      for (const client of clients) {\n        client.send(payload)\n      }\n    },\n\n    setHmrServerError(_error) {\n      // Not implemented yet.\n    },\n    clearHmrServerError() {\n      // Not implemented yet.\n    },\n    async start() {},\n    async stop() {\n      // Not implemented yet.\n    },\n    async getCompilationErrors(page) {\n      const appEntryKey = getEntryKey('app', 'server', page)\n      const pagesEntryKey = getEntryKey('pages', 'server', page)\n\n      const topLevelIssues = currentTopLevelIssues.values()\n\n      const thisEntryIssues =\n        currentEntryIssues.get(appEntryKey) ??\n        currentEntryIssues.get(pagesEntryKey)\n\n      if (thisEntryIssues !== undefined && thisEntryIssues.size > 0) {\n        // If there is an error related to the requesting page we display it instead of the first error\n        return [...topLevelIssues, ...thisEntryIssues.values()]\n          .map((issue) => {\n            const formattedIssue = formatIssue(issue)\n            if (issue.severity === 'warning') {\n              printNonFatalIssue(issue)\n              return null\n            } else if (isWellKnownError(issue)) {\n              Log.error(formattedIssue)\n            }\n\n            return new Error(formattedIssue)\n          })\n          .filter((error) => error !== null)\n      }\n\n      // Otherwise, return all errors across pages\n      const errors = []\n      for (const issue of topLevelIssues) {\n        if (issue.severity !== 'warning') {\n          errors.push(new Error(formatIssue(issue)))\n        }\n      }\n      for (const entryIssues of currentEntryIssues.values()) {\n        for (const issue of entryIssues.values()) {\n          if (issue.severity !== 'warning') {\n            const message = formatIssue(issue)\n            errors.push(new Error(message))\n          } else {\n            printNonFatalIssue(issue)\n          }\n        }\n      }\n      return errors\n    },\n    async invalidate({\n      // .env files or tsconfig/jsconfig change\n      reloadAfterInvalidation,\n    }) {\n      if (reloadAfterInvalidation) {\n        for (const [key, entrypoint] of currentWrittenEntrypoints) {\n          clearRequireCache(key, entrypoint, { force: true })\n        }\n\n        await clearAllModuleContexts()\n        this.send({\n          action: HMR_ACTIONS_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES,\n        })\n      }\n    },\n    async buildFallbackError() {\n      // Not implemented yet.\n    },\n    async ensurePage({\n      page: inputPage,\n      // Unused parameters\n      // clientOnly,\n      appPaths,\n      definition,\n      isApp,\n      url: requestUrl,\n    }) {\n      if (BLOCKED_PAGES.includes(inputPage) && inputPage !== '/_error') {\n        return\n      }\n\n      let routeDef: Pick<RouteDefinition, 'filename' | 'bundlePath' | 'page'> =\n        definition ??\n        (await findPagePathData(\n          dir,\n          inputPage,\n          nextConfig.pageExtensions,\n          opts.pagesDir,\n          opts.appDir\n        ))\n\n      // If the route is actually an app page route, then we should have access\n      // to the app route definition, and therefore, the appPaths from it.\n      if (!appPaths && definition && isAppPageRouteDefinition(definition)) {\n        appPaths = definition.appPaths\n      }\n\n      let page = routeDef.page\n      if (appPaths) {\n        const normalizedPage = normalizeAppPath(page)\n\n        // filter out paths that are not exact matches (e.g. catchall)\n        const matchingAppPaths = appPaths.filter(\n          (path) => normalizeAppPath(path) === normalizedPage\n        )\n\n        // the last item in the array is the root page, if there are parallel routes\n        page = matchingAppPaths[matchingAppPaths.length - 1]\n      }\n\n      const pathname = definition?.pathname ?? inputPage\n\n      if (page === '/_error') {\n        let finishBuilding = startBuilding(pathname, requestUrl, false)\n        try {\n          await handlePagesErrorRoute({\n            dev: true,\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: opts.fsChecker.rewrites,\n            productionRewrites: undefined,\n            logErrors: true,\n\n            hooks: {\n              subscribeToChanges,\n              handleWrittenEndpoint: (id, result) => {\n                clearRequireCache(id, result)\n                currentWrittenEntrypoints.set(id, result)\n                assetMapper.setPathsForKey(id, result.clientPaths)\n              },\n            },\n          })\n        } finally {\n          finishBuilding()\n        }\n        return\n      }\n\n      await currentEntriesHandling\n\n      const isInsideAppDir = routeDef.bundlePath.startsWith('app/')\n      const normalizedAppPage = normalizedPageToTurbopackStructureRoute(\n        page,\n        extname(routeDef.filename)\n      )\n\n      const route = isInsideAppDir\n        ? currentEntrypoints.app.get(normalizedAppPage)\n        : currentEntrypoints.page.get(page)\n\n      if (!route) {\n        // TODO: why is this entry missing in turbopack?\n        if (page === '/middleware') return\n        if (page === '/src/middleware') return\n        if (page === '/instrumentation') return\n        if (page === '/src/instrumentation') return\n\n        throw new PageNotFoundError(`route not found ${page}`)\n      }\n\n      // We don't throw on ensureOpts.isApp === true for page-api\n      // since this can happen when app pages make\n      // api requests to page API routes.\n      if (isApp && route.type === 'page') {\n        throw new Error(`mis-matched route type: isApp && page for ${page}`)\n      }\n\n      const finishBuilding = startBuilding(pathname, requestUrl, false)\n      try {\n        await handleRouteType({\n          dev,\n          page,\n          pathname,\n          route,\n          currentEntryIssues,\n          entrypoints: currentEntrypoints,\n          manifestLoader,\n          readyIds,\n          devRewrites: opts.fsChecker.rewrites,\n          productionRewrites: undefined,\n          logErrors: true,\n\n          hooks: {\n            subscribeToChanges,\n            handleWrittenEndpoint: (id, result) => {\n              currentWrittenEntrypoints.set(id, result)\n              clearRequireCache(id, result)\n              assetMapper.setPathsForKey(id, result.clientPaths)\n            },\n          },\n        })\n      } finally {\n        finishBuilding()\n      }\n    },\n  }\n\n  handleEntrypointsSubscription().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  // Write empty manifests\n  await currentEntriesHandling\n  await manifestLoader.writeManifests({\n    devRewrites: opts.fsChecker.rewrites,\n    productionRewrites: undefined,\n    entrypoints: currentEntrypoints,\n  })\n\n  async function handleProjectUpdates() {\n    for await (const updateMessage of project.updateInfoSubscribe(30)) {\n      switch (updateMessage.updateType) {\n        case 'start': {\n          hotReloader.send({ action: HMR_ACTIONS_SENT_TO_BROWSER.BUILDING })\n          break\n        }\n        case 'end': {\n          sendEnqueuedMessages()\n\n          function addErrors(\n            errorsMap: Map<string, CompilationError>,\n            issues: EntryIssuesMap\n          ) {\n            for (const issueMap of issues.values()) {\n              for (const [key, issue] of issueMap) {\n                if (issue.severity === 'warning') continue\n                if (errorsMap.has(key)) continue\n\n                const message = formatIssue(issue)\n\n                errorsMap.set(key, {\n                  message,\n                  details: issue.detail\n                    ? renderStyledStringToErrorAnsi(issue.detail)\n                    : undefined,\n                })\n              }\n            }\n          }\n\n          const errors = new Map<string, CompilationError>()\n          addErrors(errors, currentEntryIssues)\n\n          for (const client of clients) {\n            const state = clientStates.get(client)\n            if (!state) {\n              continue\n            }\n\n            const clientErrors = new Map(errors)\n            addErrors(clientErrors, state.clientIssues)\n\n            sendToClient(client, {\n              action: HMR_ACTIONS_SENT_TO_BROWSER.BUILT,\n              hash: String(++hmrHash),\n              errors: [...clientErrors.values()],\n              warnings: [],\n            })\n          }\n\n          if (hmrEventHappened) {\n            const time = updateMessage.value.duration\n            const timeMessage =\n              time > 2000 ? `${Math.round(time / 100) / 10}s` : `${time}ms`\n            Log.event(`Compiled in ${timeMessage}`)\n            hmrEventHappened = false\n          }\n          break\n        }\n        default:\n      }\n    }\n  }\n\n  handleProjectUpdates().catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n\n  return hotReloader\n}\n"],"names":["mkdir","writeFile","join","extname","ws","store","consoleStore","HMR_ACTIONS_SENT_TO_BROWSER","createDefineEnv","Log","getVersionInfo","matchNextPageBundleRequest","BLOCKED_PAGES","getOverlayMiddleware","PageNotFoundError","debounce","deleteAppClientCache","deleteCache","clearAllModuleContexts","clearModuleContext","denormalizePagePath","trace","AssetMapper","formatIssue","getTurbopackJsConfig","handleEntrypoints","handlePagesErrorRoute","handleRouteType","hasEntrypointForKey","msToNs","processIssues","renderStyledStringToErrorAnsi","processTopLevelIssues","isWellKnownError","printNonFatalIssue","normalizedPageToTurbopackStructureRoute","propagateServerField","TurbopackManifestLoader","findPagePathData","getEntryKey","splitEntryKey","FAST_REFRESH_RUNTIME_RELOAD","generateEncryptionKeyBase64","isAppPageRouteDefinition","normalizeAppPath","getNodeDebugType","wsServer","Server","noServer","isTestMode","process","env","NEXT_TEST_MODE","__NEXT_TEST_MODE","DEBUG","sessionId","Math","floor","Number","MAX_SAFE_INTEGER","random","createHotReloaderTurbopack","opts","serverFields","distDir","resetFetch","dev","buildId","nextConfig","dir","loadBindings","require","bindings","TURBOPACK","log","testMode","hasRewrites","fsChecker","rewrites","afterFiles","length","beforeFiles","fallback","hotReloaderSpan","undefined","version","__NEXT_VERSION","stop","encryptionKey","clientRouterFilters","experimental","clientRouterFilter","supportedBrowsers","project","turbo","createProject","projectPath","rootPath","root","outputFileTracingRoot","jsConfig","watch","defineEnv","isTurbopack","config","fetchCacheKeyPrefix","middlewareMatchers","previewProps","prerenderManifest","preview","browserslistQuery","memoryLimit","onCleanup","onExit","entrypointsSubscription","entrypointsSubscribe","currentWrittenEntrypoints","Map","currentEntrypoints","global","app","document","error","middleware","instrumentation","page","currentTopLevelIssues","currentEntryIssues","manifestLoader","changeSubscriptions","serverPathState","readyIds","Set","currentEntriesHandlingResolve","currentEntriesHandling","Promise","resolve","assetMapper","clearRequireCache","key","writtenEndpoint","force","path","contentHash","serverPaths","set","hasChange","endsWith","localKey","localHash","get","globalHash","hasAppPaths","some","p","startsWith","map","file","buildingIds","startBuilding","id","requestUrl","forceRebuild","has","size","setState","loading","trigger","url","add","finishBuilding","delete","hmrEventHappened","hmrHash","clients","clientStates","WeakMap","sendToClient","client","payload","send","JSON","stringify","sendEnqueuedMessages","issueMap","values","filter","i","severity","state","clientIssues","hmrPayloads","clear","turbopackUpdates","action","TURBOPACK_MESSAGE","data","sendEnqueuedMessagesDebounce","sendHmr","sendTurbopackMessage","diagnostics","issues","push","subscribeToChanges","includeIssues","endpoint","makePayload","side","changedPromise","changed","change","unsubscribeFromChanges","subscription","return","subscribeToHmrEvents","subscriptions","hmrEvents","next","type","e","reloadAction","RELOAD_PAGE","close","unsubscribeFromHmrEvents","handleEntrypointsSubscription","entrypoints","devRewrites","productionRewrites","logErrors","hooks","handleWrittenEndpoint","result","bind","recursive","overlayMiddleware","versionInfoPromise","telemetry","isEnabled","devtoolsFrontendUrl","nodeDebugType","debugPort","debugInfo","debugInfoList","fetch","then","res","json","hotReloader","turbopackProject","activeWebpackConfigs","serverStats","edgeServerStats","run","req","_parsedUrl","params","decodedPagePath","param","decodeURIComponent","denormalizedPagePath","ensurePage","clientOnly","definition","catch","console","finished","onHMR","socket","head","onUpgrade","handleUpgrade","on","addEventListener","parsedData","parse","toString","event","manualTraceChild","spanName","startTime","endTime","attributes","updatedModules","isPageHidden","hadRuntimeError","dependencyChain","warn","Array","isArray","cleanedModulePath","replace","Error","turbopackConnected","TURBOPACK_CONNECTED","errors","entryIssues","issue","message","versionInfo","sync","SYNC","warnings","hash","debug","setHmrServerError","_error","clearHmrServerError","start","getCompilationErrors","appEntryKey","pagesEntryKey","topLevelIssues","thisEntryIssues","formattedIssue","invalidate","reloadAfterInvalidation","entrypoint","SERVER_COMPONENT_CHANGES","buildFallbackError","inputPage","appPaths","isApp","includes","routeDef","pageExtensions","pagesDir","appDir","normalizedPage","matchingAppPaths","pathname","setPathsForKey","clientPaths","isInsideAppDir","bundlePath","normalizedAppPage","filename","route","err","exit","writeManifests","handleProjectUpdates","updateMessage","updateInfoSubscribe","updateType","BUILDING","addErrors","errorsMap","details","detail","clientErrors","BUILT","String","time","value","duration","timeMessage","round"],"mappings":"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"}