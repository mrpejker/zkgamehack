{"version":3,"sources":["../../../src/server/app-render/app-render.tsx"],"sourcesContent":["import type {\n  ActionResult,\n  DynamicParamTypesShort,\n  FlightRouterState,\n  FlightSegmentPath,\n  RenderOpts,\n  Segment,\n  CacheNodeSeedData,\n  PreloadCallbacks,\n  RSCPayload,\n  FlightData,\n  InitialRSCPayload,\n} from './types'\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\nimport type { RequestStore } from '../../client/components/request-async-storage.external'\nimport type { NextParsedUrlQuery } from '../request-meta'\nimport type { LoaderTree } from '../lib/app-dir-module'\nimport type { AppPageModule } from '../route-modules/app-page/module'\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin'\nimport type { Revalidate } from '../lib/revalidate'\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly'\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http'\nimport type { IncomingHttpHeaders } from 'http'\n\nimport React, { type ErrorInfo, type JSX } from 'react'\n\nimport RenderResult, {\n  type AppPageRenderResultMetadata,\n  type RenderResultOptions,\n} from '../render-result'\nimport {\n  chainStreams,\n  renderToInitialFizzStream,\n  createDocumentClosingStream,\n  continueFizzStream,\n  continueDynamicPrerender,\n  continueStaticPrerender,\n  continueDynamicHTMLResume,\n  streamToBuffer,\n  streamToString,\n} from '../stream-utils/node-web-streams-helper'\nimport { stripInternalQueries } from '../internal-utils'\nimport {\n  NEXT_HMR_REFRESH_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_URL,\n  RSC_HEADER,\n} from '../../client/components/app-router-headers'\nimport {\n  createMetadataComponents,\n  createTrackedMetadataContext,\n  createMetadataContext,\n} from '../../lib/metadata/metadata'\nimport { withRequestStore } from '../async-storage/with-request-store'\nimport { withStaticGenerationStore } from '../async-storage/with-static-generation-store'\nimport { isNotFoundError } from '../../client/components/not-found'\nimport {\n  getURLFromRedirectError,\n  isRedirectError,\n  getRedirectStatusCodeFromError,\n} from '../../client/components/redirect'\nimport { addImplicitTags } from '../lib/patch-fetch'\nimport { AppRenderSpan, NextNodeServerSpan } from '../lib/trace/constants'\nimport { getTracer } from '../lib/trace/tracer'\nimport { FlightRenderResult } from './flight-render-result'\nimport {\n  createFlightReactServerErrorHandler,\n  createHTMLReactServerErrorHandler,\n  createHTMLErrorHandler,\n  type DigestedError,\n  isUserLandError,\n} from './create-error-handler'\nimport {\n  getShortDynamicParamType,\n  dynamicParamTypes,\n} from './get-short-dynamic-param-type'\nimport { getSegmentParam } from './get-segment-param'\nimport { getScriptNonceFromHeader } from './get-script-nonce-from-header'\nimport { parseAndValidateFlightRouterState } from './parse-and-validate-flight-router-state'\nimport { createFlightRouterStateFromLoaderTree } from './create-flight-router-state-from-loader-tree'\nimport { handleAction } from './action-handler'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { warn, error } from '../../build/output/log'\nimport { appendMutableCookies } from '../web/spec-extension/adapters/request-cookies'\nimport { createServerInsertedHTML } from './server-inserted-html'\nimport { getRequiredScripts } from './required-scripts'\nimport { addPathPrefix } from '../../shared/lib/router/utils/add-path-prefix'\nimport {\n  getTracedMetadata,\n  makeGetServerInsertedHTML,\n} from './make-get-server-inserted-html'\nimport { walkTreeWithFlightRouterState } from './walk-tree-with-flight-router-state'\nimport { createComponentTree } from './create-component-tree'\nimport { getAssetQueryString } from './get-asset-query-string'\nimport { setReferenceManifestsSingleton } from './encryption-utils'\nimport {\n  DynamicState,\n  type PostponedState,\n  parsePostponedState,\n} from './postponed-state'\nimport {\n  getDynamicDataPostponedState,\n  getDynamicHTMLPostponedState,\n  getPostponedFromState,\n} from './postponed-state'\nimport { isDynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  useFlightStream,\n  createInlinedDataReadableStream,\n} from './use-flight-response'\nimport {\n  StaticGenBailoutError,\n  isStaticGenBailoutError,\n} from '../../client/components/static-generation-bailout'\nimport { getStackWithoutErrorMessage } from '../../lib/format-server-error'\nimport {\n  accessedDynamicData,\n  createPostponedAbortSignal,\n  formatDynamicAPIAccesses,\n  isPrerenderInterruptedError,\n  isRenderInterruptedReason,\n  createDynamicTrackingState,\n  getFirstDynamicReason,\n  type DynamicTrackingState,\n} from './dynamic-rendering'\nimport {\n  getClientComponentLoaderMetrics,\n  wrapClientComponentLoader,\n} from '../client-component-renderer-logger'\nimport { createServerModuleMap } from './action-utils'\nimport { isNodeNextRequest } from '../base-http/helpers'\nimport { parseParameter } from '../../shared/lib/router/utils/route-regex'\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url'\nimport AppRouter from '../../client/components/app-router'\nimport type { ServerComponentsHmrCache } from '../response-cache'\nimport type { RequestErrorContext } from '../instrumentation/types'\nimport { getServerActionRequestMetadata } from '../lib/server-action-request-meta'\nimport { createInitialRouterState } from '../../client/components/router-reducer/create-initial-router-state'\nimport { createMutableActionQueue } from '../../shared/lib/router/action-queue'\nimport { getRevalidateReason } from '../instrumentation/utils'\nimport { PAGE_SEGMENT_KEY } from '../../shared/lib/segment'\nimport type { FallbackRouteParams } from '../../client/components/fallback-params'\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport {\n  type ReactServerPrerenderResolveToType,\n  type ReactServerPrerenderResult,\n  ReactServerResult,\n  createReactServerPrerenderResult,\n  createReactServerPrerenderResultFromRender,\n  prerenderAndAbortInSequentialTasks,\n} from '../app-render/app-render-prerender-utils'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport {\n  prerenderAsyncStorage,\n  type PrerenderStore,\n} from './prerender-async-storage.external'\nimport { CacheSignal } from './cache-signal'\n\nexport type GetDynamicParamFromSegment = (\n  // [slug] / [[slug]] / [...slug]\n  segment: string\n) => {\n  param: string\n  value: string | string[] | null\n  treeSegment: Segment\n  type: DynamicParamTypesShort\n} | null\n\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult\n\nexport type AppRenderContext = {\n  staticGenerationStore: StaticGenerationStore\n  requestStore: RequestStore\n  componentMod: AppPageModule\n  renderOpts: RenderOpts\n  parsedRequestHeaders: ParsedRequestHeaders\n  getDynamicParamFromSegment: GetDynamicParamFromSegment\n  query: NextParsedUrlQuery\n  isPrefetch: boolean\n  isAction: boolean\n  requestTimestamp: number\n  appUsingSizeAdjustment: boolean\n  flightRouterState?: FlightRouterState\n  requestId: string\n  defaultRevalidate: Revalidate\n  pagePath: string\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n  assetPrefix: string\n  isNotFoundPath: boolean\n  nonce: string | undefined\n  res: BaseNextResponse\n}\n\ninterface ParseRequestHeadersOptions {\n  readonly isRoutePPREnabled: boolean\n}\n\nconst flightDataPathHeadKey = 'h'\n\ninterface ParsedRequestHeaders {\n  /**\n   * Router state provided from the client-side router. Used to handle rendering\n   * from the common layout down. This value will be undefined if the request is\n   * not a client-side navigation request, or if the request is a prefetch\n   * request.\n   */\n  readonly flightRouterState: FlightRouterState | undefined\n  readonly isPrefetchRequest: boolean\n  readonly isHmrRefresh: boolean\n  readonly isRSCRequest: boolean\n  readonly nonce: string | undefined\n}\n\nfunction parseRequestHeaders(\n  headers: IncomingHttpHeaders,\n  options: ParseRequestHeadersOptions\n): ParsedRequestHeaders {\n  const isPrefetchRequest =\n    headers[NEXT_ROUTER_PREFETCH_HEADER.toLowerCase()] !== undefined\n\n  const isHmrRefresh =\n    headers[NEXT_HMR_REFRESH_HEADER.toLowerCase()] !== undefined\n\n  const isRSCRequest = headers[RSC_HEADER.toLowerCase()] !== undefined\n\n  const shouldProvideFlightRouterState =\n    isRSCRequest && (!isPrefetchRequest || !options.isRoutePPREnabled)\n\n  const flightRouterState = shouldProvideFlightRouterState\n    ? parseAndValidateFlightRouterState(\n        headers[NEXT_ROUTER_STATE_TREE_HEADER.toLowerCase()]\n      )\n    : undefined\n\n  const csp =\n    headers['content-security-policy'] ||\n    headers['content-security-policy-report-only']\n\n  const nonce =\n    typeof csp === 'string' ? getScriptNonceFromHeader(csp) : undefined\n\n  return {\n    flightRouterState,\n    isPrefetchRequest,\n    isHmrRefresh,\n    isRSCRequest,\n    nonce,\n  }\n}\n\nfunction createNotFoundLoaderTree(loaderTree: LoaderTree): LoaderTree {\n  // Align the segment with parallel-route-default in next-app-loader\n  const components = loaderTree[2]\n  return [\n    '',\n    {\n      children: [\n        PAGE_SEGMENT_KEY,\n        {},\n        {\n          page: components['not-found'],\n        },\n      ],\n    },\n    components,\n  ]\n}\n\nexport type CreateSegmentPath = (child: FlightSegmentPath) => FlightSegmentPath\n\n/**\n * Returns a function that parses the dynamic segment and return the associated value.\n */\nfunction makeGetDynamicParamFromSegment(\n  params: { [key: string]: any },\n  pagePath: string,\n  fallbackRouteParams: FallbackRouteParams | null\n): GetDynamicParamFromSegment {\n  return function getDynamicParamFromSegment(\n    // [slug] / [[slug]] / [...slug]\n    segment: string\n  ) {\n    const segmentParam = getSegmentParam(segment)\n    if (!segmentParam) {\n      return null\n    }\n\n    const key = segmentParam.param\n\n    let value = params[key]\n\n    if (fallbackRouteParams && fallbackRouteParams.has(segmentParam.param)) {\n      value = fallbackRouteParams.get(segmentParam.param)\n    } else if (Array.isArray(value)) {\n      value = value.map((i) => encodeURIComponent(i))\n    } else if (typeof value === 'string') {\n      value = encodeURIComponent(value)\n    }\n\n    if (!value) {\n      const isCatchall = segmentParam.type === 'catchall'\n      const isOptionalCatchall = segmentParam.type === 'optional-catchall'\n\n      if (isCatchall || isOptionalCatchall) {\n        const dynamicParamType = dynamicParamTypes[segmentParam.type]\n        // handle the case where an optional catchall does not have a value,\n        // e.g. `/dashboard/[[...slug]]` when requesting `/dashboard`\n        if (isOptionalCatchall) {\n          return {\n            param: key,\n            value: null,\n            type: dynamicParamType,\n            treeSegment: [key, '', dynamicParamType],\n          }\n        }\n\n        // handle the case where a catchall or optional catchall does not have a value,\n        // e.g. `/foo/bar/hello` and `@slot/[...catchall]` or `@slot/[[...catchall]]` is matched\n        value = pagePath\n          .split('/')\n          // remove the first empty string\n          .slice(1)\n          // replace any dynamic params with the actual values\n          .flatMap((pathSegment) => {\n            const param = parseParameter(pathSegment)\n            // if the segment matches a param, return the param value\n            // otherwise, it's a static segment, so just return that\n            return params[param.key] ?? param.key\n          })\n\n        return {\n          param: key,\n          value,\n          type: dynamicParamType,\n          // This value always has to be a string.\n          treeSegment: [key, value.join('/'), dynamicParamType],\n        }\n      }\n    }\n\n    const type = getShortDynamicParamType(segmentParam.type)\n\n    return {\n      param: key,\n      // The value that is passed to user code.\n      value: value,\n      // The value that is rendered in the router tree.\n      treeSegment: [key, Array.isArray(value) ? value.join('/') : value, type],\n      type: type,\n    }\n  }\n}\n\nfunction NonIndex({ ctx }: { ctx: AppRenderContext }) {\n  const is404Page = ctx.pagePath === '/404'\n  const isInvalidStatusCode =\n    typeof ctx.res.statusCode === 'number' && ctx.res.statusCode > 400\n\n  if (is404Page || isInvalidStatusCode) {\n    return <meta name=\"robots\" content=\"noindex\" />\n  }\n  return null\n}\n\n/**\n * This is used by server actions & client-side navigations to generate RSC data from a client-side request.\n * This function is only called on \"dynamic\" requests (ie, there wasn't already a static response).\n * It uses request headers (namely `Next-Router-State-Tree`) to determine where to start rendering.\n */\nasync function generateDynamicRSCPayload(\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n  }\n): Promise<RSCPayload> {\n  // Flight data that is going to be passed to the browser.\n  // Currently a single item array but in the future multiple patches might be combined in a single request.\n\n  // We initialize `flightData` to an empty string because the client router knows how to tolerate\n  // it (treating it as an MPA navigation). The only time this function wouldn't generate flight data\n  // is for server actions, if the server action handler instructs this function to skip it. When the server\n  // action reducer sees a falsy value, it'll simply resolve the action with no data.\n  let flightData: FlightData = ''\n\n  const {\n    componentMod: {\n      tree: loaderTree,\n      createDynamicallyTrackedSearchParams,\n      createDynamicallyTrackedParams,\n    },\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    requestStore: { url },\n    query,\n    requestId,\n    flightRouterState,\n    staticGenerationStore,\n  } = ctx\n\n  if (!options?.skipFlight) {\n    const preloadCallbacks: PreloadCallbacks = []\n\n    const [MetadataTree, getMetadataReady] = createMetadataComponents({\n      tree: loaderTree,\n      query,\n      metadataContext: createTrackedMetadataContext(\n        url.pathname,\n        ctx.renderOpts,\n        staticGenerationStore\n      ),\n      getDynamicParamFromSegment,\n      appUsingSizeAdjustment,\n      createDynamicallyTrackedSearchParams,\n      createDynamicallyTrackedParams,\n    })\n    flightData = (\n      await walkTreeWithFlightRouterState({\n        ctx,\n        createSegmentPath: (child) => child,\n        loaderTreeToFilter: loaderTree,\n        parentParams: {},\n        flightRouterState,\n        isFirst: true,\n        // For flight, render metadata inside leaf page\n        rscPayloadHead: (\n          <React.Fragment key={flightDataPathHeadKey}>\n            <NonIndex ctx={ctx} />\n            {/* Adding requestId as react key to make metadata remount for each render */}\n            <MetadataTree key={requestId} />\n          </React.Fragment>\n        ),\n        injectedCSS: new Set(),\n        injectedJS: new Set(),\n        injectedFontPreloadTags: new Set(),\n        rootLayoutIncluded: false,\n        getMetadataReady,\n        preloadCallbacks,\n      })\n    ).map((path) => path.slice(1)) // remove the '' (root) segment\n  }\n\n  // If we have an action result, then this is a server action response.\n  // We can rely on this because `ActionResult` will always be a promise, even if\n  // the result is falsey.\n  if (options?.actionResult) {\n    return {\n      a: options.actionResult,\n      f: flightData,\n      b: ctx.renderOpts.buildId,\n    }\n  }\n\n  // Otherwise, it's a regular RSC response.\n  return {\n    b: ctx.renderOpts.buildId,\n    f: flightData,\n  }\n}\n\nfunction createErrorContext(\n  ctx: AppRenderContext,\n  renderSource: RequestErrorContext['renderSource']\n): RequestErrorContext {\n  return {\n    routerKind: 'App Router',\n    routePath: ctx.pagePath,\n    routeType: ctx.isAction ? 'action' : 'render',\n    renderSource,\n    revalidateReason: getRevalidateReason(ctx.staticGenerationStore),\n  }\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\nasync function generateDynamicFlightRenderResult(\n  req: BaseNextRequest,\n  ctx: AppRenderContext,\n  options?: {\n    actionResult: ActionResult\n    skipFlight: boolean\n    componentTree?: CacheNodeSeedData\n    preloadCallbacks?: PreloadCallbacks\n  }\n): Promise<RenderResult> {\n  const renderOpts = ctx.renderOpts\n\n  function onFlightDataRenderError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components-payload')\n    )\n  }\n  const onError = createFlightReactServerErrorHandler(\n    !!renderOpts.dev,\n    onFlightDataRenderError\n  )\n\n  const rscPayload = await generateDynamicRSCPayload(ctx, options)\n\n  // For app dir, use the bundled version of Flight server renderer (renderToReadableStream)\n  // which contains the subset React.\n  const flightReadableStream = ctx.componentMod.renderToReadableStream(\n    rscPayload,\n    ctx.clientReferenceManifest.clientModules,\n    {\n      onError,\n      nonce: ctx.nonce,\n    }\n  )\n\n  return new FlightRenderResult(flightReadableStream, {\n    fetchMetrics: ctx.staticGenerationStore.fetchMetrics,\n  })\n}\n\n/**\n * Crawlers will inadvertently think the canonicalUrl in the RSC payload should be crawled\n * when our intention is to just seed the router state with the current URL.\n * This function splits up the pathname so that we can later join it on\n * when we're ready to consume the path.\n */\nfunction prepareInitialCanonicalUrl(url: RequestStore['url']) {\n  return (url.pathname + url.search).split('/')\n}\n\n// This is the data necessary to render <AppRouter /> when no SSR errors are encountered\nasync function getRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  is404: boolean\n): Promise<InitialRSCPayload & { P: React.ReactNode }> {\n  const injectedCSS = new Set<string>()\n  const injectedJS = new Set<string>()\n  const injectedFontPreloadTags = new Set<string>()\n  let missingSlots: Set<string> | undefined\n\n  // We only track missing parallel slots in development\n  if (process.env.NODE_ENV === 'development') {\n    missingSlots = new Set<string>()\n  }\n\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createDynamicallyTrackedSearchParams,\n      createDynamicallyTrackedParams,\n    },\n    requestStore: { url },\n    staticGenerationStore,\n  } = ctx\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  const [MetadataTree, getMetadataReady] = createMetadataComponents({\n    tree,\n    errorType: is404 ? 'not-found' : undefined,\n    query,\n    metadataContext: createTrackedMetadataContext(\n      url.pathname,\n      ctx.renderOpts,\n      staticGenerationStore\n    ),\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n    createDynamicallyTrackedParams,\n  })\n\n  const preloadCallbacks: PreloadCallbacks = []\n\n  const seedData = await createComponentTree({\n    ctx,\n    createSegmentPath: (child) => child,\n    loaderTree: tree,\n    parentParams: {},\n    firstItem: true,\n    injectedCSS,\n    injectedJS,\n    injectedFontPreloadTags,\n    rootLayoutIncluded: false,\n    getMetadataReady,\n    missingSlots,\n    preloadCallbacks,\n  })\n\n  // When the `vary` response header is present with `Next-URL`, that means there's a chance\n  // it could respond differently if there's an interception route. We provide this information\n  // to `AppRouter` so that it can properly seed the prefetch cache with a prefix, if needed.\n  const varyHeader = ctx.res.getHeader('vary')\n  const couldBeIntercepted =\n    typeof varyHeader === 'string' && varyHeader.includes(NEXT_URL)\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={ctx.requestId} />\n    </React.Fragment>\n  )\n\n  return {\n    // See the comment above the `Preloads` component (below) for why this is part of the payload\n    P: <Preloads preloadCallbacks={preloadCallbacks} />,\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    i: !!couldBeIntercepted,\n    f: [[initialTree, seedData, initialHead]],\n    m: missingSlots,\n    G: GlobalError,\n    s: typeof ctx.renderOpts.postponed === 'string',\n  }\n}\n\n/**\n * Preload calls (such as `ReactDOM.preloadStyle` and `ReactDOM.preloadFont`) need to be called during rendering\n * in order to create the appropriate preload tags in the DOM, otherwise they're a no-op. Since we invoke\n * renderToReadableStream with a function that returns component props rather than a component itself, we use\n * this component to \"render  \" the preload calls.\n */\nfunction Preloads({ preloadCallbacks }: { preloadCallbacks: Function[] }) {\n  preloadCallbacks.forEach((preloadFn) => preloadFn())\n  return null\n}\n\n// This is the data necessary to render <AppRouter /> when an error state is triggered\nasync function getErrorRSCPayload(\n  tree: LoaderTree,\n  ctx: AppRenderContext,\n  errorType: 'not-found' | 'redirect' | undefined\n) {\n  const {\n    getDynamicParamFromSegment,\n    query,\n    appUsingSizeAdjustment,\n    componentMod: {\n      GlobalError,\n      createDynamicallyTrackedSearchParams,\n      createDynamicallyTrackedParams,\n    },\n    requestStore: { url },\n    requestId,\n  } = ctx\n\n  const [MetadataTree] = createMetadataComponents({\n    tree,\n    // We create an untracked metadata context here because we can't postpone\n    // again during the error render.\n    metadataContext: createMetadataContext(url.pathname, ctx.renderOpts),\n    errorType,\n    query,\n    getDynamicParamFromSegment,\n    appUsingSizeAdjustment,\n    createDynamicallyTrackedSearchParams,\n    createDynamicallyTrackedParams,\n  })\n\n  const initialHead = (\n    <React.Fragment key={flightDataPathHeadKey}>\n      <NonIndex ctx={ctx} />\n      {/* Adding requestId as react key to make metadata remount for each render */}\n      <MetadataTree key={requestId} />\n      {process.env.NODE_ENV === 'development' && (\n        <meta name=\"next-error\" content=\"not-found\" />\n      )}\n    </React.Fragment>\n  )\n\n  const initialTree = createFlightRouterStateFromLoaderTree(\n    tree,\n    getDynamicParamFromSegment,\n    query\n  )\n\n  // For metadata notFound error there's no global not found boundary on top\n  // so we create a not found page with AppRouter\n  const initialSeedData: CacheNodeSeedData = [\n    initialTree[0],\n    <html id=\"__next_error__\">\n      <head></head>\n      <body></body>\n    </html>,\n    {},\n    null,\n  ]\n\n  return {\n    b: ctx.renderOpts.buildId,\n    p: ctx.assetPrefix,\n    c: prepareInitialCanonicalUrl(url),\n    m: undefined,\n    i: false,\n    f: [[initialTree, initialSeedData, initialHead]],\n    G: GlobalError,\n    s: typeof ctx.renderOpts.postponed === 'string',\n  } satisfies InitialRSCPayload\n}\n\n// This component must run in an SSR context. It will render the RSC root component\nfunction App<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n  ServerInsertedHTMLProvider,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  ServerInsertedHTMLProvider: React.ComponentType<{ children: JSX.Element }>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  const { HeadManagerContext } =\n    require('../../shared/lib/head-manager-context.shared-runtime') as typeof import('../../shared/lib/head-manager-context.shared-runtime')\n\n  return (\n    <HeadManagerContext.Provider\n      value={{\n        appDir: true,\n        nonce,\n      }}\n    >\n      <ServerInsertedHTMLProvider>\n        <AppRouter\n          actionQueue={actionQueue}\n          globalErrorComponent={response.G}\n          assetPrefix={response.p}\n        />\n      </ServerInsertedHTMLProvider>\n    </HeadManagerContext.Provider>\n  )\n}\n\n// @TODO our error stream should be probably just use the same root component. But it was previously\n// different I don't want to figure out if that is meaningful at this time so just keeping the behavior\n// consistent for now.\nfunction AppWithoutContext<T>({\n  reactServerStream,\n  preinitScripts,\n  clientReferenceManifest,\n  nonce,\n}: {\n  reactServerStream: BinaryStreamOf<T>\n  preinitScripts: () => void\n  clientReferenceManifest: NonNullable<RenderOpts['clientReferenceManifest']>\n  nonce?: string\n}): JSX.Element {\n  preinitScripts()\n  const response = React.use(\n    useFlightStream<InitialRSCPayload>(\n      reactServerStream,\n      clientReferenceManifest,\n      nonce\n    )\n  )\n\n  const initialState = createInitialRouterState({\n    buildId: response.b,\n    initialFlightData: response.f,\n    initialCanonicalUrlParts: response.c,\n    // location and initialParallelRoutes are not initialized in the SSR render\n    // they are set to an empty map and window.location, respectively during hydration\n    initialParallelRoutes: null!,\n    location: null,\n    couldBeIntercepted: response.i,\n    postponed: response.s,\n  })\n\n  const actionQueue = createMutableActionQueue(initialState)\n\n  return (\n    <AppRouter\n      actionQueue={actionQueue}\n      globalErrorComponent={response.G}\n      assetPrefix={response.p}\n    />\n  )\n}\n\n// We use a trick with TS Generics to branch streams with a type so we can\n// consume the parsed value of a Readable Stream if it was constructed with a\n// certain object shape. The generic type is not used directly in the type so it\n// requires a disabling of the eslint rule disallowing unused vars\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>\n\nasync function renderToHTMLOrFlightImpl(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  renderOpts: RenderOpts,\n  requestStore: RequestStore,\n  staticGenerationStore: StaticGenerationStore,\n  parsedRequestHeaders: ParsedRequestHeaders,\n  requestEndedState: { ended?: boolean },\n  postponedState: PostponedState | null\n) {\n  const isNotFoundPath = pagePath === '/404'\n  if (isNotFoundPath) {\n    res.statusCode = 404\n  }\n\n  // A unique request timestamp used by development to ensure that it's\n  // consistent and won't change during this request. This is important to\n  // avoid that resources can be deduped by React Float if the same resource is\n  // rendered or preloaded multiple times: `<link href=\"a.css?v={Date.now()}\"/>`.\n  const requestTimestamp = Date.now()\n\n  const {\n    serverActionsManifest,\n    ComponentMod,\n    nextFontManifest,\n    serverActions,\n    assetPrefix = '',\n    enableTainting,\n  } = renderOpts\n\n  // We need to expose the bundled `require` API globally for\n  // react-server-dom-webpack. This is a hack until we find a better way.\n  if (ComponentMod.__next_app__) {\n    const instrumented = wrapClientComponentLoader(ComponentMod)\n    // @ts-ignore\n    globalThis.__next_require__ = instrumented.require\n    // When we are prerendering if there is a cacheSignal for tracking\n    // cache reads we wrap the loadChunk in this tracking. This allows us\n    // to treat chunk loading with similar semantics as cache reads to avoid\n    // async loading chunks from causing a prerender to abort too early.\n    // @ts-ignore\n    globalThis.__next_chunk_load__ = (...args: Array<any>) => {\n      const loadingChunk = instrumented.loadChunk(...args)\n      trackChunkLoading(loadingChunk)\n      return loadingChunk\n    }\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    // reset isr status at start of request\n    const { pathname } = new URL(req.url || '/', 'http://n')\n    renderOpts.setAppIsrStatus?.(pathname, null)\n  }\n\n  if (\n    // The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' &&\n    isNodeNextRequest(req)\n  ) {\n    req.originalRequest.on('end', () => {\n      const staticGenStore =\n        ComponentMod.staticGenerationAsyncStorage.getStore()\n      const prerenderStore = prerenderAsyncStorage.getStore()\n      const isPPR = !!prerenderStore?.dynamicTracking?.dynamicAccesses?.length\n\n      if (\n        process.env.NODE_ENV === 'development' &&\n        staticGenStore &&\n        renderOpts.setAppIsrStatus &&\n        !isPPR\n      ) {\n        // only node can be ISR so we only need to update the status here\n        const { pathname } = new URL(req.url || '/', 'http://n')\n        let { revalidate } = staticGenStore\n        if (typeof revalidate === 'undefined') {\n          revalidate = false\n        }\n        if (revalidate === false || revalidate > 0) {\n          renderOpts.setAppIsrStatus(pathname, revalidate)\n        }\n      }\n\n      requestEndedState.ended = true\n\n      if ('performance' in globalThis) {\n        const metrics = getClientComponentLoaderMetrics({ reset: true })\n        if (metrics) {\n          getTracer()\n            .startSpan(NextNodeServerSpan.clientComponentLoading, {\n              startTime: metrics.clientComponentLoadStart,\n              attributes: {\n                'next.clientComponentLoadCount':\n                  metrics.clientComponentLoadCount,\n                'next.span_type': NextNodeServerSpan.clientComponentLoading,\n              },\n            })\n            .end(\n              metrics.clientComponentLoadStart +\n                metrics.clientComponentLoadTimes\n            )\n        }\n      }\n    })\n  }\n\n  const metadata: AppPageRenderResultMetadata = {}\n\n  const appUsingSizeAdjustment = !!nextFontManifest?.appUsingSizeAdjust\n\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const serverModuleMap = createServerModuleMap({\n    serverActionsManifest,\n    pageName: renderOpts.page,\n  })\n\n  setReferenceManifestsSingleton({\n    clientReferenceManifest,\n    serverActionsManifest,\n    serverModuleMap,\n  })\n\n  ComponentMod.patchFetch()\n\n  // Pull out the hooks/references from the component.\n  const { tree: loaderTree, taintObjectReference } = ComponentMod\n\n  if (enableTainting) {\n    taintObjectReference(\n      'Do not pass process.env to client components since it will leak sensitive data',\n      process.env\n    )\n  }\n\n  staticGenerationStore.fetchMetrics = []\n  metadata.fetchMetrics = staticGenerationStore.fetchMetrics\n\n  // don't modify original query object\n  query = { ...query }\n  stripInternalQueries(query)\n\n  const { flightRouterState, isPrefetchRequest, isRSCRequest, nonce } =\n    parsedRequestHeaders\n\n  /**\n   * The metadata items array created in next-app-loader with all relevant information\n   * that we need to resolve the final metadata.\n   */\n  let requestId: string\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    requestId = crypto.randomUUID()\n  } else {\n    requestId = require('next/dist/compiled/nanoid').nanoid()\n  }\n\n  /**\n   * Dynamic parameters. E.g. when you visit `/dashboard/vercel` which is rendered by `/dashboard/[slug]` the value will be {\"slug\": \"vercel\"}.\n   */\n  const params = renderOpts.params ?? {}\n\n  const { isStaticGeneration, fallbackRouteParams } = staticGenerationStore\n\n  const getDynamicParamFromSegment = makeGetDynamicParamFromSegment(\n    params,\n    pagePath,\n    fallbackRouteParams\n  )\n\n  const isActionRequest = getServerActionRequestMetadata(req).isServerAction\n\n  const ctx: AppRenderContext = {\n    componentMod: ComponentMod,\n    renderOpts,\n    requestStore,\n    staticGenerationStore,\n    parsedRequestHeaders,\n    getDynamicParamFromSegment,\n    query,\n    isPrefetch: isPrefetchRequest,\n    isAction: isActionRequest,\n    requestTimestamp,\n    appUsingSizeAdjustment,\n    flightRouterState,\n    requestId,\n    defaultRevalidate: false,\n    pagePath,\n    clientReferenceManifest,\n    assetPrefix,\n    isNotFoundPath,\n    nonce,\n    res,\n  }\n\n  getTracer().getRootSpanAttributes()?.set('next.route', pagePath)\n\n  if (isStaticGeneration) {\n    // We're either building or revalidating. In either case we need to\n    // prerender our page rather than render it.\n    const prerenderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `prerender route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      prerenderToStream\n    )\n\n    let response = await prerenderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      metadata,\n      staticGenerationStore,\n      loaderTree\n    )\n\n    // If we're debugging partial prerendering, print all the dynamic API accesses\n    // that occurred during the render.\n    // @TODO move into renderToStream function\n    if (\n      response.dynamicTracking &&\n      accessedDynamicData(response.dynamicTracking) &&\n      response.dynamicTracking.isDebugDynamicAccesses\n    ) {\n      warn('The following dynamic usage was detected:')\n      for (const access of formatDynamicAPIAccesses(response.dynamicTracking)) {\n        warn(access)\n      }\n    }\n\n    // If we encountered any unexpected errors during build we fail the\n    // prerendering phase and the build.\n    if (response.digestErrorsMap.size) {\n      const buildFailingError = response.digestErrorsMap.values().next().value\n      if (buildFailingError) throw buildFailingError\n    }\n    // Pick first userland SSR error, which is also not a RSC error.\n    if (response.ssrErrors.length) {\n      const buildFailingError = response.ssrErrors.find((err) =>\n        isUserLandError(err)\n      )\n      if (buildFailingError) throw buildFailingError\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n    // If we have pending revalidates, wait until they are all resolved.\n    if (staticGenerationStore.pendingRevalidates) {\n      options.waitUntil = Promise.all([\n        staticGenerationStore.incrementalCache?.revalidateTag(\n          staticGenerationStore.revalidatedTags || []\n        ),\n        ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n      ])\n    }\n\n    addImplicitTags(staticGenerationStore, requestStore)\n\n    if (staticGenerationStore.tags) {\n      metadata.fetchTags = staticGenerationStore.tags.join(',')\n    }\n\n    // If force static is specifically set to false, we should not revalidate\n    // the page.\n    if (staticGenerationStore.forceStatic === false) {\n      staticGenerationStore.revalidate = 0\n    }\n\n    // Copy the revalidation value onto the render result metadata.\n    metadata.revalidate =\n      staticGenerationStore.revalidate ?? ctx.defaultRevalidate\n\n    // provide bailout info for debugging\n    if (metadata.revalidate === 0) {\n      metadata.staticBailoutInfo = {\n        description: staticGenerationStore.dynamicUsageDescription,\n        stack: staticGenerationStore.dynamicUsageStack,\n      }\n    }\n\n    return new RenderResult(await streamToString(response.stream), options)\n  } else {\n    // We're rendering dynamically\n    if (isRSCRequest) {\n      return generateDynamicFlightRenderResult(req, ctx)\n    }\n\n    const renderToStreamWithTracing = getTracer().wrap(\n      AppRenderSpan.getBodyResult,\n      {\n        spanName: `render route (app) ${pagePath}`,\n        attributes: {\n          'next.route': pagePath,\n        },\n      },\n      renderToStream\n    )\n\n    let formState: null | any = null\n    if (isActionRequest) {\n      // For action requests, we handle them differently with a special render result.\n      const actionRequestResult = await handleAction({\n        req,\n        res,\n        ComponentMod,\n        serverModuleMap,\n        generateFlight: generateDynamicFlightRenderResult,\n        staticGenerationStore,\n        requestStore,\n        serverActions,\n        ctx,\n      })\n\n      if (actionRequestResult) {\n        if (actionRequestResult.type === 'not-found') {\n          const notFoundLoaderTree = createNotFoundLoaderTree(loaderTree)\n          res.statusCode = 404\n          const stream = await renderToStreamWithTracing(\n            req,\n            res,\n            ctx,\n            notFoundLoaderTree,\n            formState,\n            postponedState\n          )\n\n          return new RenderResult(stream, { metadata })\n        } else if (actionRequestResult.type === 'done') {\n          if (actionRequestResult.result) {\n            actionRequestResult.result.assignMetadata(metadata)\n            return actionRequestResult.result\n          } else if (actionRequestResult.formState) {\n            formState = actionRequestResult.formState\n          }\n        }\n      }\n    }\n\n    const options: RenderResultOptions = {\n      metadata,\n    }\n\n    const stream = await renderToStreamWithTracing(\n      req,\n      res,\n      ctx,\n      loaderTree,\n      formState,\n      postponedState\n    )\n\n    // If we have pending revalidates, wait until they are all resolved.\n    if (staticGenerationStore.pendingRevalidates) {\n      options.waitUntil = Promise.all([\n        staticGenerationStore.incrementalCache?.revalidateTag(\n          staticGenerationStore.revalidatedTags || []\n        ),\n        ...Object.values(staticGenerationStore.pendingRevalidates || {}),\n      ])\n    }\n\n    addImplicitTags(staticGenerationStore, requestStore)\n\n    if (staticGenerationStore.tags) {\n      metadata.fetchTags = staticGenerationStore.tags.join(',')\n    }\n\n    // Create the new render result for the response.\n    return new RenderResult(stream, options)\n  }\n}\n\nexport type AppPageRender = (\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  pagePath: string,\n  query: NextParsedUrlQuery,\n  fallbackRouteParams: FallbackRouteParams | null,\n  renderOpts: RenderOpts,\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n) => Promise<RenderResult<AppPageRenderResultMetadata>>\n\nexport const renderToHTMLOrFlight: AppPageRender = (\n  req,\n  res,\n  pagePath,\n  query,\n  fallbackRouteParams,\n  renderOpts,\n  serverComponentsHmrCache\n) => {\n  if (!req.url) {\n    throw new Error('Invalid URL')\n  }\n\n  const url = parseRelativeUrl(req.url, undefined, false)\n\n  // We read these values from the request object as, in certain cases,\n  // base-server will strip them to opt into different rendering behavior.\n  const parsedRequestHeaders = parseRequestHeaders(req.headers, {\n    isRoutePPREnabled: renderOpts.experimental.isRoutePPREnabled === true,\n  })\n\n  const { isHmrRefresh } = parsedRequestHeaders\n\n  const requestEndedState = { ended: false }\n  let postponedState: PostponedState | null = null\n\n  // If provided, the postpone state should be parsed so it can be provided to\n  // React.\n  if (typeof renderOpts.postponed === 'string') {\n    if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n      throw new Error(\n        'Invariant: postponed state should not be provided when fallback params are provided'\n      )\n    }\n\n    postponedState = parsePostponedState(\n      renderOpts.postponed,\n      renderOpts.params\n    )\n  }\n\n  return withRequestStore(\n    renderOpts.ComponentMod.requestAsyncStorage,\n    {\n      req,\n      url,\n      res,\n      renderOpts,\n      isHmrRefresh,\n      serverComponentsHmrCache,\n    },\n    (requestStore) =>\n      withStaticGenerationStore(\n        renderOpts.ComponentMod.staticGenerationAsyncStorage,\n        {\n          page: renderOpts.routeModule.definition.page,\n          fallbackRouteParams,\n          renderOpts,\n          requestEndedState,\n        },\n        (staticGenerationStore) =>\n          renderToHTMLOrFlightImpl(\n            req,\n            res,\n            pagePath,\n            query,\n            renderOpts,\n            requestStore,\n            staticGenerationStore,\n            parsedRequestHeaders,\n            requestEndedState,\n            postponedState\n          )\n      )\n  )\n}\n\nasync function renderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  tree: LoaderTree,\n  formState: any,\n  postponedState: PostponedState | null\n): Promise<ReadableStream<Uint8Array>> {\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  const silenceLogger = false\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let reactServerResult: null | ReactServerResult = null\n\n  const setHeader = res.setHeader.bind(res)\n\n  try {\n    // This is a dynamic render. We don't do dynamic tracking because we're not prerendering\n    const RSCPayload = await getRSCPayload(tree, ctx, res.statusCode === 404)\n    reactServerResult = new ReactServerResult(\n      ComponentMod.renderToReadableStream(\n        RSCPayload,\n        clientReferenceManifest.clientModules,\n        {\n          onError: serverComponentsErrorHandler,\n          nonce: ctx.nonce,\n        }\n      )\n    )\n\n    // React doesn't start rendering synchronously but we want the RSC render to have a chance to start\n    // before we begin SSR rendering because we want to capture any available preload headers so we tick\n    // one task before continuing\n    await waitAtLeastOneReactRenderTask()\n\n    // If provided, the postpone state should be parsed as JSON so it can be\n    // provided to React.\n    if (typeof renderOpts.postponed === 'string') {\n      if (postponedState?.type === DynamicState.DATA) {\n        // We have a complete HTML Document in the prerender but we need to\n        // still include the new server component render because it was not included\n        // in the static prelude.\n        const inlinedReactServerDataStream = createInlinedDataReadableStream(\n          reactServerResult.tee(),\n          ctx.nonce,\n          formState\n        )\n\n        return chainStreams(\n          inlinedReactServerDataStream,\n          createDocumentClosingStream()\n        )\n      } else if (postponedState) {\n        // We assume we have dynamic HTML requiring a resume render to complete\n        const postponed = getPostponedFromState(postponedState)\n\n        const resume = require('react-dom/server.edge')\n          .resume as (typeof import('react-dom/server.edge'))['resume']\n\n        const htmlStream = await resume(\n          <App\n            reactServerStream={reactServerResult.tee()}\n            preinitScripts={preinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n            nonce={ctx.nonce}\n          />,\n          postponed,\n          {\n            onError: htmlRendererErrorHandler,\n            nonce: ctx.nonce,\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        return await continueDynamicHTMLResume(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consume(),\n            ctx.nonce,\n            formState\n          ),\n          getServerInsertedHTML,\n        })\n      }\n    }\n\n    // This is a regular dynamic render\n    const renderToReadableStream = require('react-dom/server.edge')\n      .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n    const htmlStream = await renderToReadableStream(\n      <App\n        reactServerStream={reactServerResult.tee()}\n        preinitScripts={preinitScripts}\n        clientReferenceManifest={clientReferenceManifest}\n        ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n        nonce={ctx.nonce}\n      />,\n      {\n        onError: htmlRendererErrorHandler,\n        nonce: ctx.nonce,\n        onHeaders: (headers: Headers) => {\n          headers.forEach((value, key) => {\n            setHeader(key, value)\n          })\n        },\n        maxHeadersLength: renderOpts.reactMaxHeadersLength,\n        // When debugging the static shell, client-side rendering should be\n        // disabled to prevent blanking out the page.\n        bootstrapScripts: renderOpts.isDebugStaticShell\n          ? []\n          : [bootstrapScript],\n        formState,\n      }\n    )\n\n    const getServerInsertedHTML = makeGetServerInsertedHTML({\n      polyfills,\n      renderServerInsertedHTML,\n      serverCapturedErrors: allCapturedErrors,\n      basePath: renderOpts.basePath,\n      tracingMetadata: tracingMetadata,\n    })\n    /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */\n    const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n    const validateRootLayout = renderOpts.dev\n    return await continueFizzStream(htmlStream, {\n      inlinedDataStream: createInlinedDataReadableStream(\n        reactServerResult.consume(),\n        ctx.nonce,\n        formState\n      ),\n      isStaticGeneration: generateStaticHTML,\n      getServerInsertedHTML,\n      serverInsertedHTMLToHead: true,\n      validateRootLayout,\n    })\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    if (isNotFoundError(err)) {\n      res.statusCode = 404\n    }\n    let hasRedirectError = false\n    if (isRedirectError(err)) {\n      hasRedirectError = true\n      res.statusCode = getRedirectStatusCodeFromError(err)\n      if (err.mutableCookies) {\n        const headers = new Headers()\n\n        // If there were mutable cookies set, we need to set them on the\n        // response.\n        if (appendMutableCookies(headers, err.mutableCookies)) {\n          setHeader('set-cookie', Array.from(headers.values()))\n        }\n      }\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n      setHeader('Location', redirectUrl)\n    }\n\n    const is404 = res.statusCode === 404\n    if (!is404 && !hasRedirectError && !shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    const errorType = is404\n      ? 'not-found'\n      : hasRedirectError\n        ? 'redirect'\n        : undefined\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await getErrorRSCPayload(tree, ctx, errorType)\n\n    const errorServerStream = ComponentMod.renderToReadableStream(\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n        nonce: ctx.nonce,\n      }\n    )\n\n    if (reactServerResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      /**\n       * Rules of Static & Dynamic HTML:\n       *\n       *    1.) We must generate static HTML unless the caller explicitly opts\n       *        in to dynamic HTML support.\n       *\n       *    2.) If dynamic HTML support is requested, we must honor that request\n       *        or throw an error. It is the sole responsibility of the caller to\n       *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n       *\n       * These rules help ensure that other existing features like request caching,\n       * coalescing, and ISR continue working as intended.\n       */\n      const generateStaticHTML = renderOpts.supportsDynamicResponse !== true\n      const validateRootLayout = renderOpts.dev\n      return await continueFizzStream(fizzStream, {\n        inlinedDataStream: createInlinedDataReadableStream(\n          // This is intentionally using the readable datastream from the\n          // main render rather than the flight data from the error page\n          // render\n          reactServerResult.consume(),\n          ctx.nonce,\n          formState\n        ),\n        isStaticGeneration: generateStaticHTML,\n        getServerInsertedHTML: makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: [],\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        }),\n        serverInsertedHTMLToHead: true,\n        validateRootLayout,\n      })\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\ntype PrerenderToStreamResult = {\n  stream: ReadableStream<Uint8Array>\n  digestErrorsMap: Map<string, DigestedError>\n  ssrErrors: Array<unknown>\n  dynamicTracking?: null | DynamicTrackingState\n}\n\n/**\n * Determines whether we should generate static flight data.\n */\nfunction shouldGenerateStaticFlightData(\n  staticGenerationStore: StaticGenerationStore\n): boolean {\n  const { fallbackRouteParams, isStaticGeneration } = staticGenerationStore\n  if (!isStaticGeneration) return false\n\n  if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n    return false\n  }\n\n  return true\n}\n\nasync function prerenderToStream(\n  req: BaseNextRequest,\n  res: BaseNextResponse,\n  ctx: AppRenderContext,\n  metadata: AppPageRenderResultMetadata,\n  staticGenerationStore: StaticGenerationStore,\n  tree: LoaderTree\n): Promise<PrerenderToStreamResult> {\n  // When prerendering formState is always null. We still include it\n  // because some shared APIs expect a formState value and this is slightly\n  // more explicit than making it an optional function argument\n  const formState = null\n\n  const renderOpts = ctx.renderOpts\n  const ComponentMod = renderOpts.ComponentMod\n  // TODO: fix this typescript\n  const clientReferenceManifest = renderOpts.clientReferenceManifest!\n  const fallbackRouteParams = staticGenerationStore.fallbackRouteParams\n\n  const { ServerInsertedHTMLProvider, renderServerInsertedHTML } =\n    createServerInsertedHTML()\n\n  const tracingMetadata = getTracedMetadata(\n    getTracer().getTracePropagationData(),\n    renderOpts.experimental.clientTraceMetadata\n  )\n\n  const polyfills: JSX.IntrinsicElements['script'][] =\n    renderOpts.buildManifest.polyfillFiles\n      .filter(\n        (polyfill) =>\n          polyfill.endsWith('.js') && !polyfill.endsWith('.module.js')\n      )\n      .map((polyfill) => ({\n        src: `${ctx.assetPrefix}/_next/${polyfill}${getAssetQueryString(\n          ctx,\n          false\n        )}`,\n        integrity: renderOpts.subresourceIntegrityManifest?.[polyfill],\n        crossOrigin: renderOpts.crossOrigin,\n        noModule: true,\n        nonce: ctx.nonce,\n      }))\n\n  const [preinitScripts, bootstrapScript] = getRequiredScripts(\n    renderOpts.buildManifest,\n    // Why is assetPrefix optional on renderOpts?\n    // @TODO make it default empty string on renderOpts and get rid of it from ctx\n    ctx.assetPrefix,\n    renderOpts.crossOrigin,\n    renderOpts.subresourceIntegrityManifest,\n    getAssetQueryString(ctx, true),\n    ctx.nonce,\n    renderOpts.page\n  )\n\n  const reactServerErrorsByDigest: Map<string, DigestedError> = new Map()\n  // We don't report errors during prerendering through our instrumentation hooks\n  const silenceLogger = !!renderOpts.experimental.isRoutePPREnabled\n  function onHTMLRenderRSCError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'react-server-components')\n    )\n  }\n  const serverComponentsErrorHandler = createHTMLReactServerErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    silenceLogger,\n    onHTMLRenderRSCError\n  )\n\n  function onHTMLRenderSSRError(err: DigestedError) {\n    return renderOpts.onInstrumentationRequestError?.(\n      err,\n      req,\n      createErrorContext(ctx, 'server-rendering')\n    )\n  }\n  const allCapturedErrors: Array<unknown> = []\n  const htmlRendererErrorHandler = createHTMLErrorHandler(\n    !!renderOpts.dev,\n    !!renderOpts.nextExport,\n    reactServerErrorsByDigest,\n    allCapturedErrors,\n    silenceLogger,\n    onHTMLRenderSSRError\n  )\n\n  let dynamicTracking: null | DynamicTrackingState = null\n  let reactServerPrerenderResult: null | ReactServerPrerenderResult = null\n  const setHeader = (name: string, value: string | string[]) => {\n    res.setHeader(name, value)\n\n    metadata.headers ??= {}\n    metadata.headers[name] = res.getHeader(name)\n\n    return res\n  }\n\n  try {\n    if (renderOpts.experimental.dynamicIO) {\n      if (renderOpts.experimental.isRoutePPREnabled) {\n        /**\n         * dynamicIO with PPR\n         *\n         * The general approach is to render the RSC stream first allowing any cache reads to resolve.\n         * Once we have settled all cache reads we restart the render and abort after a single Task.\n         *\n         * Unlike with the non PPR case we can't synchronously abort the render when a dynamic API is used\n         * during the initial render because we need to ensure all caches can be filled as part of the initial Task\n         * and a synchronous abort might prevent us from filling all caches.\n         *\n         * Once the render is complete we allow the SSR render to finish and use a combination of the postponed state\n         * and the reactServerIsDynamic value to determine how to treat the resulting render\n         */\n\n        const PRERENDER_COMPLETE = 'NEXT_PRERENDER_COMPLETE'\n        const abortReason = new Error(PRERENDER_COMPLETE)\n\n        const cacheSignal = new CacheSignal()\n        const prospectiveRenderPrerenderStore: PrerenderStore = {\n          cacheSignal,\n          // During the prospective render we don't want to synchronously abort on dynamic access\n          // because it could prevent us from discovering all caches in siblings. So we omit the controller\n          // from the prerender store this time.\n          controller: null,\n          // With PPR during Prerender we don't need to track individual dynamic reasons\n          // because we will always do a final render after caches have filled and we\n          // will track it again there\n          dynamicTracking: null,\n        }\n\n        let flightController = new AbortController()\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        const firstAttemptRSCPayload = await getRSCPayload(\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        function voidOnError() {}\n        ;(\n          prerenderAsyncStorage.run(\n            // The store to scope\n            prospectiveRenderPrerenderStore,\n            // The function to run\n            ComponentMod.prerender,\n            // ... the arguments for the function to run\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              nonce: ctx.nonce,\n              // This render will be thrown away so we don't need to track errors or postpones\n              onError: voidOnError,\n              onPostpone: undefined,\n              // we don't care to track postpones during the prospective render because we need\n              // to always do a final render anyway\n              signal: flightController.signal,\n            }\n          ) as Promise<ReactServerPrerenderResolveToType>\n        ).catch(() => {})\n\n        // When this resolves the cache has no inflight reads and we can ascertain the dynamic outcome\n        await cacheSignal.cacheReady()\n        flightController.abort(abortReason)\n        // When PPR is enabled we don't synchronously abort the render when performing a prospective render\n        // because it might prevent us from discovering all caches during the render which is essential\n        // when we perform the second single-task render.\n\n        // Reset the dynamic IO state for the final render\n        flightController = new AbortController()\n        dynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const finalRenderPrerenderStore: PrerenderStore = {\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          // During the final render we do want to abort synchronously on dynamic access so we\n          // include the flight controller in the store.\n          controller: flightController,\n          dynamicTracking,\n        }\n\n        let reactServerIsDynamic = false\n        function onError(err: unknown, errorInfo: ErrorInfo) {\n          if (err === abortReason || isPrerenderInterruptedError(err)) {\n            reactServerIsDynamic = true\n            return\n          }\n\n          return serverComponentsErrorHandler(err, errorInfo)\n        }\n\n        function onPostpone(reason: string) {\n          if (\n            reason === PRERENDER_COMPLETE ||\n            isRenderInterruptedReason(reason)\n          ) {\n            reactServerIsDynamic = true\n          }\n        }\n        const finalAttemptRSCPayload = await getRSCPayload(\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                prerenderAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    nonce: ctx.nonce,\n                    onError,\n                    onPostpone,\n                    signal: flightController.signal,\n                  }\n                ),\n              () => {\n                flightController.abort(abortReason)\n              }\n            )\n          ))\n\n        await warmFlightResponse(\n          reactServerResult.asStream(),\n          clientReferenceManifest\n        )\n\n        const SSRController = new AbortController()\n        const ssrPrerenderStore: PrerenderStore = {\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n          // When you use APIs that are considered dynamic or synchronous IO.\n          controller: SSRController,\n          // We do track dynamic access because searchParams and certain hooks can still be\n          // dynamic during SSR\n          dynamicTracking,\n        }\n        let SSRIsDynamic = false\n        function SSROnError(err: unknown, errorInfo: unknown) {\n          if (err === abortReason || isPrerenderInterruptedError(err)) {\n            SSRIsDynamic = true\n            return\n          }\n\n          return htmlRendererErrorHandler(err, errorInfo)\n        }\n\n        function SSROnPostpone(reason: string) {\n          if (\n            reason === PRERENDER_COMPLETE ||\n            isRenderInterruptedReason(reason)\n          ) {\n            SSRIsDynamic = true\n          }\n        }\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        const { prelude, postponed } = await prerenderAndAbortInSequentialTasks(\n          () =>\n            prerenderAsyncStorage.run(\n              ssrPrerenderStore,\n              prerender,\n              <App\n                reactServerStream={reactServerResult.asUnclosingStream()}\n                preinitScripts={preinitScripts}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              {\n                signal: SSRController.signal,\n                onError: SSROnError,\n                onPostpone: SSROnPostpone,\n                onHeaders: (headers: Headers) => {\n                  headers.forEach((value, key) => {\n                    setHeader(key, value)\n                  })\n                },\n                maxHeadersLength: renderOpts.reactMaxHeadersLength,\n                // When debugging the static shell, client-side rendering should be\n                // disabled to prevent blanking out the page.\n                bootstrapScripts: renderOpts.isDebugStaticShell\n                  ? []\n                  : [bootstrapScript],\n              }\n            ),\n          () => {\n            SSRController.abort(abortReason)\n          }\n        )\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        if (SSRIsDynamic || reactServerIsDynamic) {\n          if (postponed != null) {\n            // Dynamic HTML case\n            metadata.postponed = getDynamicHTMLPostponedState(\n              postponed,\n              fallbackRouteParams\n            )\n          } else {\n            // Dynamic Data case\n            metadata.postponed = getDynamicDataPostponedState()\n          }\n          reactServerResult.consume()\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueDynamicPrerender(prelude, {\n              getServerInsertedHTML,\n            }),\n            dynamicTracking,\n          }\n        } else {\n          // Static case\n          if (staticGenerationStore.forceDynamic) {\n            throw new StaticGenBailoutError(\n              'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n            )\n          }\n\n          let htmlStream = prelude\n          if (postponed != null) {\n            // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n            // so we can set all the postponed boundaries to client render mode before we store the HTML response\n            const resume = require('react-dom/server.edge')\n              .resume as (typeof import('react-dom/server.edge'))['resume']\n\n            // We don't actually want to render anything so we just pass a stream\n            // that never resolves. The resume call is going to abort immediately anyway\n            const foreverStream = new ReadableStream<Uint8Array>()\n\n            const resumeStream = await resume(\n              <App\n                reactServerStream={foreverStream}\n                preinitScripts={() => {}}\n                clientReferenceManifest={clientReferenceManifest}\n                ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                nonce={ctx.nonce}\n              />,\n              JSON.parse(JSON.stringify(postponed)),\n              {\n                signal: createPostponedAbortSignal('static prerender resume'),\n                onError: htmlRendererErrorHandler,\n                nonce: ctx.nonce,\n              }\n            )\n\n            // First we write everything from the prerender, then we write everything from the aborted resume render\n            htmlStream = chainStreams(prelude, resumeStream)\n          }\n\n          return {\n            digestErrorsMap: reactServerErrorsByDigest,\n            ssrErrors: allCapturedErrors,\n            stream: await continueStaticPrerender(htmlStream, {\n              inlinedDataStream: createInlinedDataReadableStream(\n                reactServerResult.consumeAsStream(),\n                ctx.nonce,\n                formState\n              ),\n              getServerInsertedHTML,\n            }),\n            dynamicTracking,\n          }\n        }\n      } else {\n        /**\n         * dynamicIO without PPR\n         *\n         * The general approach is to render the RSC tree first allowing for any inflight\n         * caches to resolve. Once we have settled inflight caches we can check and see if any\n         * synchronous dynamic APIs were used. If so we don't need to bother doing anything more\n         * because the page will be dynamic on re-render anyway\n         *\n         * If no sync dynamic APIs were used we then re-render and abort after a single Task.\n         * If the render errors we know that the page has some dynamic IO. This assumes and relies\n         * upon caches reading from a in process memory cache and resolving in a microtask. While this\n         * is true from our own default cache implementation and if you don't exceed our LRU size it\n         * might not be true for custom cache implementations.\n         *\n         * Future implementations can do some different strategies during build like using IPC to\n         * synchronously fill caches during this special rendering mode. For now this heuristic should work\n         */\n\n        const cache = staticGenerationStore.incrementalCache\n        if (!cache) {\n          throw new Error(\n            'Expected incremental cache to exist. This is a bug in Next.js'\n          )\n        }\n\n        const PRERENDER_COMPLETE = 'NEXT_PRERENDER_COMPLETE'\n        const abortReason = new Error(PRERENDER_COMPLETE)\n\n        // We need to scope the dynamic IO state per render because we don't want to leak\n        // details between the prospective render and the final render\n        let flightController = new AbortController()\n\n        let reactServerIsDynamic = false\n        function onError(err: unknown, errorInfo: ErrorInfo) {\n          if (err === abortReason || isPrerenderInterruptedError(err)) {\n            reactServerIsDynamic = true\n            return\n          }\n\n          return serverComponentsErrorHandler(err, errorInfo)\n        }\n\n        dynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n\n        const cacheSignal = new CacheSignal()\n        const prospectiveRenderPrerenderStore: PrerenderStore = {\n          cacheSignal,\n          // When PPR is off we can synchronously abort the prospective render because we will\n          // always hit this path on the final render and thus we can skip the final render and just\n          // consider the route dynamic.\n          controller: flightController,\n          dynamicTracking,\n        }\n\n        const firstAttemptRSCPayload = await getRSCPayload(\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n        // We're not going to use the result of this render because the only time it could be used\n        // is if it completes in a microtask and that's likely very rare for any non-trivial app\n        ;(\n          prerenderAsyncStorage.run(\n            // The store to scope\n            prospectiveRenderPrerenderStore,\n            // The function to run\n            ComponentMod.prerender,\n            // ... the arguments for the function to run\n            firstAttemptRSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              nonce: ctx.nonce,\n              onError,\n              signal: flightController.signal,\n            }\n          ) as Promise<ReactServerPrerenderResolveToType>\n        ).catch(() => {})\n\n        // When this resolves the cache has no inflight reads and we can ascertain the dynamic outcome\n        await cacheSignal.cacheReady()\n        if (reactServerIsDynamic) {\n          // During a prospective render the only dynamic thing that can happen is a synchronous dynamic\n          // API access. We expect to have a tracked expression to use for our dynamic error but we fall back\n          // to a generic error if we don't.\n          const dynamicReason = getFirstDynamicReason(dynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route ${staticGenerationStore.route} couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          } else {\n            console.error(\n              'Expected Next.js to keep track of reason for opting out of static rendering but one was not found. This is a bug in Next.js'\n            )\n            throw new DynamicServerError(\n              `Route ${staticGenerationStore.route} couldn't be rendered statically because it used a dynamic API. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          }\n        } else {\n          // The render didn't explicitly use any Dynamic APIs but it might have IO so we need to retry\n          // the render. We abort the current render here to avoid doing unecessary work.\n          // Keep in mind that while the render is aborted, inflight async ServerComponents can still continue\n          // and might call dynamic APIs.\n          flightController.abort(abortReason)\n        }\n\n        // Reset the prerenderState because we are going to retry the render\n        flightController = new AbortController()\n        dynamicTracking = createDynamicTrackingState(\n          renderOpts.isDebugDynamicAccesses\n        )\n        reactServerIsDynamic = false\n\n        const finalRenderPrerenderStore: PrerenderStore = {\n          // During the final prerender we don't need to track cache access so we omit the signal\n          cacheSignal: null,\n          controller: flightController,\n          dynamicTracking,\n        }\n\n        const finalAttemptRSCPayload = await getRSCPayload(\n          tree,\n          ctx,\n          res.statusCode === 404\n        )\n\n        const reactServerResult = (reactServerPrerenderResult =\n          await createReactServerPrerenderResult(\n            prerenderAndAbortInSequentialTasks(\n              () =>\n                prerenderAsyncStorage.run(\n                  // The store to scope\n                  finalRenderPrerenderStore,\n                  // The function to run\n                  ComponentMod.prerender,\n                  // ... the arguments for the function to run\n                  finalAttemptRSCPayload,\n                  clientReferenceManifest.clientModules,\n                  {\n                    nonce: ctx.nonce,\n                    onError,\n                    signal: flightController.signal,\n                  }\n                ),\n              () => {\n                flightController.abort(abortReason)\n              }\n            )\n          ))\n\n        if (reactServerIsDynamic) {\n          // There was unfinished work after we aborted after the first render Task. This means there is some IO\n          // that is not covered by a cache and we need to bail out of static generation.\n          const err = new DynamicServerError(\n            `Route ${staticGenerationStore.route} couldn't be rendered statically because it used IO that was not cached in a Server Component. See more info here: https://nextjs.org/docs/messages/dynamic-io`\n          )\n          serverComponentsErrorHandler(err, {})\n          throw err\n        }\n\n        await warmFlightResponse(\n          reactServerResult.asStream(),\n          clientReferenceManifest\n        )\n\n        const SSRController = new AbortController()\n        const ssrPrerenderStore: PrerenderStore = {\n          // For HTML Generation we don't need to track cache reads (RSC only)\n          cacheSignal: null,\n          // We expect the SSR render to complete in a single Task and need to be able to synchronously abort\n          // When you use APIs that are considered dynamic or synchronous IO.\n          controller: SSRController,\n          // We do track dynamic access because searchParams and certain hooks can still be\n          // dynamic during SSR\n          dynamicTracking,\n        }\n        let SSRIsDynamic = false\n        function SSROnError(err: unknown, errorInfo: unknown) {\n          if (err === abortReason || isPrerenderInterruptedError(err)) {\n            SSRIsDynamic = true\n            return\n          }\n\n          return htmlRendererErrorHandler(err, errorInfo)\n        }\n        function SSROnPostpone(_: string) {\n          // We don't really support postponing when PPR is off but since experimental react\n          // has this API enabled we need to account for it. For now we'll just treat any postpone\n          // as dynamic.\n          SSRIsDynamic = true\n          return\n        }\n\n        const prerender = require('react-dom/static.edge')\n          .prerender as (typeof import('react-dom/static.edge'))['prerender']\n        const { prelude: htmlStream } =\n          await prerenderAndAbortInSequentialTasks(\n            () =>\n              prerenderAsyncStorage.run(\n                ssrPrerenderStore,\n                prerender,\n                <App\n                  reactServerStream={reactServerResult.asUnclosingStream()}\n                  preinitScripts={preinitScripts}\n                  clientReferenceManifest={clientReferenceManifest}\n                  ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n                  nonce={ctx.nonce}\n                />,\n                {\n                  signal: SSRController.signal,\n                  onError: SSROnError,\n                  onPostpone: SSROnPostpone,\n                  // When debugging the static shell, client-side rendering should be\n                  // disabled to prevent blanking out the page.\n                  bootstrapScripts: renderOpts.isDebugStaticShell\n                    ? []\n                    : [bootstrapScript],\n                }\n              ),\n            () => {\n              SSRController.abort(abortReason)\n            }\n          )\n\n        if (SSRIsDynamic) {\n          // Something dynamic happened in the SSR phase of the render. This could be IO or it could be\n          // a dynamic API like accessing searchParams in a client Page\n          const dynamicReason = getFirstDynamicReason(dynamicTracking)\n          if (dynamicReason) {\n            throw new DynamicServerError(\n              `Route ${staticGenerationStore.route} couldn't be rendered statically because it used \\`${dynamicReason}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n            )\n          } else {\n            throw new DynamicServerError(\n              `Route ${staticGenerationStore.route} couldn't be rendered statically because it used IO that was not cached in a Client Component. See more info here: https://nextjs.org/docs/messages/dynamic-io`\n            )\n          }\n        }\n\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n\n        const getServerInsertedHTML = makeGetServerInsertedHTML({\n          polyfills,\n          renderServerInsertedHTML,\n          serverCapturedErrors: allCapturedErrors,\n          basePath: renderOpts.basePath,\n          tracingMetadata: tracingMetadata,\n        })\n        const validateRootLayout = renderOpts.dev\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueFizzStream(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            isStaticGeneration: true,\n            getServerInsertedHTML,\n            serverInsertedHTMLToHead: true,\n            validateRootLayout,\n          }),\n          dynamicTracking,\n        }\n      }\n    } else if (renderOpts.experimental.isRoutePPREnabled) {\n      // We're statically generating with PPR and need to do dynamic tracking\n      dynamicTracking = createDynamicTrackingState(\n        renderOpts.isDebugDynamicAccesses\n      )\n      const reactServerPrerenderStore = {\n        cacheSignal: null,\n        controller: null,\n        dynamicTracking,\n      }\n      const RSCPayload = await getRSCPayload(tree, ctx, res.statusCode === 404)\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          prerenderAsyncStorage.run(\n            reactServerPrerenderStore,\n            ComponentMod.renderToReadableStream,\n            // ... the arguments for the function to run\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n        ))\n\n      const ssrPrerenderStore: PrerenderStore = {\n        cacheSignal: null,\n        controller: null,\n        dynamicTracking,\n      }\n\n      const prerender = require('react-dom/static.edge')\n        .prerender as (typeof import('react-dom/static.edge'))['prerender']\n      const { prelude, postponed } = await prerenderAsyncStorage.run(\n        ssrPrerenderStore,\n        prerender,\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          onHeaders: (headers: Headers) => {\n            headers.forEach((value, key) => {\n              setHeader(key, value)\n            })\n          },\n          maxHeadersLength: renderOpts.reactMaxHeadersLength,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n\n      // After awaiting here we've waited for the entire RSC render to complete. Crucially this means\n      // that when we detect whether we've used dynamic APIs below we know we'll have picked up even\n      // parts of the React Server render that might not be used in the SSR render.\n      const flightData = await streamToBuffer(reactServerResult.asStream())\n\n      if (shouldGenerateStaticFlightData(staticGenerationStore)) {\n        metadata.flightData = flightData\n      }\n\n      /**\n       * When prerendering there are three outcomes to consider\n       *\n       *   Dynamic HTML:      The prerender has dynamic holes (caused by using Next.js Dynamic Rendering APIs)\n       *                      We will need to resume this result when requests are handled and we don't include\n       *                      any server inserted HTML or inlined flight data in the static HTML\n       *\n       *   Dynamic Data:      The prerender has no dynamic holes but dynamic APIs were used. We will not\n       *                      resume this render when requests are handled but we will generate new inlined\n       *                      flight data since it is dynamic and differences may end up reconciling on the client\n       *\n       *   Static:            The prerender has no dynamic holes and no dynamic APIs were used. We statically encode\n       *                      all server inserted HTML and flight data\n       */\n      // First we check if we have any dynamic holes in our HTML prerender\n      if (accessedDynamicData(dynamicTracking)) {\n        if (postponed != null) {\n          // Dynamic HTML case.\n          metadata.postponed = getDynamicHTMLPostponedState(\n            postponed,\n            fallbackRouteParams\n          )\n        } else {\n          // Dynamic Data case.\n          metadata.postponed = getDynamicDataPostponedState()\n        }\n        // Regardless of whether this is the Dynamic HTML or Dynamic Data case we need to ensure we include\n        // server inserted html in the static response because the html that is part of the prerender may depend on it\n        // It is possible in the set of stream transforms for Dynamic HTML vs Dynamic Data may differ but currently both states\n        // require the same set so we unify the code path here\n        reactServerResult.consume()\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicTracking,\n        }\n      } else if (fallbackRouteParams && fallbackRouteParams.size > 0) {\n        // Rendering the fallback case.\n        metadata.postponed = getDynamicDataPostponedState()\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueDynamicPrerender(prelude, {\n            getServerInsertedHTML,\n          }),\n          dynamicTracking,\n        }\n      } else {\n        // Static case\n        // We still have not used any dynamic APIs. At this point we can produce an entirely static prerender response\n        if (staticGenerationStore.forceDynamic) {\n          throw new StaticGenBailoutError(\n            'Invariant: a Page with `dynamic = \"force-dynamic\"` did not trigger the dynamic pathway. This is a bug in Next.js'\n          )\n        }\n\n        let htmlStream = prelude\n        if (postponed != null) {\n          // We postponed but nothing dynamic was used. We resume the render now and immediately abort it\n          // so we can set all the postponed boundaries to client render mode before we store the HTML response\n          const resume = require('react-dom/server.edge')\n            .resume as (typeof import('react-dom/server.edge'))['resume']\n\n          // We don't actually want to render anything so we just pass a stream\n          // that never resolves. The resume call is going to abort immediately anyway\n          const foreverStream = new ReadableStream<Uint8Array>()\n\n          const resumeStream = await resume(\n            <App\n              reactServerStream={foreverStream}\n              preinitScripts={() => {}}\n              clientReferenceManifest={clientReferenceManifest}\n              ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n              nonce={ctx.nonce}\n            />,\n            JSON.parse(JSON.stringify(postponed)),\n            {\n              signal: createPostponedAbortSignal('static prerender resume'),\n              onError: htmlRendererErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n\n          // First we write everything from the prerender, then we write everything from the aborted resume render\n          htmlStream = chainStreams(prelude, resumeStream)\n        }\n\n        return {\n          digestErrorsMap: reactServerErrorsByDigest,\n          ssrErrors: allCapturedErrors,\n          stream: await continueStaticPrerender(htmlStream, {\n            inlinedDataStream: createInlinedDataReadableStream(\n              reactServerResult.consumeAsStream(),\n              ctx.nonce,\n              formState\n            ),\n            getServerInsertedHTML,\n          }),\n          dynamicTracking,\n        }\n      }\n    } else {\n      // This is a regular static generation. We don't do dynamic tracking because we rely on\n      // the old-school dynamic error handling to bail out of static generation\n      const RSCPayload = await getRSCPayload(tree, ctx, res.statusCode === 404)\n      const reactServerResult = (reactServerPrerenderResult =\n        await createReactServerPrerenderResultFromRender(\n          ComponentMod.renderToReadableStream(\n            RSCPayload,\n            clientReferenceManifest.clientModules,\n            {\n              onError: serverComponentsErrorHandler,\n              nonce: ctx.nonce,\n            }\n          )\n        ))\n\n      const renderToReadableStream = require('react-dom/server.edge')\n        .renderToReadableStream as (typeof import('react-dom/server.edge'))['renderToReadableStream']\n\n      const htmlStream = await renderToReadableStream(\n        <App\n          reactServerStream={reactServerResult.asUnclosingStream()}\n          preinitScripts={preinitScripts}\n          clientReferenceManifest={clientReferenceManifest}\n          ServerInsertedHTMLProvider={ServerInsertedHTMLProvider}\n          nonce={ctx.nonce}\n        />,\n        {\n          onError: htmlRendererErrorHandler,\n          nonce: ctx.nonce,\n          // When debugging the static shell, client-side rendering should be\n          // disabled to prevent blanking out the page.\n          bootstrapScripts: renderOpts.isDebugStaticShell\n            ? []\n            : [bootstrapScript],\n        }\n      )\n\n      if (shouldGenerateStaticFlightData(staticGenerationStore)) {\n        metadata.flightData = await streamToBuffer(reactServerResult.asStream())\n      }\n\n      const getServerInsertedHTML = makeGetServerInsertedHTML({\n        polyfills,\n        renderServerInsertedHTML,\n        serverCapturedErrors: allCapturedErrors,\n        basePath: renderOpts.basePath,\n        tracingMetadata: tracingMetadata,\n      })\n      return {\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(htmlStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            reactServerResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML,\n          serverInsertedHTMLToHead: true,\n        }),\n      }\n    }\n  } catch (err) {\n    if (\n      isStaticGenBailoutError(err) ||\n      (typeof err === 'object' &&\n        err !== null &&\n        'message' in err &&\n        typeof err.message === 'string' &&\n        err.message.includes(\n          'https://nextjs.org/docs/advanced-features/static-html-export'\n        ))\n    ) {\n      // Ensure that \"next dev\" prints the red error overlay\n      throw err\n    }\n\n    // If this is a static generation error, we need to throw it so that it\n    // can be handled by the caller if we're in static generation mode.\n    if (isDynamicServerError(err)) {\n      throw err\n    }\n\n    // If a bailout made it to this point, it means it wasn't wrapped inside\n    // a suspense boundary.\n    const shouldBailoutToCSR = isBailoutToCSRError(err)\n    if (shouldBailoutToCSR) {\n      const stack = getStackWithoutErrorMessage(err)\n      error(\n        `${err.reason} should be wrapped in a suspense boundary at page \"${ctx.pagePath}\". Read more: https://nextjs.org/docs/messages/missing-suspense-with-csr-bailout\\n${stack}`\n      )\n\n      throw err\n    }\n\n    if (isNotFoundError(err)) {\n      res.statusCode = 404\n    }\n    let hasRedirectError = false\n    if (isRedirectError(err)) {\n      hasRedirectError = true\n      res.statusCode = getRedirectStatusCodeFromError(err)\n      if (err.mutableCookies) {\n        const headers = new Headers()\n\n        // If there were mutable cookies set, we need to set them on the\n        // response.\n        if (appendMutableCookies(headers, err.mutableCookies)) {\n          setHeader('set-cookie', Array.from(headers.values()))\n        }\n      }\n      const redirectUrl = addPathPrefix(\n        getURLFromRedirectError(err),\n        renderOpts.basePath\n      )\n      setHeader('Location', redirectUrl)\n    }\n\n    const is404 = res.statusCode === 404\n    if (!is404 && !hasRedirectError && !shouldBailoutToCSR) {\n      res.statusCode = 500\n    }\n\n    if (reactServerPrerenderResult === null) {\n      // We errored when we did not have an RSC stream to read from. This is not just a render\n      // error, we need to throw early\n      throw err\n    }\n\n    const errorType = is404\n      ? 'not-found'\n      : hasRedirectError\n        ? 'redirect'\n        : undefined\n\n    const [errorPreinitScripts, errorBootstrapScript] = getRequiredScripts(\n      renderOpts.buildManifest,\n      ctx.assetPrefix,\n      renderOpts.crossOrigin,\n      renderOpts.subresourceIntegrityManifest,\n      getAssetQueryString(ctx, false),\n      ctx.nonce,\n      '/_not-found/page'\n    )\n\n    const errorRSCPayload = await getErrorRSCPayload(tree, ctx, errorType)\n\n    const errorServerStream = ComponentMod.renderToReadableStream(\n      errorRSCPayload,\n      clientReferenceManifest.clientModules,\n      {\n        onError: serverComponentsErrorHandler,\n        nonce: ctx.nonce,\n      }\n    )\n\n    try {\n      const fizzStream = await renderToInitialFizzStream({\n        ReactDOMServer: require('react-dom/server.edge'),\n        element: (\n          <AppWithoutContext\n            reactServerStream={errorServerStream}\n            preinitScripts={errorPreinitScripts}\n            clientReferenceManifest={clientReferenceManifest}\n            nonce={ctx.nonce}\n          />\n        ),\n        streamOptions: {\n          nonce: ctx.nonce,\n          // Include hydration scripts in the HTML\n          bootstrapScripts: [errorBootstrapScript],\n          formState,\n        },\n      })\n\n      if (shouldGenerateStaticFlightData(staticGenerationStore)) {\n        metadata.flightData = await streamToBuffer(\n          reactServerPrerenderResult.asStream()\n        )\n      }\n\n      const validateRootLayout = renderOpts.dev\n      return {\n        // Returning the error that was thrown so it can be used to handle\n        // the response in the caller.\n        digestErrorsMap: reactServerErrorsByDigest,\n        ssrErrors: allCapturedErrors,\n        stream: await continueFizzStream(fizzStream, {\n          inlinedDataStream: createInlinedDataReadableStream(\n            // This is intentionally using the readable datastream from the\n            // main render rather than the flight data from the error page\n            // render\n            reactServerPrerenderResult.consumeAsStream(),\n            ctx.nonce,\n            formState\n          ),\n          isStaticGeneration: true,\n          getServerInsertedHTML: makeGetServerInsertedHTML({\n            polyfills,\n            renderServerInsertedHTML,\n            serverCapturedErrors: [],\n            basePath: renderOpts.basePath,\n            tracingMetadata: tracingMetadata,\n          }),\n          serverInsertedHTMLToHead: true,\n          validateRootLayout,\n        }),\n        dynamicTracking,\n      }\n    } catch (finalErr: any) {\n      if (process.env.NODE_ENV === 'development' && isNotFoundError(finalErr)) {\n        const bailOnNotFound: typeof import('../../client/components/dev-root-not-found-boundary').bailOnNotFound =\n          require('../../client/components/dev-root-not-found-boundary').bailOnNotFound\n        bailOnNotFound()\n      }\n      throw finalErr\n    }\n  }\n}\n\nconst loadingChunks: Set<Promise<unknown>> = new Set()\nconst chunkListeners: Array<(x?: unknown) => void> = []\n\nfunction trackChunkLoading(load: Promise<unknown>) {\n  loadingChunks.add(load)\n  load.finally(() => {\n    if (loadingChunks.has(load)) {\n      loadingChunks.delete(load)\n      if (loadingChunks.size === 0) {\n        // We are not currently loading any chunks. We can notify all listeners\n        for (let i = 0; i < chunkListeners.length; i++) {\n          chunkListeners[i]()\n        }\n        chunkListeners.length = 0\n      }\n    }\n  })\n}\n\nexport async function warmFlightResponse(\n  flightStream: BinaryStreamOf<any>,\n  clientReferenceManifest: DeepReadonly<ClientReferenceManifest>\n) {\n  let createFromReadableStream\n  if (process.env.TURBOPACK) {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-turbopack/client.edge').createFromReadableStream\n  } else {\n    createFromReadableStream =\n      // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge').createFromReadableStream\n  }\n\n  try {\n    createFromReadableStream(flightStream, {\n      ssrManifest: {\n        moduleLoading: clientReferenceManifest.moduleLoading,\n        moduleMap: clientReferenceManifest.ssrModuleMapping,\n      },\n    })\n  } catch {\n    // We don't want to handle errors here but we don't want it to\n    // interrupt the outer flow. We simply ignore it here and expect\n    // it will bubble up during a render\n  }\n\n  // We'll wait at least one task and then if no chunks have started to load\n  // we'll we can infer that there are none to load from this flight response\n  trackChunkLoading(waitAtLeastOneReactRenderTask())\n  return new Promise((r) => {\n    chunkListeners.push(r)\n  })\n}\n"],"names":["React","RenderResult","chainStreams","renderToInitialFizzStream","createDocumentClosingStream","continueFizzStream","continueDynamicPrerender","continueStaticPrerender","continueDynamicHTMLResume","streamToBuffer","streamToString","stripInternalQueries","NEXT_HMR_REFRESH_HEADER","NEXT_ROUTER_PREFETCH_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_URL","RSC_HEADER","createMetadataComponents","createTrackedMetadataContext","createMetadataContext","withRequestStore","withStaticGenerationStore","isNotFoundError","getURLFromRedirectError","isRedirectError","getRedirectStatusCodeFromError","addImplicitTags","AppRenderSpan","NextNodeServerSpan","getTracer","FlightRenderResult","createFlightReactServerErrorHandler","createHTMLReactServerErrorHandler","createHTMLErrorHandler","isUserLandError","getShortDynamicParamType","dynamicParamTypes","getSegmentParam","getScriptNonceFromHeader","parseAndValidateFlightRouterState","createFlightRouterStateFromLoaderTree","handleAction","isBailoutToCSRError","warn","error","appendMutableCookies","createServerInsertedHTML","getRequiredScripts","addPathPrefix","getTracedMetadata","makeGetServerInsertedHTML","walkTreeWithFlightRouterState","createComponentTree","getAssetQueryString","setReferenceManifestsSingleton","DynamicState","parsePostponedState","getDynamicDataPostponedState","getDynamicHTMLPostponedState","getPostponedFromState","isDynamicServerError","useFlightStream","createInlinedDataReadableStream","StaticGenBailoutError","isStaticGenBailoutError","getStackWithoutErrorMessage","accessedDynamicData","createPostponedAbortSignal","formatDynamicAPIAccesses","isPrerenderInterruptedError","isRenderInterruptedReason","createDynamicTrackingState","getFirstDynamicReason","getClientComponentLoaderMetrics","wrapClientComponentLoader","createServerModuleMap","isNodeNextRequest","parseParameter","parseRelativeUrl","AppRouter","getServerActionRequestMetadata","createInitialRouterState","createMutableActionQueue","getRevalidateReason","PAGE_SEGMENT_KEY","DynamicServerError","ReactServerResult","createReactServerPrerenderResult","createReactServerPrerenderResultFromRender","prerenderAndAbortInSequentialTasks","waitAtLeastOneReactRenderTask","prerenderAsyncStorage","CacheSignal","flightDataPathHeadKey","parseRequestHeaders","headers","options","isPrefetchRequest","toLowerCase","undefined","isHmrRefresh","isRSCRequest","shouldProvideFlightRouterState","isRoutePPREnabled","flightRouterState","csp","nonce","createNotFoundLoaderTree","loaderTree","components","children","page","makeGetDynamicParamFromSegment","params","pagePath","fallbackRouteParams","getDynamicParamFromSegment","segment","segmentParam","key","param","value","has","get","Array","isArray","map","i","encodeURIComponent","isCatchall","type","isOptionalCatchall","dynamicParamType","treeSegment","split","slice","flatMap","pathSegment","join","NonIndex","ctx","is404Page","isInvalidStatusCode","res","statusCode","meta","name","content","generateDynamicRSCPayload","flightData","componentMod","tree","createDynamicallyTrackedSearchParams","createDynamicallyTrackedParams","appUsingSizeAdjustment","requestStore","url","query","requestId","staticGenerationStore","skipFlight","preloadCallbacks","MetadataTree","getMetadataReady","metadataContext","pathname","renderOpts","createSegmentPath","child","loaderTreeToFilter","parentParams","isFirst","rscPayloadHead","Fragment","injectedCSS","Set","injectedJS","injectedFontPreloadTags","rootLayoutIncluded","path","actionResult","a","f","b","buildId","createErrorContext","renderSource","routerKind","routePath","routeType","isAction","revalidateReason","generateDynamicFlightRenderResult","req","onFlightDataRenderError","err","onInstrumentationRequestError","onError","dev","rscPayload","flightReadableStream","renderToReadableStream","clientReferenceManifest","clientModules","fetchMetrics","prepareInitialCanonicalUrl","search","getRSCPayload","is404","missingSlots","process","env","NODE_ENV","GlobalError","initialTree","errorType","seedData","firstItem","varyHeader","getHeader","couldBeIntercepted","includes","initialHead","P","Preloads","p","assetPrefix","c","m","G","s","postponed","forEach","preloadFn","getErrorRSCPayload","initialSeedData","html","id","head","body","App","reactServerStream","preinitScripts","ServerInsertedHTMLProvider","response","use","initialState","initialFlightData","initialCanonicalUrlParts","initialParallelRoutes","location","actionQueue","HeadManagerContext","require","Provider","appDir","globalErrorComponent","AppWithoutContext","renderToHTMLOrFlightImpl","parsedRequestHeaders","requestEndedState","postponedState","isNotFoundPath","requestTimestamp","Date","now","serverActionsManifest","ComponentMod","nextFontManifest","serverActions","enableTainting","__next_app__","instrumented","globalThis","__next_require__","__next_chunk_load__","args","loadingChunk","loadChunk","trackChunkLoading","URL","setAppIsrStatus","NEXT_RUNTIME","originalRequest","on","prerenderStore","staticGenStore","staticGenerationAsyncStorage","getStore","isPPR","dynamicTracking","dynamicAccesses","length","revalidate","ended","metrics","reset","startSpan","clientComponentLoading","startTime","clientComponentLoadStart","attributes","clientComponentLoadCount","end","clientComponentLoadTimes","metadata","appUsingSizeAdjust","serverModuleMap","pageName","patchFetch","taintObjectReference","crypto","randomUUID","nanoid","isStaticGeneration","isActionRequest","isServerAction","isPrefetch","defaultRevalidate","getRootSpanAttributes","set","prerenderToStreamWithTracing","wrap","getBodyResult","spanName","prerenderToStream","isDebugDynamicAccesses","access","digestErrorsMap","size","buildFailingError","values","next","ssrErrors","find","pendingRevalidates","waitUntil","Promise","all","incrementalCache","revalidateTag","revalidatedTags","Object","tags","fetchTags","forceStatic","staticBailoutInfo","description","dynamicUsageDescription","stack","dynamicUsageStack","stream","renderToStreamWithTracing","renderToStream","formState","actionRequestResult","generateFlight","notFoundLoaderTree","result","assignMetadata","renderToHTMLOrFlight","serverComponentsHmrCache","Error","experimental","requestAsyncStorage","routeModule","definition","renderServerInsertedHTML","tracingMetadata","getTracePropagationData","clientTraceMetadata","polyfills","buildManifest","polyfillFiles","filter","polyfill","endsWith","src","integrity","subresourceIntegrityManifest","crossOrigin","noModule","bootstrapScript","reactServerErrorsByDigest","Map","silenceLogger","onHTMLRenderRSCError","serverComponentsErrorHandler","nextExport","onHTMLRenderSSRError","allCapturedErrors","htmlRendererErrorHandler","reactServerResult","setHeader","bind","RSCPayload","DATA","inlinedReactServerDataStream","tee","resume","htmlStream","getServerInsertedHTML","serverCapturedErrors","basePath","inlinedDataStream","consume","onHeaders","maxHeadersLength","reactMaxHeadersLength","bootstrapScripts","isDebugStaticShell","generateStaticHTML","supportsDynamicResponse","validateRootLayout","serverInsertedHTMLToHead","message","shouldBailoutToCSR","reason","hasRedirectError","mutableCookies","Headers","from","redirectUrl","errorPreinitScripts","errorBootstrapScript","errorRSCPayload","errorServerStream","fizzStream","ReactDOMServer","element","streamOptions","finalErr","bailOnNotFound","shouldGenerateStaticFlightData","reactServerPrerenderResult","dynamicIO","PRERENDER_COMPLETE","abortReason","cacheSignal","prospectiveRenderPrerenderStore","controller","flightController","AbortController","firstAttemptRSCPayload","voidOnError","run","prerender","onPostpone","signal","catch","cacheReady","abort","finalRenderPrerenderStore","reactServerIsDynamic","errorInfo","finalAttemptRSCPayload","warmFlightResponse","asStream","SSRController","ssrPrerenderStore","SSRIsDynamic","SSROnError","SSROnPostpone","prelude","asUnclosingStream","forceDynamic","foreverStream","ReadableStream","resumeStream","JSON","parse","stringify","consumeAsStream","cache","dynamicReason","route","console","_","reactServerPrerenderStore","loadingChunks","chunkListeners","load","add","finally","delete","flightStream","createFromReadableStream","TURBOPACK","ssrManifest","moduleLoading","moduleMap","ssrModuleMapping","r","push"],"mappings":"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"}