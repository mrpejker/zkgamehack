{"version":3,"sources":["../../../src/server/app-render/dynamic-rendering.ts"],"sourcesContent":["/**\n * The functions provided by this module are used to communicate certain properties\n * about the currently running code so that Next.js can make decisions on how to handle\n * the current execution in different rendering modes such as pre-rendering, resuming, and SSR.\n *\n * Today Next.js treats all code as potentially static. Certain APIs may only make sense when dynamically rendering.\n * Traditionally this meant deopting the entire render to dynamic however with PPR we can now deopt parts\n * of a React tree as dynamic while still keeping other parts static. There are really two different kinds of\n * Dynamic indications.\n *\n * The first is simply an intention to be dynamic. unstable_noStore is an example of this where\n * the currently executing code simply declares that the current scope is dynamic but if you use it\n * inside unstable_cache it can still be cached. This type of indication can be removed if we ever\n * make the default dynamic to begin with because the only way you would ever be static is inside\n * a cache scope which this indication does not affect.\n *\n * The second is an indication that a dynamic data source was read. This is a stronger form of dynamic\n * because it means that it is inappropriate to cache this at all. using a dynamic data source inside\n * unstable_cache should error. If you want to use some dynamic data inside unstable_cache you should\n * read that data outside the cache and pass it in as an argument to the cached function.\n */\n\nimport type { StaticGenerationStore } from '../../client/components/static-generation-async-storage.external'\n\n// Once postpone is in stable we should switch to importing the postpone export directly\nimport React from 'react'\n\nimport { DynamicServerError } from '../../client/components/hooks-server-context'\nimport { StaticGenBailoutError } from '../../client/components/static-generation-bailout'\nimport { prerenderAsyncStorage } from './prerender-async-storage.external'\n\nconst hasPostpone = typeof React.unstable_postpone === 'function'\n\ntype DynamicAccess = {\n  /**\n   * If debugging, this will contain the stack trace of where the dynamic access\n   * occurred. This is used to provide more information to the user about why\n   * their page is being rendered dynamically.\n   */\n  stack?: string\n\n  /**\n   * The expression that was accessed dynamically.\n   */\n  expression: string\n}\n\n// Stores dynamic reasons used during a render.\nexport type DynamicTrackingState = {\n  /**\n   * When true, stack information will also be tracked during dynamic access.\n   */\n  readonly isDebugDynamicAccesses: boolean | undefined\n\n  /**\n   * The dynamic accesses that occurred during the render.\n   */\n  readonly dynamicAccesses: Array<DynamicAccess>\n}\n\nexport function createDynamicTrackingState(\n  isDebugDynamicAccesses: boolean | undefined\n): DynamicTrackingState {\n  return {\n    isDebugDynamicAccesses,\n    dynamicAccesses: [],\n  }\n}\n\nexport function getFirstDynamicReason(\n  trackingState: DynamicTrackingState\n): undefined | string {\n  return trackingState.dynamicAccesses[0]?.expression\n}\n\n/**\n * This function communicates that the current scope should be treated as dynamic.\n *\n * In most cases this function is a no-op but if called during\n * a PPR prerender it will postpone the current sub-tree and calling\n * it during a normal prerender will cause the entire prerender to abort\n */\nexport function markCurrentScopeAsDynamic(\n  store: StaticGenerationStore,\n  expression: string\n): void {\n  // inside cache scopes marking a scope as dynamic has no effect because the outer cache scope\n  // creates a cache boundary. This is subtly different from reading a dynamic data source which is\n  // forbidden inside a cache scope.\n  if (store.isUnstableCacheCallback) return\n\n  // If we're forcing dynamic rendering or we're forcing static rendering, we\n  // don't need to do anything here because the entire page is already dynamic\n  // or it's static and it should not throw or postpone here.\n  if (store.forceDynamic || store.forceStatic) return\n\n  if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  }\n\n  const prerenderStore = prerenderAsyncStorage.getStore()\n  if (prerenderStore) {\n    if (prerenderStore.controller) {\n      // We're prerendering the RSC stream with dynamicIO enabled and we need to abort the\n      // current render because something dynamic is being used.\n      // This won't throw so we still need to fall through to determine if/how we handle\n      // this specific dynamic request.\n      abortRSCRender(prerenderStore.controller, store.route, expression)\n      errorWithTracking(prerenderStore.dynamicTracking, store.route, expression)\n    } else if (prerenderStore.cacheSignal) {\n      // we're prerendering with dynamicIO but we don't want to eagerly abort this\n      // prospective render. We error here to avoid returning anything from whatever\n      // is trying to access dynamic data.\n      errorWithTracking(prerenderStore.dynamicTracking, store.route, expression)\n    } else {\n      postponeWithTracking(\n        prerenderStore.dynamicTracking,\n        store.route,\n        expression\n      )\n    }\n  } else {\n    store.revalidate = 0\n\n    if (store.isStaticGeneration) {\n      // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    }\n  }\n}\n\n/**\n * This function communicates that some dynamic path parameter was read. This\n * differs from the more general `trackDynamicDataAccessed` in that it is will\n * not error when `dynamic = \"error\"` is set.\n *\n * @param store The static generation store\n * @param expression The expression that was accessed dynamically\n */\nexport function trackFallbackParamAccessed(\n  store: StaticGenerationStore,\n  expression: string\n): void {\n  const prerenderStore = prerenderAsyncStorage.getStore()\n  if (!prerenderStore) return\n\n  postponeWithTracking(prerenderStore.dynamicTracking, store.route, expression)\n}\n\n/**\n * This function communicates that some dynamic data was read. This typically would refer to accessing\n * a Request specific data store such as cookies or headers. This function is not how end-users will\n * describe reading from dynamic data sources which are valid to cache and up to the author to make\n * a determination of when to do so.\n *\n * If we are inside a cache scope we error\n * Also during a PPR Prerender we postpone\n */\nexport function trackDynamicDataAccessed(\n  store: StaticGenerationStore,\n  expression: string\n): void {\n  if (store.isUnstableCacheCallback) {\n    throw new Error(\n      `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\". Accessing Dynamic data sources inside a cache scope is not supported. If you need this data inside a cached function use \"${expression}\" outside of the cached function and pass the required dynamic data in as an argument. See more info here: https://nextjs.org/docs/app/api-reference/functions/unstable_cache`\n    )\n  } else if (store.dynamicShouldError) {\n    throw new StaticGenBailoutError(\n      `Route ${store.route} with \\`dynamic = \"error\"\\` couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n    )\n  }\n\n  const prerenderStore = prerenderAsyncStorage.getStore()\n  if (prerenderStore) {\n    if (prerenderStore.controller) {\n      // We're prerendering the RSC stream with dynamicIO enabled and we need to abort the\n      // current render because something dynamic is being used.\n      // This won't throw so we still need to fall through to determine if/how we handle\n      // this specific dynamic request.\n      abortRSCRender(prerenderStore.controller, store.route, expression)\n      errorWithTracking(prerenderStore.dynamicTracking, store.route, expression)\n    } else if (prerenderStore.cacheSignal) {\n      // we're prerendering with dynamicIO but we don't want to eagerly abort this\n      // prospective render. We error here to avoid returning anything from whatever\n      // is trying to access dynamic data.\n      errorWithTracking(prerenderStore.dynamicTracking, store.route, expression)\n    } else {\n      postponeWithTracking(\n        prerenderStore.dynamicTracking,\n        store.route,\n        expression\n      )\n    }\n  } else {\n    store.revalidate = 0\n\n    if (store.isStaticGeneration) {\n      // We aren't prerendering but we are generating a static page. We need to bail out of static generation\n      const err = new DynamicServerError(\n        `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n      )\n      store.dynamicUsageDescription = expression\n      store.dynamicUsageStack = err.stack\n\n      throw err\n    }\n  }\n}\n\n/**\n * This component will call `React.postpone` that throws the postponed error.\n */\ntype PostponeProps = {\n  reason: string\n  route: string\n}\nexport function Postpone({ reason, route }: PostponeProps): never {\n  const prerenderStore = prerenderAsyncStorage.getStore()\n  const dynamicTracking = prerenderStore?.dynamicTracking || null\n  postponeWithTracking(dynamicTracking, route, reason)\n}\n\nfunction errorWithTracking(\n  dynamicTracking: null | DynamicTrackingState,\n  route: string,\n  expression: string\n): never {\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n  const reason =\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +\n    `React throws this special object to indicate where. It should not be caught by ` +\n    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`\n\n  throw createPrerenderInterruptedError(reason)\n}\n\nfunction postponeWithTracking(\n  dynamicTracking: null | DynamicTrackingState,\n  route: string,\n  expression: string\n): never {\n  assertPostpone()\n  if (dynamicTracking) {\n    dynamicTracking.dynamicAccesses.push({\n      // When we aren't debugging, we don't need to create another error for the\n      // stack trace.\n      stack: dynamicTracking.isDebugDynamicAccesses\n        ? new Error().stack\n        : undefined,\n      expression,\n    })\n  }\n\n  React.unstable_postpone(createPostponeReason(route, expression))\n}\n\nfunction createPostponeReason(route: string, expression: string) {\n  return (\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +\n    `React throws this special object to indicate where. It should not be caught by ` +\n    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`\n  )\n}\n\nexport function isDynamicPostpone(err: unknown) {\n  if (\n    typeof err === 'object' &&\n    err !== null &&\n    typeof (err as any).message === 'string'\n  ) {\n    return isDynamicPostponeReason((err as any).message)\n  }\n  return false\n}\n\nfunction isDynamicPostponeReason(reason: string) {\n  return (\n    reason.includes(\n      'needs to bail out of prerendering at this point because it used'\n    ) &&\n    reason.includes(\n      'Learn more: https://nextjs.org/docs/messages/ppr-caught-error'\n    )\n  )\n}\n\nif (isDynamicPostponeReason(createPostponeReason('%%%', '^^^')) === false) {\n  throw new Error(\n    'Invariant: isDynamicPostpone misidentified a postpone reason. This is a bug in Next.js'\n  )\n}\n\nconst NEXT_PRERENDER_INTERRUPTED = 'NEXT_PRERENDER_INTERRUPTED'\n\nfunction createPrerenderInterruptedError(message: string): Error {\n  const error = new Error(message)\n  ;(error as any).digest = NEXT_PRERENDER_INTERRUPTED\n  return error\n}\n\nexport function isPrerenderInterruptedError(error: unknown) {\n  return (\n    typeof error === 'object' &&\n    error !== null &&\n    (error as any).digest === NEXT_PRERENDER_INTERRUPTED\n  )\n}\n\nfunction abortRSCRender(\n  controller: AbortController,\n  route: string,\n  expression: string\n): void {\n  // TODO improve the error message to communicate what it means to have a complete\n  // prerender that was interrupted\n  const reason =\n    `Route ${route} needs to bail out of prerendering at this point because it used ${expression}. ` +\n    `React throws this special object to indicate where. It should not be caught by ` +\n    `your own try/catch. Learn more: https://nextjs.org/docs/messages/ppr-caught-error`\n\n  controller.abort(createPrerenderInterruptedError(reason))\n}\n\nexport function isRenderInterruptedReason(reason: string) {\n  return reason === NEXT_PRERENDER_INTERRUPTED\n}\n\nexport function accessedDynamicData(\n  dynamicTracking: DynamicTrackingState\n): boolean {\n  return dynamicTracking.dynamicAccesses.length > 0\n}\n\nexport function formatDynamicAPIAccesses(\n  dynamicTracking: DynamicTrackingState\n): string[] {\n  return dynamicTracking.dynamicAccesses\n    .filter(\n      (access): access is Required<DynamicAccess> =>\n        typeof access.stack === 'string' && access.stack.length > 0\n    )\n    .map(({ expression, stack }) => {\n      stack = stack\n        .split('\\n')\n        // Remove the \"Error: \" prefix from the first line of the stack trace as\n        // well as the first 4 lines of the stack trace which is the distance\n        // from the user code and the `new Error().stack` call.\n        .slice(4)\n        .filter((line) => {\n          // Exclude Next.js internals from the stack trace.\n          if (line.includes('node_modules/next/')) {\n            return false\n          }\n\n          // Exclude anonymous functions from the stack trace.\n          if (line.includes(' (<anonymous>)')) {\n            return false\n          }\n\n          // Exclude Node.js internals from the stack trace.\n          if (line.includes(' (node:')) {\n            return false\n          }\n\n          return true\n        })\n        .join('\\n')\n      return `Dynamic API Usage Debug - ${expression}:\\n${stack}`\n    })\n}\n\nfunction assertPostpone() {\n  if (!hasPostpone) {\n    throw new Error(\n      `Invariant: React.unstable_postpone is not defined. This suggests the wrong version of React was loaded. This is a bug in Next.js`\n    )\n  }\n}\n\n/**\n * This is a bit of a hack to allow us to abort a render using a Postpone instance instead of an Error which changes React's\n * abort semantics slightly.\n */\nexport function createPostponedAbortSignal(reason: string): AbortSignal {\n  assertPostpone()\n  const controller = new AbortController()\n  // We get our hands on a postpone instance by calling postpone and catching the throw\n  try {\n    React.unstable_postpone(reason)\n  } catch (x: unknown) {\n    controller.abort(x)\n  }\n  return controller.signal\n}\n"],"names":["React","DynamicServerError","StaticGenBailoutError","prerenderAsyncStorage","hasPostpone","unstable_postpone","createDynamicTrackingState","isDebugDynamicAccesses","dynamicAccesses","getFirstDynamicReason","trackingState","expression","markCurrentScopeAsDynamic","store","isUnstableCacheCallback","forceDynamic","forceStatic","dynamicShouldError","route","prerenderStore","getStore","controller","abortRSCRender","errorWithTracking","dynamicTracking","cacheSignal","postponeWithTracking","revalidate","isStaticGeneration","err","dynamicUsageDescription","dynamicUsageStack","stack","trackFallbackParamAccessed","trackDynamicDataAccessed","Error","Postpone","reason","push","undefined","createPrerenderInterruptedError","assertPostpone","createPostponeReason","isDynamicPostpone","message","isDynamicPostponeReason","includes","NEXT_PRERENDER_INTERRUPTED","error","digest","isPrerenderInterruptedError","abort","isRenderInterruptedReason","accessedDynamicData","length","formatDynamicAPIAccesses","filter","access","map","split","slice","line","join","createPostponedAbortSignal","AbortController","x","signal"],"mappings":"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"}