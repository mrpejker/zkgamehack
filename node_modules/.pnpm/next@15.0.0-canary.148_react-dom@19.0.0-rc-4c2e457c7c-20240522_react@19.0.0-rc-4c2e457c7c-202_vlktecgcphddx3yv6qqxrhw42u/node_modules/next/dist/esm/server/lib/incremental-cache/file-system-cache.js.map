{"version":3,"sources":["../../../../src/server/lib/incremental-cache/file-system-cache.ts"],"sourcesContent":["import type { RouteMetadata } from '../../../export/routes/types'\nimport type { CacheHandler, CacheHandlerContext, CacheHandlerValue } from './'\nimport type { CacheFs } from '../../../shared/lib/utils'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchValue,\n} from '../../response-cache'\n\nimport LRUCache from 'next/dist/compiled/lru-cache'\nimport path from '../../../shared/lib/isomorphic/path'\nimport {\n  NEXT_CACHE_TAGS_HEADER,\n  NEXT_DATA_SUFFIX,\n  NEXT_META_SUFFIX,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n} from '../../../lib/constants'\n\ntype FileSystemCacheContext = Omit<\n  CacheHandlerContext,\n  'fs' | 'serverDistDir'\n> & {\n  fs: CacheFs\n  serverDistDir: string\n}\n\ntype TagsManifest = {\n  version: 1\n  items: { [tag: string]: { revalidatedAt: number } }\n}\nlet memoryCache: LRUCache<string, CacheHandlerValue> | undefined\nlet tagsManifest: TagsManifest | undefined\n\nexport default class FileSystemCache implements CacheHandler {\n  private fs: FileSystemCacheContext['fs']\n  private flushToDisk?: FileSystemCacheContext['flushToDisk']\n  private serverDistDir: FileSystemCacheContext['serverDistDir']\n  private tagsManifestPath?: string\n  private revalidatedTags: string[]\n  private debug: boolean\n\n  constructor(ctx: FileSystemCacheContext) {\n    this.fs = ctx.fs\n    this.flushToDisk = ctx.flushToDisk\n    this.serverDistDir = ctx.serverDistDir\n    this.revalidatedTags = ctx.revalidatedTags\n    this.debug = !!process.env.NEXT_PRIVATE_DEBUG_CACHE\n\n    if (ctx.maxMemoryCacheSize) {\n      if (!memoryCache) {\n        if (this.debug) {\n          console.log('using memory store for fetch cache')\n        }\n\n        memoryCache = new LRUCache({\n          max: ctx.maxMemoryCacheSize,\n          length({ value }) {\n            if (!value) {\n              return 25\n            } else if (value.kind === CachedRouteKind.REDIRECT) {\n              return JSON.stringify(value.props).length\n            } else if (value.kind === CachedRouteKind.IMAGE) {\n              throw new Error('invariant image should not be incremental-cache')\n            } else if (value.kind === CachedRouteKind.FETCH) {\n              return JSON.stringify(value.data || '').length\n            } else if (value.kind === CachedRouteKind.APP_ROUTE) {\n              return value.body.length\n            }\n            // rough estimate of size of cache value\n            return (\n              value.html.length +\n              (JSON.stringify(\n                value.kind === CachedRouteKind.APP_PAGE\n                  ? value.rscData\n                  : value.pageData\n              )?.length || 0)\n            )\n          },\n        })\n      }\n    } else if (this.debug) {\n      console.log('not using memory store for fetch cache')\n    }\n\n    if (this.serverDistDir && this.fs) {\n      this.tagsManifestPath = path.join(\n        this.serverDistDir,\n        '..',\n        'cache',\n        'fetch-cache',\n        'tags-manifest.json'\n      )\n\n      this.loadTagsManifestSync()\n    }\n  }\n\n  public resetRequestCache(): void {}\n\n  /**\n   * Load the tags manifest from the file system\n   */\n  private async loadTagsManifest() {\n    if (!this.tagsManifestPath || !this.fs || tagsManifest) return\n    try {\n      tagsManifest = JSON.parse(\n        await this.fs.readFile(this.tagsManifestPath, 'utf8')\n      )\n    } catch (err: any) {\n      tagsManifest = { version: 1, items: {} }\n    }\n    if (this.debug) console.log('loadTagsManifest', tagsManifest)\n  }\n\n  /**\n   * As above, but synchronous for use in the constructor. This is to\n   * preserve the existing behaviour when instantiating the cache handler. Although it's\n   * not ideal to block the main thread it's only called once during startup.\n   */\n  private loadTagsManifestSync() {\n    if (!this.tagsManifestPath || !this.fs || tagsManifest) return\n    try {\n      tagsManifest = JSON.parse(\n        this.fs.readFileSync(this.tagsManifestPath, 'utf8')\n      )\n    } catch (err: any) {\n      tagsManifest = { version: 1, items: {} }\n    }\n    if (this.debug) console.log('loadTagsManifest', tagsManifest)\n  }\n\n  public async revalidateTag(\n    ...args: Parameters<CacheHandler['revalidateTag']>\n  ) {\n    let [tags] = args\n    tags = typeof tags === 'string' ? [tags] : tags\n\n    if (this.debug) {\n      console.log('revalidateTag', tags)\n    }\n\n    if (tags.length === 0) {\n      return\n    }\n\n    // we need to ensure the tagsManifest is refreshed\n    // since separate workers can be updating it at the same\n    // time and we can't flush out of sync data\n    await this.loadTagsManifest()\n    if (!tagsManifest || !this.tagsManifestPath) {\n      return\n    }\n\n    for (const tag of tags) {\n      const data = tagsManifest.items[tag] || {}\n      data.revalidatedAt = Date.now()\n      tagsManifest.items[tag] = data\n    }\n\n    try {\n      await this.fs.mkdir(path.dirname(this.tagsManifestPath))\n      await this.fs.writeFile(\n        this.tagsManifestPath,\n        JSON.stringify(tagsManifest || {})\n      )\n      if (this.debug) {\n        console.log('Updated tags manifest', tagsManifest)\n      }\n    } catch (err: any) {\n      console.warn('Failed to update tags manifest.', err)\n    }\n  }\n\n  public async get(...args: Parameters<CacheHandler['get']>) {\n    const [key, ctx] = args\n    const { tags, softTags, kind, isRoutePPREnabled, isFallback } = ctx\n\n    let data = memoryCache?.get(key)\n\n    if (this.debug) {\n      console.log('get', key, tags, kind, !!data)\n    }\n\n    // let's check the disk for seed data\n    if (!data && process.env.NEXT_RUNTIME !== 'edge') {\n      if (kind === IncrementalCacheKind.APP_ROUTE) {\n        try {\n          const filePath = this.getFilePath(\n            `${key}.body`,\n            IncrementalCacheKind.APP_ROUTE\n          )\n          const fileData = await this.fs.readFile(filePath)\n          const { mtime } = await this.fs.stat(filePath)\n\n          const meta = JSON.parse(\n            await this.fs.readFile(\n              filePath.replace(/\\.body$/, NEXT_META_SUFFIX),\n              'utf8'\n            )\n          )\n\n          const cacheEntry: CacheHandlerValue = {\n            lastModified: mtime.getTime(),\n            value: {\n              kind: CachedRouteKind.APP_ROUTE,\n              body: fileData,\n              headers: meta.headers,\n              status: meta.status,\n            },\n          }\n          return cacheEntry\n        } catch {\n          return null\n        }\n      }\n\n      try {\n        const filePath = this.getFilePath(\n          kind === IncrementalCacheKind.FETCH ? key : `${key}.html`,\n          kind\n        )\n\n        const fileData = await this.fs.readFile(filePath, 'utf8')\n        const { mtime } = await this.fs.stat(filePath)\n\n        if (kind === IncrementalCacheKind.FETCH) {\n          if (!this.flushToDisk) return null\n\n          const lastModified = mtime.getTime()\n          const parsedData: CachedFetchValue = JSON.parse(fileData)\n          data = {\n            lastModified,\n            value: parsedData,\n          }\n\n          if (data.value?.kind === CachedRouteKind.FETCH) {\n            const storedTags = data.value?.tags\n\n            // update stored tags if a new one is being added\n            // TODO: remove this when we can send the tags\n            // via header on GET same as SET\n            if (!tags?.every((tag) => storedTags?.includes(tag))) {\n              if (this.debug) {\n                console.log('tags vs storedTags mismatch', tags, storedTags)\n              }\n              await this.set(key, data.value, {\n                tags,\n                isRoutePPREnabled,\n              })\n            }\n          }\n        } else if (kind === IncrementalCacheKind.APP_PAGE) {\n          // We try to load the metadata file, but if it fails, we don't\n          // error. We also don't load it if this is a fallback.\n          let meta: RouteMetadata | undefined\n          try {\n            meta = JSON.parse(\n              await this.fs.readFile(\n                filePath.replace(/\\.html$/, NEXT_META_SUFFIX),\n                'utf8'\n              )\n            )\n          } catch {}\n\n          let rscData: Buffer | undefined\n          if (!isFallback) {\n            rscData = await this.fs.readFile(\n              this.getFilePath(\n                `${key}${isRoutePPREnabled ? RSC_PREFETCH_SUFFIX : RSC_SUFFIX}`,\n                IncrementalCacheKind.APP_PAGE\n              )\n            )\n          }\n\n          data = {\n            lastModified: mtime.getTime(),\n            value: {\n              kind: CachedRouteKind.APP_PAGE,\n              html: fileData,\n              rscData,\n              postponed: meta?.postponed,\n              headers: meta?.headers,\n              status: meta?.status,\n            },\n          }\n        } else if (kind === IncrementalCacheKind.PAGES) {\n          let meta: RouteMetadata | undefined\n          let pageData: string | object = {}\n\n          if (!isFallback) {\n            pageData = JSON.parse(\n              await this.fs.readFile(\n                this.getFilePath(\n                  `${key}${NEXT_DATA_SUFFIX}`,\n                  IncrementalCacheKind.PAGES\n                ),\n                'utf8'\n              )\n            )\n          }\n\n          data = {\n            lastModified: mtime.getTime(),\n            value: {\n              kind: CachedRouteKind.PAGES,\n              html: fileData,\n              pageData,\n              headers: meta?.headers,\n              status: meta?.status,\n            },\n          }\n        } else {\n          throw new Error(\n            `Invariant: Unexpected route kind ${kind} in file system cache.`\n          )\n        }\n\n        if (data) {\n          memoryCache?.set(key, data)\n        }\n      } catch {\n        return null\n      }\n    }\n\n    if (\n      data?.value?.kind === CachedRouteKind.APP_PAGE ||\n      data?.value?.kind === CachedRouteKind.PAGES\n    ) {\n      let cacheTags: undefined | string[]\n      const tagsHeader = data.value.headers?.[NEXT_CACHE_TAGS_HEADER]\n\n      if (typeof tagsHeader === 'string') {\n        cacheTags = tagsHeader.split(',')\n      }\n\n      if (cacheTags?.length) {\n        await this.loadTagsManifest()\n\n        const isStale = cacheTags.some((tag) => {\n          return (\n            tagsManifest?.items[tag]?.revalidatedAt &&\n            tagsManifest?.items[tag].revalidatedAt >=\n              (data?.lastModified || Date.now())\n          )\n        })\n\n        // we trigger a blocking validation if an ISR page\n        // had a tag revalidated, if we want to be a background\n        // revalidation instead we return data.lastModified = -1\n        if (isStale) {\n          return null\n        }\n      }\n    } else if (data?.value?.kind === CachedRouteKind.FETCH) {\n      await this.loadTagsManifest()\n\n      const combinedTags = [...(tags || []), ...(softTags || [])]\n\n      const wasRevalidated = combinedTags.some((tag) => {\n        if (this.revalidatedTags.includes(tag)) {\n          return true\n        }\n\n        return (\n          tagsManifest?.items[tag]?.revalidatedAt &&\n          tagsManifest?.items[tag].revalidatedAt >=\n            (data?.lastModified || Date.now())\n        )\n      })\n      // When revalidate tag is called we don't return\n      // stale data so it's updated right away\n      if (wasRevalidated) {\n        data = undefined\n      }\n    }\n\n    return data ?? null\n  }\n\n  public async set(...args: Parameters<CacheHandler['set']>) {\n    const [key, data, ctx] = args\n    const { isFallback } = ctx\n    memoryCache?.set(key, {\n      value: data,\n      lastModified: Date.now(),\n    })\n\n    if (this.debug) {\n      console.log('set', key)\n    }\n\n    if (!this.flushToDisk || !data) return\n\n    if (data.kind === CachedRouteKind.APP_ROUTE) {\n      const filePath = this.getFilePath(\n        `${key}.body`,\n        IncrementalCacheKind.APP_ROUTE\n      )\n      await this.fs.mkdir(path.dirname(filePath))\n      await this.fs.writeFile(filePath, data.body)\n\n      const meta: RouteMetadata = {\n        headers: data.headers,\n        status: data.status,\n        postponed: undefined,\n      }\n\n      await this.fs.writeFile(\n        filePath.replace(/\\.body$/, NEXT_META_SUFFIX),\n        JSON.stringify(meta, null, 2)\n      )\n    } else if (\n      data.kind === CachedRouteKind.PAGES ||\n      data.kind === CachedRouteKind.APP_PAGE\n    ) {\n      const isAppPath = data.kind === CachedRouteKind.APP_PAGE\n      const htmlPath = this.getFilePath(\n        `${key}.html`,\n        isAppPath ? IncrementalCacheKind.APP_PAGE : IncrementalCacheKind.PAGES\n      )\n      await this.fs.mkdir(path.dirname(htmlPath))\n      await this.fs.writeFile(htmlPath, data.html)\n\n      // Fallbacks don't generate a data file.\n      if (!isFallback) {\n        await this.fs.writeFile(\n          this.getFilePath(\n            `${key}${\n              isAppPath\n                ? ctx.isRoutePPREnabled\n                  ? RSC_PREFETCH_SUFFIX\n                  : RSC_SUFFIX\n                : NEXT_DATA_SUFFIX\n            }`,\n            isAppPath\n              ? IncrementalCacheKind.APP_PAGE\n              : IncrementalCacheKind.PAGES\n          ),\n          isAppPath ? data.rscData : JSON.stringify(data.pageData)\n        )\n      }\n\n      if (data?.kind === CachedRouteKind.APP_PAGE) {\n        const meta: RouteMetadata = {\n          headers: data.headers,\n          status: data.status,\n          postponed: data.postponed,\n        }\n\n        await this.fs.writeFile(\n          htmlPath.replace(/\\.html$/, NEXT_META_SUFFIX),\n          JSON.stringify(meta)\n        )\n      }\n    } else if (data.kind === CachedRouteKind.FETCH) {\n      const filePath = this.getFilePath(key, IncrementalCacheKind.FETCH)\n      await this.fs.mkdir(path.dirname(filePath))\n      await this.fs.writeFile(\n        filePath,\n        JSON.stringify({\n          ...data,\n          tags: ctx.tags,\n        })\n      )\n    }\n  }\n\n  private getFilePath(pathname: string, kind: IncrementalCacheKind): string {\n    switch (kind) {\n      case IncrementalCacheKind.FETCH:\n        // we store in .next/cache/fetch-cache so it can be persisted\n        // across deploys\n        return path.join(\n          this.serverDistDir,\n          '..',\n          'cache',\n          'fetch-cache',\n          pathname\n        )\n      case IncrementalCacheKind.PAGES:\n        return path.join(this.serverDistDir, 'pages', pathname)\n      case IncrementalCacheKind.IMAGE:\n      case IncrementalCacheKind.APP_PAGE:\n      case IncrementalCacheKind.APP_ROUTE:\n        return path.join(this.serverDistDir, 'app', pathname)\n      default:\n        throw new Error(`Unexpected file path kind: ${kind}`)\n    }\n  }\n}\n"],"names":["CachedRouteKind","IncrementalCacheKind","LRUCache","path","NEXT_CACHE_TAGS_HEADER","NEXT_DATA_SUFFIX","NEXT_META_SUFFIX","RSC_PREFETCH_SUFFIX","RSC_SUFFIX","memoryCache","tagsManifest","FileSystemCache","constructor","ctx","fs","flushToDisk","serverDistDir","revalidatedTags","debug","process","env","NEXT_PRIVATE_DEBUG_CACHE","maxMemoryCacheSize","console","log","max","length","value","JSON","kind","REDIRECT","stringify","props","IMAGE","Error","FETCH","data","APP_ROUTE","body","html","APP_PAGE","rscData","pageData","tagsManifestPath","join","loadTagsManifestSync","resetRequestCache","loadTagsManifest","parse","readFile","err","version","items","readFileSync","revalidateTag","args","tags","tag","revalidatedAt","Date","now","mkdir","dirname","writeFile","warn","get","key","softTags","isRoutePPREnabled","isFallback","NEXT_RUNTIME","filePath","getFilePath","fileData","mtime","stat","meta","replace","cacheEntry","lastModified","getTime","headers","status","parsedData","storedTags","every","includes","set","postponed","PAGES","cacheTags","tagsHeader","split","isStale","some","combinedTags","wasRevalidated","undefined","isAppPath","htmlPath","pathname"],"mappings":"AAGA,SACEA,eAAe,EACfC,oBAAoB,QAEf,uBAAsB;AAE7B,OAAOC,cAAc,+BAA8B;AACnD,OAAOC,UAAU,sCAAqC;AACtD,SACEC,sBAAsB,EACtBC,gBAAgB,EAChBC,gBAAgB,EAChBC,mBAAmB,EACnBC,UAAU,QACL,yBAAwB;AAc/B,IAAIC;AACJ,IAAIC;AAEJ,eAAe,MAAMC;IAQnBC,YAAYC,GAA2B,CAAE;QACvC,IAAI,CAACC,EAAE,GAAGD,IAAIC,EAAE;QAChB,IAAI,CAACC,WAAW,GAAGF,IAAIE,WAAW;QAClC,IAAI,CAACC,aAAa,GAAGH,IAAIG,aAAa;QACtC,IAAI,CAACC,eAAe,GAAGJ,IAAII,eAAe;QAC1C,IAAI,CAACC,KAAK,GAAG,CAAC,CAACC,QAAQC,GAAG,CAACC,wBAAwB;QAEnD,IAAIR,IAAIS,kBAAkB,EAAE;YAC1B,IAAI,CAACb,aAAa;gBAChB,IAAI,IAAI,CAACS,KAAK,EAAE;oBACdK,QAAQC,GAAG,CAAC;gBACd;gBAEAf,cAAc,IAAIP,SAAS;oBACzBuB,KAAKZ,IAAIS,kBAAkB;oBAC3BI,QAAO,EAAEC,KAAK,EAAE;4BAeXC;wBAdH,IAAI,CAACD,OAAO;4BACV,OAAO;wBACT,OAAO,IAAIA,MAAME,IAAI,KAAK7B,gBAAgB8B,QAAQ,EAAE;4BAClD,OAAOF,KAAKG,SAAS,CAACJ,MAAMK,KAAK,EAAEN,MAAM;wBAC3C,OAAO,IAAIC,MAAME,IAAI,KAAK7B,gBAAgBiC,KAAK,EAAE;4BAC/C,MAAM,IAAIC,MAAM;wBAClB,OAAO,IAAIP,MAAME,IAAI,KAAK7B,gBAAgBmC,KAAK,EAAE;4BAC/C,OAAOP,KAAKG,SAAS,CAACJ,MAAMS,IAAI,IAAI,IAAIV,MAAM;wBAChD,OAAO,IAAIC,MAAME,IAAI,KAAK7B,gBAAgBqC,SAAS,EAAE;4BACnD,OAAOV,MAAMW,IAAI,CAACZ,MAAM;wBAC1B;wBACA,wCAAwC;wBACxC,OACEC,MAAMY,IAAI,CAACb,MAAM,GAChBE,CAAAA,EAAAA,kBAAAA,KAAKG,SAAS,CACbJ,MAAME,IAAI,KAAK7B,gBAAgBwC,QAAQ,GACnCb,MAAMc,OAAO,GACbd,MAAMe,QAAQ,sBAHnBd,gBAIEF,MAAM,KAAI,CAAA;oBAEjB;gBACF;YACF;QACF,OAAO,IAAI,IAAI,CAACR,KAAK,EAAE;YACrBK,QAAQC,GAAG,CAAC;QACd;QAEA,IAAI,IAAI,CAACR,aAAa,IAAI,IAAI,CAACF,EAAE,EAAE;YACjC,IAAI,CAAC6B,gBAAgB,GAAGxC,KAAKyC,IAAI,CAC/B,IAAI,CAAC5B,aAAa,EAClB,MACA,SACA,eACA;YAGF,IAAI,CAAC6B,oBAAoB;QAC3B;IACF;IAEOC,oBAA0B,CAAC;IAElC;;GAEC,GACD,MAAcC,mBAAmB;QAC/B,IAAI,CAAC,IAAI,CAACJ,gBAAgB,IAAI,CAAC,IAAI,CAAC7B,EAAE,IAAIJ,cAAc;QACxD,IAAI;YACFA,eAAekB,KAAKoB,KAAK,CACvB,MAAM,IAAI,CAAClC,EAAE,CAACmC,QAAQ,CAAC,IAAI,CAACN,gBAAgB,EAAE;QAElD,EAAE,OAAOO,KAAU;YACjBxC,eAAe;gBAAEyC,SAAS;gBAAGC,OAAO,CAAC;YAAE;QACzC;QACA,IAAI,IAAI,CAAClC,KAAK,EAAEK,QAAQC,GAAG,CAAC,oBAAoBd;IAClD;IAEA;;;;GAIC,GACD,AAAQmC,uBAAuB;QAC7B,IAAI,CAAC,IAAI,CAACF,gBAAgB,IAAI,CAAC,IAAI,CAAC7B,EAAE,IAAIJ,cAAc;QACxD,IAAI;YACFA,eAAekB,KAAKoB,KAAK,CACvB,IAAI,CAAClC,EAAE,CAACuC,YAAY,CAAC,IAAI,CAACV,gBAAgB,EAAE;QAEhD,EAAE,OAAOO,KAAU;YACjBxC,eAAe;gBAAEyC,SAAS;gBAAGC,OAAO,CAAC;YAAE;QACzC;QACA,IAAI,IAAI,CAAClC,KAAK,EAAEK,QAAQC,GAAG,CAAC,oBAAoBd;IAClD;IAEA,MAAa4C,cACX,GAAGC,IAA+C,EAClD;QACA,IAAI,CAACC,KAAK,GAAGD;QACbC,OAAO,OAAOA,SAAS,WAAW;YAACA;SAAK,GAAGA;QAE3C,IAAI,IAAI,CAACtC,KAAK,EAAE;YACdK,QAAQC,GAAG,CAAC,iBAAiBgC;QAC/B;QAEA,IAAIA,KAAK9B,MAAM,KAAK,GAAG;YACrB;QACF;QAEA,kDAAkD;QAClD,wDAAwD;QACxD,2CAA2C;QAC3C,MAAM,IAAI,CAACqB,gBAAgB;QAC3B,IAAI,CAACrC,gBAAgB,CAAC,IAAI,CAACiC,gBAAgB,EAAE;YAC3C;QACF;QAEA,KAAK,MAAMc,OAAOD,KAAM;YACtB,MAAMpB,OAAO1B,aAAa0C,KAAK,CAACK,IAAI,IAAI,CAAC;YACzCrB,KAAKsB,aAAa,GAAGC,KAAKC,GAAG;YAC7BlD,aAAa0C,KAAK,CAACK,IAAI,GAAGrB;QAC5B;QAEA,IAAI;YACF,MAAM,IAAI,CAACtB,EAAE,CAAC+C,KAAK,CAAC1D,KAAK2D,OAAO,CAAC,IAAI,CAACnB,gBAAgB;YACtD,MAAM,IAAI,CAAC7B,EAAE,CAACiD,SAAS,CACrB,IAAI,CAACpB,gBAAgB,EACrBf,KAAKG,SAAS,CAACrB,gBAAgB,CAAC;YAElC,IAAI,IAAI,CAACQ,KAAK,EAAE;gBACdK,QAAQC,GAAG,CAAC,yBAAyBd;YACvC;QACF,EAAE,OAAOwC,KAAU;YACjB3B,QAAQyC,IAAI,CAAC,mCAAmCd;QAClD;IACF;IAEA,MAAae,IAAI,GAAGV,IAAqC,EAAE;YAyJvDnB,aACAA,cA2BSA;QApLX,MAAM,CAAC8B,KAAKrD,IAAI,GAAG0C;QACnB,MAAM,EAAEC,IAAI,EAAEW,QAAQ,EAAEtC,IAAI,EAAEuC,iBAAiB,EAAEC,UAAU,EAAE,GAAGxD;QAEhE,IAAIuB,OAAO3B,+BAAAA,YAAawD,GAAG,CAACC;QAE5B,IAAI,IAAI,CAAChD,KAAK,EAAE;YACdK,QAAQC,GAAG,CAAC,OAAO0C,KAAKV,MAAM3B,MAAM,CAAC,CAACO;QACxC;QAEA,qCAAqC;QACrC,IAAI,CAACA,QAAQjB,QAAQC,GAAG,CAACkD,YAAY,KAAK,QAAQ;YAChD,IAAIzC,SAAS5B,qBAAqBoC,SAAS,EAAE;gBAC3C,IAAI;oBACF,MAAMkC,WAAW,IAAI,CAACC,WAAW,CAC/B,CAAC,EAAEN,IAAI,KAAK,CAAC,EACbjE,qBAAqBoC,SAAS;oBAEhC,MAAMoC,WAAW,MAAM,IAAI,CAAC3D,EAAE,CAACmC,QAAQ,CAACsB;oBACxC,MAAM,EAAEG,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC5D,EAAE,CAAC6D,IAAI,CAACJ;oBAErC,MAAMK,OAAOhD,KAAKoB,KAAK,CACrB,MAAM,IAAI,CAAClC,EAAE,CAACmC,QAAQ,CACpBsB,SAASM,OAAO,CAAC,WAAWvE,mBAC5B;oBAIJ,MAAMwE,aAAgC;wBACpCC,cAAcL,MAAMM,OAAO;wBAC3BrD,OAAO;4BACLE,MAAM7B,gBAAgBqC,SAAS;4BAC/BC,MAAMmC;4BACNQ,SAASL,KAAKK,OAAO;4BACrBC,QAAQN,KAAKM,MAAM;wBACrB;oBACF;oBACA,OAAOJ;gBACT,EAAE,OAAM;oBACN,OAAO;gBACT;YACF;YAEA,IAAI;gBACF,MAAMP,WAAW,IAAI,CAACC,WAAW,CAC/B3C,SAAS5B,qBAAqBkC,KAAK,GAAG+B,MAAM,CAAC,EAAEA,IAAI,KAAK,CAAC,EACzDrC;gBAGF,MAAM4C,WAAW,MAAM,IAAI,CAAC3D,EAAE,CAACmC,QAAQ,CAACsB,UAAU;gBAClD,MAAM,EAAEG,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC5D,EAAE,CAAC6D,IAAI,CAACJ;gBAErC,IAAI1C,SAAS5B,qBAAqBkC,KAAK,EAAE;wBAUnCC;oBATJ,IAAI,CAAC,IAAI,CAACrB,WAAW,EAAE,OAAO;oBAE9B,MAAMgE,eAAeL,MAAMM,OAAO;oBAClC,MAAMG,aAA+BvD,KAAKoB,KAAK,CAACyB;oBAChDrC,OAAO;wBACL2C;wBACApD,OAAOwD;oBACT;oBAEA,IAAI/C,EAAAA,eAAAA,KAAKT,KAAK,qBAAVS,aAAYP,IAAI,MAAK7B,gBAAgBmC,KAAK,EAAE;4BAC3BC;wBAAnB,MAAMgD,cAAahD,eAAAA,KAAKT,KAAK,qBAAVS,aAAYoB,IAAI;wBAEnC,iDAAiD;wBACjD,8CAA8C;wBAC9C,gCAAgC;wBAChC,IAAI,EAACA,wBAAAA,KAAM6B,KAAK,CAAC,CAAC5B,MAAQ2B,8BAAAA,WAAYE,QAAQ,CAAC7B,QAAO;4BACpD,IAAI,IAAI,CAACvC,KAAK,EAAE;gCACdK,QAAQC,GAAG,CAAC,+BAA+BgC,MAAM4B;4BACnD;4BACA,MAAM,IAAI,CAACG,GAAG,CAACrB,KAAK9B,KAAKT,KAAK,EAAE;gCAC9B6B;gCACAY;4BACF;wBACF;oBACF;gBACF,OAAO,IAAIvC,SAAS5B,qBAAqBuC,QAAQ,EAAE;oBACjD,8DAA8D;oBAC9D,sDAAsD;oBACtD,IAAIoC;oBACJ,IAAI;wBACFA,OAAOhD,KAAKoB,KAAK,CACf,MAAM,IAAI,CAAClC,EAAE,CAACmC,QAAQ,CACpBsB,SAASM,OAAO,CAAC,WAAWvE,mBAC5B;oBAGN,EAAE,OAAM,CAAC;oBAET,IAAImC;oBACJ,IAAI,CAAC4B,YAAY;wBACf5B,UAAU,MAAM,IAAI,CAAC3B,EAAE,CAACmC,QAAQ,CAC9B,IAAI,CAACuB,WAAW,CACd,CAAC,EAAEN,IAAI,EAAEE,oBAAoB7D,sBAAsBC,WAAW,CAAC,EAC/DP,qBAAqBuC,QAAQ;oBAGnC;oBAEAJ,OAAO;wBACL2C,cAAcL,MAAMM,OAAO;wBAC3BrD,OAAO;4BACLE,MAAM7B,gBAAgBwC,QAAQ;4BAC9BD,MAAMkC;4BACNhC;4BACA+C,SAAS,EAAEZ,wBAAAA,KAAMY,SAAS;4BAC1BP,OAAO,EAAEL,wBAAAA,KAAMK,OAAO;4BACtBC,MAAM,EAAEN,wBAAAA,KAAMM,MAAM;wBACtB;oBACF;gBACF,OAAO,IAAIrD,SAAS5B,qBAAqBwF,KAAK,EAAE;oBAC9C,IAAIb;oBACJ,IAAIlC,WAA4B,CAAC;oBAEjC,IAAI,CAAC2B,YAAY;wBACf3B,WAAWd,KAAKoB,KAAK,CACnB,MAAM,IAAI,CAAClC,EAAE,CAACmC,QAAQ,CACpB,IAAI,CAACuB,WAAW,CACd,CAAC,EAAEN,IAAI,EAAE7D,iBAAiB,CAAC,EAC3BJ,qBAAqBwF,KAAK,GAE5B;oBAGN;oBAEArD,OAAO;wBACL2C,cAAcL,MAAMM,OAAO;wBAC3BrD,OAAO;4BACLE,MAAM7B,gBAAgByF,KAAK;4BAC3BlD,MAAMkC;4BACN/B;4BACAuC,OAAO,EAAEL,wBAAAA,KAAMK,OAAO;4BACtBC,MAAM,EAAEN,wBAAAA,KAAMM,MAAM;wBACtB;oBACF;gBACF,OAAO;oBACL,MAAM,IAAIhD,MACR,CAAC,iCAAiC,EAAEL,KAAK,sBAAsB,CAAC;gBAEpE;gBAEA,IAAIO,MAAM;oBACR3B,+BAAAA,YAAa8E,GAAG,CAACrB,KAAK9B;gBACxB;YACF,EAAE,OAAM;gBACN,OAAO;YACT;QACF;QAEA,IACEA,CAAAA,yBAAAA,cAAAA,KAAMT,KAAK,qBAAXS,YAAaP,IAAI,MAAK7B,gBAAgBwC,QAAQ,IAC9CJ,CAAAA,yBAAAA,eAAAA,KAAMT,KAAK,qBAAXS,aAAaP,IAAI,MAAK7B,gBAAgByF,KAAK,EAC3C;gBAEmBrD;YADnB,IAAIsD;YACJ,MAAMC,cAAavD,sBAAAA,KAAKT,KAAK,CAACsD,OAAO,qBAAlB7C,mBAAoB,CAAChC,uBAAuB;YAE/D,IAAI,OAAOuF,eAAe,UAAU;gBAClCD,YAAYC,WAAWC,KAAK,CAAC;YAC/B;YAEA,IAAIF,6BAAAA,UAAWhE,MAAM,EAAE;gBACrB,MAAM,IAAI,CAACqB,gBAAgB;gBAE3B,MAAM8C,UAAUH,UAAUI,IAAI,CAAC,CAACrC;wBAE5B/C;oBADF,OACEA,CAAAA,iCAAAA,0BAAAA,aAAc0C,KAAK,CAACK,IAAI,qBAAxB/C,wBAA0BgD,aAAa,KACvChD,CAAAA,gCAAAA,aAAc0C,KAAK,CAACK,IAAI,CAACC,aAAa,KACnCtB,CAAAA,CAAAA,wBAAAA,KAAM2C,YAAY,KAAIpB,KAAKC,GAAG,EAAC;gBAEtC;gBAEA,kDAAkD;gBAClD,uDAAuD;gBACvD,wDAAwD;gBACxD,IAAIiC,SAAS;oBACX,OAAO;gBACT;YACF;QACF,OAAO,IAAIzD,CAAAA,yBAAAA,eAAAA,KAAMT,KAAK,qBAAXS,aAAaP,IAAI,MAAK7B,gBAAgBmC,KAAK,EAAE;YACtD,MAAM,IAAI,CAACY,gBAAgB;YAE3B,MAAMgD,eAAe;mBAAKvC,QAAQ,EAAE;mBAAOW,YAAY,EAAE;aAAE;YAE3D,MAAM6B,iBAAiBD,aAAaD,IAAI,CAAC,CAACrC;oBAMtC/C;gBALF,IAAI,IAAI,CAACO,eAAe,CAACqE,QAAQ,CAAC7B,MAAM;oBACtC,OAAO;gBACT;gBAEA,OACE/C,CAAAA,iCAAAA,0BAAAA,aAAc0C,KAAK,CAACK,IAAI,qBAAxB/C,wBAA0BgD,aAAa,KACvChD,CAAAA,gCAAAA,aAAc0C,KAAK,CAACK,IAAI,CAACC,aAAa,KACnCtB,CAAAA,CAAAA,wBAAAA,KAAM2C,YAAY,KAAIpB,KAAKC,GAAG,EAAC;YAEtC;YACA,gDAAgD;YAChD,wCAAwC;YACxC,IAAIoC,gBAAgB;gBAClB5D,OAAO6D;YACT;QACF;QAEA,OAAO7D,QAAQ;IACjB;IAEA,MAAamD,IAAI,GAAGhC,IAAqC,EAAE;QACzD,MAAM,CAACW,KAAK9B,MAAMvB,IAAI,GAAG0C;QACzB,MAAM,EAAEc,UAAU,EAAE,GAAGxD;QACvBJ,+BAAAA,YAAa8E,GAAG,CAACrB,KAAK;YACpBvC,OAAOS;YACP2C,cAAcpB,KAAKC,GAAG;QACxB;QAEA,IAAI,IAAI,CAAC1C,KAAK,EAAE;YACdK,QAAQC,GAAG,CAAC,OAAO0C;QACrB;QAEA,IAAI,CAAC,IAAI,CAACnD,WAAW,IAAI,CAACqB,MAAM;QAEhC,IAAIA,KAAKP,IAAI,KAAK7B,gBAAgBqC,SAAS,EAAE;YAC3C,MAAMkC,WAAW,IAAI,CAACC,WAAW,CAC/B,CAAC,EAAEN,IAAI,KAAK,CAAC,EACbjE,qBAAqBoC,SAAS;YAEhC,MAAM,IAAI,CAACvB,EAAE,CAAC+C,KAAK,CAAC1D,KAAK2D,OAAO,CAACS;YACjC,MAAM,IAAI,CAACzD,EAAE,CAACiD,SAAS,CAACQ,UAAUnC,KAAKE,IAAI;YAE3C,MAAMsC,OAAsB;gBAC1BK,SAAS7C,KAAK6C,OAAO;gBACrBC,QAAQ9C,KAAK8C,MAAM;gBACnBM,WAAWS;YACb;YAEA,MAAM,IAAI,CAACnF,EAAE,CAACiD,SAAS,CACrBQ,SAASM,OAAO,CAAC,WAAWvE,mBAC5BsB,KAAKG,SAAS,CAAC6C,MAAM,MAAM;QAE/B,OAAO,IACLxC,KAAKP,IAAI,KAAK7B,gBAAgByF,KAAK,IACnCrD,KAAKP,IAAI,KAAK7B,gBAAgBwC,QAAQ,EACtC;YACA,MAAM0D,YAAY9D,KAAKP,IAAI,KAAK7B,gBAAgBwC,QAAQ;YACxD,MAAM2D,WAAW,IAAI,CAAC3B,WAAW,CAC/B,CAAC,EAAEN,IAAI,KAAK,CAAC,EACbgC,YAAYjG,qBAAqBuC,QAAQ,GAAGvC,qBAAqBwF,KAAK;YAExE,MAAM,IAAI,CAAC3E,EAAE,CAAC+C,KAAK,CAAC1D,KAAK2D,OAAO,CAACqC;YACjC,MAAM,IAAI,CAACrF,EAAE,CAACiD,SAAS,CAACoC,UAAU/D,KAAKG,IAAI;YAE3C,wCAAwC;YACxC,IAAI,CAAC8B,YAAY;gBACf,MAAM,IAAI,CAACvD,EAAE,CAACiD,SAAS,CACrB,IAAI,CAACS,WAAW,CACd,CAAC,EAAEN,IAAI,EACLgC,YACIrF,IAAIuD,iBAAiB,GACnB7D,sBACAC,aACFH,iBACL,CAAC,EACF6F,YACIjG,qBAAqBuC,QAAQ,GAC7BvC,qBAAqBwF,KAAK,GAEhCS,YAAY9D,KAAKK,OAAO,GAAGb,KAAKG,SAAS,CAACK,KAAKM,QAAQ;YAE3D;YAEA,IAAIN,CAAAA,wBAAAA,KAAMP,IAAI,MAAK7B,gBAAgBwC,QAAQ,EAAE;gBAC3C,MAAMoC,OAAsB;oBAC1BK,SAAS7C,KAAK6C,OAAO;oBACrBC,QAAQ9C,KAAK8C,MAAM;oBACnBM,WAAWpD,KAAKoD,SAAS;gBAC3B;gBAEA,MAAM,IAAI,CAAC1E,EAAE,CAACiD,SAAS,CACrBoC,SAAStB,OAAO,CAAC,WAAWvE,mBAC5BsB,KAAKG,SAAS,CAAC6C;YAEnB;QACF,OAAO,IAAIxC,KAAKP,IAAI,KAAK7B,gBAAgBmC,KAAK,EAAE;YAC9C,MAAMoC,WAAW,IAAI,CAACC,WAAW,CAACN,KAAKjE,qBAAqBkC,KAAK;YACjE,MAAM,IAAI,CAACrB,EAAE,CAAC+C,KAAK,CAAC1D,KAAK2D,OAAO,CAACS;YACjC,MAAM,IAAI,CAACzD,EAAE,CAACiD,SAAS,CACrBQ,UACA3C,KAAKG,SAAS,CAAC;gBACb,GAAGK,IAAI;gBACPoB,MAAM3C,IAAI2C,IAAI;YAChB;QAEJ;IACF;IAEQgB,YAAY4B,QAAgB,EAAEvE,IAA0B,EAAU;QACxE,OAAQA;YACN,KAAK5B,qBAAqBkC,KAAK;gBAC7B,6DAA6D;gBAC7D,iBAAiB;gBACjB,OAAOhC,KAAKyC,IAAI,CACd,IAAI,CAAC5B,aAAa,EAClB,MACA,SACA,eACAoF;YAEJ,KAAKnG,qBAAqBwF,KAAK;gBAC7B,OAAOtF,KAAKyC,IAAI,CAAC,IAAI,CAAC5B,aAAa,EAAE,SAASoF;YAChD,KAAKnG,qBAAqBgC,KAAK;YAC/B,KAAKhC,qBAAqBuC,QAAQ;YAClC,KAAKvC,qBAAqBoC,SAAS;gBACjC,OAAOlC,KAAKyC,IAAI,CAAC,IAAI,CAAC5B,aAAa,EAAE,OAAOoF;YAC9C;gBACE,MAAM,IAAIlE,MAAM,CAAC,2BAA2B,EAAEL,KAAK,CAAC;QACxD;IACF;AACF"}