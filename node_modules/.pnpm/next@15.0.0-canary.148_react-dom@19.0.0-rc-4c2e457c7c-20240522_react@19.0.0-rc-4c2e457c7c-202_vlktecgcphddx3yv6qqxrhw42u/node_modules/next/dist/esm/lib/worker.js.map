{"version":3,"sources":["../../src/lib/worker.ts"],"sourcesContent":["import type { ChildProcess } from 'child_process'\nimport { Worker as JestWorker } from 'next/dist/compiled/jest-worker'\nimport {\n  getParsedNodeOptionsWithoutInspect,\n  formatNodeOptions,\n} from '../server/lib/utils'\ntype FarmOptions = ConstructorParameters<typeof JestWorker>[1]\n\nconst RESTARTED = Symbol('restarted')\n\nconst cleanupWorkers = (worker: JestWorker) => {\n  for (const curWorker of ((worker as any)._workerPool?._workers || []) as {\n    _child?: ChildProcess\n  }[]) {\n    curWorker._child?.kill('SIGINT')\n  }\n}\n\nexport class Worker {\n  private _worker: JestWorker | undefined\n\n  constructor(\n    workerPath: string,\n    options: FarmOptions & {\n      timeout?: number\n      onActivity?: () => void\n      onRestart?: (method: string, args: any[], attempts: number) => void\n      logger?: Pick<typeof console, 'error' | 'info' | 'warn'>\n      exposedMethods: ReadonlyArray<string>\n      enableWorkerThreads?: boolean\n    }\n  ) {\n    let { timeout, onRestart, logger = console, ...farmOptions } = options\n\n    let restartPromise: Promise<typeof RESTARTED>\n    let resolveRestartPromise: (arg: typeof RESTARTED) => void\n    let activeTasks = 0\n\n    this._worker = undefined\n\n    const createWorker = () => {\n      // Get the node options without inspect and also remove the\n      // --max-old-space-size flag as it can cause memory issues.\n      const nodeOptions = getParsedNodeOptionsWithoutInspect()\n      delete nodeOptions['max-old-space-size']\n      delete nodeOptions['max_old_space_size']\n\n      this._worker = new JestWorker(workerPath, {\n        ...farmOptions,\n        forkOptions: {\n          ...farmOptions.forkOptions,\n          env: {\n            ...((farmOptions.forkOptions?.env || {}) as any),\n            ...process.env,\n            NODE_OPTIONS: formatNodeOptions(nodeOptions),\n          } as any,\n        },\n        maxRetries: 0,\n      }) as JestWorker\n      restartPromise = new Promise(\n        (resolve) => (resolveRestartPromise = resolve)\n      )\n\n      /**\n       * Jest Worker has two worker types, ChildProcessWorker (uses child_process) and NodeThreadWorker (uses worker_threads)\n       * Next.js uses ChildProcessWorker by default, but it can be switched to NodeThreadWorker with an experimental flag\n       *\n       * We only want to handle ChildProcessWorker's orphan process issue, so we access the private property \"_child\":\n       * https://github.com/facebook/jest/blob/b38d7d345a81d97d1dc3b68b8458b1837fbf19be/packages/jest-worker/src/workers/ChildProcessWorker.ts\n       *\n       * But this property is not available in NodeThreadWorker, so we need to check if we are using ChildProcessWorker\n       */\n      if (!farmOptions.enableWorkerThreads) {\n        for (const worker of ((this._worker as any)._workerPool?._workers ||\n          []) as {\n          _child?: ChildProcess\n        }[]) {\n          worker._child?.on('exit', (code, signal) => {\n            if ((code || (signal && signal !== 'SIGINT')) && this._worker) {\n              logger.error(\n                `Static worker exited with code: ${code} and signal: ${signal}`\n              )\n            }\n          })\n\n          // if a child process emits a particular message, we track that as activity\n          // so the parent process can keep track of progress\n          worker._child?.on('message', ([, data]: [number, unknown]) => {\n            if (\n              data &&\n              typeof data === 'object' &&\n              'type' in data &&\n              data.type === 'activity'\n            ) {\n              onActivity()\n            }\n          })\n        }\n      }\n\n      this._worker.getStdout().pipe(process.stdout)\n      this._worker.getStderr().pipe(process.stderr)\n    }\n    createWorker()\n\n    const onHanging = () => {\n      const worker = this._worker\n      if (!worker) return\n      const resolve = resolveRestartPromise\n      createWorker()\n      logger.warn(\n        `Sending SIGTERM signal to static worker due to timeout${\n          timeout ? ` of ${timeout / 1000} seconds` : ''\n        }. Subsequent errors may be a result of the worker exiting.`\n      )\n      worker.end().then(() => {\n        resolve(RESTARTED)\n      })\n    }\n\n    let hangingTimer: NodeJS.Timeout | false = false\n\n    const onActivity = () => {\n      if (hangingTimer) clearTimeout(hangingTimer)\n      if (options.onActivity) options.onActivity()\n\n      hangingTimer = activeTasks > 0 && setTimeout(onHanging, timeout)\n    }\n\n    for (const method of farmOptions.exposedMethods) {\n      if (method.startsWith('_')) continue\n      ;(this as any)[method] = timeout\n        ? // eslint-disable-next-line no-loop-func\n          async (...args: any[]) => {\n            activeTasks++\n            try {\n              let attempts = 0\n              for (;;) {\n                onActivity()\n                const result = await Promise.race([\n                  (this._worker as any)[method](...args),\n                  restartPromise,\n                ])\n                if (result !== RESTARTED) return result\n                if (onRestart) onRestart(method, args, ++attempts)\n              }\n            } finally {\n              activeTasks--\n              onActivity()\n            }\n          }\n        : (this._worker as any)[method].bind(this._worker)\n    }\n  }\n\n  end(): ReturnType<JestWorker['end']> {\n    const worker = this._worker\n    if (!worker) {\n      throw new Error('Farm is ended, no more calls can be done to it')\n    }\n    cleanupWorkers(worker)\n    this._worker = undefined\n    return worker.end()\n  }\n\n  /**\n   * Quietly end the worker if it exists\n   */\n  close(): void {\n    if (this._worker) {\n      cleanupWorkers(this._worker)\n      this._worker.end()\n    }\n  }\n}\n"],"names":["Worker","JestWorker","getParsedNodeOptionsWithoutInspect","formatNodeOptions","RESTARTED","Symbol","cleanupWorkers","worker","curWorker","_workerPool","_workers","_child","kill","constructor","workerPath","options","timeout","onRestart","logger","console","farmOptions","restartPromise","resolveRestartPromise","activeTasks","_worker","undefined","createWorker","nodeOptions","forkOptions","env","process","NODE_OPTIONS","maxRetries","Promise","resolve","enableWorkerThreads","on","code","signal","error","data","type","onActivity","getStdout","pipe","stdout","getStderr","stderr","onHanging","warn","end","then","hangingTimer","clearTimeout","setTimeout","method","exposedMethods","startsWith","args","attempts","result","race","bind","Error","close"],"mappings":"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"}