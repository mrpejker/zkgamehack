import { useMemo } from 'react';
export function useMergedRef(refA, refB) {
    return useMemo(()=>mergeRefs(refA, refB), [
        refA,
        refB
    ]);
}
export function mergeRefs(refA, refB) {
    if (!refA || !refB) {
        return refA || refB;
    }
    return (current)=>{
        const cleanupA = applyRef(refA, current);
        const cleanupB = applyRef(refB, current);
        return ()=>{
            cleanupA();
            cleanupB();
        };
    };
}
function applyRef(refA, current) {
    if (typeof refA === 'function') {
        const cleanup = refA(current);
        if (typeof cleanup === 'function') {
            return cleanup;
        } else {
            return ()=>refA(null);
        }
    } else {
        refA.current = current;
        return ()=>{
            refA.current = null;
        };
    }
}

//# sourceMappingURL=use-merged-ref.js.map