{"version":3,"sources":["../../../../../../src/client/components/react-dev-overlay/internal/helpers/hydration-error-info.ts"],"sourcesContent":["import { getHydrationErrorStackInfo } from '../../../is-hydration-error'\n\nexport type HydrationErrorState = {\n  // Hydration warning template format: <message> <serverContent> <clientContent>\n  warning?: [string, string, string]\n  componentStack?: string\n  serverContent?: string\n  clientContent?: string\n  // React 19 hydration diff format: <notes> <link> <component diff?>\n  notes?: string\n  reactOutputComponentDiff?: string\n}\n\ntype NullableText = string | null | undefined\n\nexport const hydrationErrorState: HydrationErrorState = {}\n\n// https://github.com/facebook/react/blob/main/packages/react-dom/src/__tests__/ReactDOMHydrationDiff-test.js used as a reference\nconst htmlTagsWarnings = new Set([\n  'In HTML, %s cannot be a child of <%s>.%s\\nThis will cause a hydration error.%s',\n  'In HTML, %s cannot be a descendant of <%s>.\\nThis will cause a hydration error.%s',\n  'In HTML, text nodes cannot be a child of <%s>.\\nThis will cause a hydration error.',\n  \"In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\\nThis will cause a hydration error.\",\n])\n\nexport const getHydrationWarningType = (msg: NullableText): 'tag' | 'text' => {\n  if (isHtmlTagsWarning(msg)) return 'tag'\n  return 'text'\n}\n\nconst isHtmlTagsWarning = (msg: NullableText) =>\n  Boolean(msg && htmlTagsWarnings.has(msg))\n\nconst isKnownHydrationWarning = (msg: NullableText) => isHtmlTagsWarning(msg)\n\nexport const getReactHydrationDiffSegments = (msg: NullableText) => {\n  if (msg) {\n    const { message, diff } = getHydrationErrorStackInfo(msg)\n    if (message) return [message, diff]\n  }\n  return undefined\n}\n\n/**\n * Patch console.error to capture hydration errors.\n * If any of the knownHydrationWarnings are logged, store the message and component stack.\n * When the hydration runtime error is thrown, the message and component stack are added to the error.\n * This results in a more helpful error message in the error overlay.\n */\n\nexport function storeHydrationErrorStateFromConsoleArgs(...args: any[]) {\n  const [msg, serverContent, clientContent, componentStack] = args\n  if (isKnownHydrationWarning(msg)) {\n    hydrationErrorState.warning = [\n      // remove the last %s from the message\n      msg,\n      serverContent,\n      clientContent,\n    ]\n    hydrationErrorState.componentStack = componentStack\n    hydrationErrorState.serverContent = serverContent\n    hydrationErrorState.clientContent = clientContent\n  }\n}\n"],"names":["getHydrationErrorStackInfo","hydrationErrorState","htmlTagsWarnings","Set","getHydrationWarningType","msg","isHtmlTagsWarning","Boolean","has","isKnownHydrationWarning","getReactHydrationDiffSegments","message","diff","undefined","storeHydrationErrorStateFromConsoleArgs","args","serverContent","clientContent","componentStack","warning"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,8BAA6B;AAexE,OAAO,MAAMC,sBAA2C,CAAC,EAAC;AAE1D,iIAAiI;AACjI,MAAMC,mBAAmB,IAAIC,IAAI;IAC/B;IACA;IACA;IACA;CACD;AAED,OAAO,MAAMC,0BAA0B,CAACC;IACtC,IAAIC,kBAAkBD,MAAM,OAAO;IACnC,OAAO;AACT,EAAC;AAED,MAAMC,oBAAoB,CAACD,MACzBE,QAAQF,OAAOH,iBAAiBM,GAAG,CAACH;AAEtC,MAAMI,0BAA0B,CAACJ,MAAsBC,kBAAkBD;AAEzE,OAAO,MAAMK,gCAAgC,CAACL;IAC5C,IAAIA,KAAK;QACP,MAAM,EAAEM,OAAO,EAAEC,IAAI,EAAE,GAAGZ,2BAA2BK;QACrD,IAAIM,SAAS,OAAO;YAACA;YAASC;SAAK;IACrC;IACA,OAAOC;AACT,EAAC;AAED;;;;;CAKC,GAED,OAAO,SAASC;IAAwC,IAAA,IAAA,OAAA,UAAA,QAAA,AAAGC,OAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAGA,KAAH,QAAA,SAAA,CAAA,KAAc;;IACpE,MAAM,CAACV,KAAKW,eAAeC,eAAeC,eAAe,GAAGH;IAC5D,IAAIN,wBAAwBJ,MAAM;QAChCJ,oBAAoBkB,OAAO,GAAG;YAC5B,sCAAsC;YACtCd;YACAW;YACAC;SACD;QACDhB,oBAAoBiB,cAAc,GAAGA;QACrCjB,oBAAoBe,aAAa,GAAGA;QACpCf,oBAAoBgB,aAAa,GAAGA;IACtC;AACF"}