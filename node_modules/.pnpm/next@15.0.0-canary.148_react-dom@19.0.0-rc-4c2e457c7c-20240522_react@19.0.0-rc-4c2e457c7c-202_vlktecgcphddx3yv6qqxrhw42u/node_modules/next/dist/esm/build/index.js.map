{"version":3,"sources":["../../src/build/index.ts"],"sourcesContent":["import type { AppBuildManifest } from './webpack/plugins/app-build-manifest-plugin'\nimport type { PagesManifest } from './webpack/plugins/pages-manifest-plugin'\nimport type { ExportPathMap, NextConfigComplete } from '../server/config-shared'\nimport type { MiddlewareManifest } from './webpack/plugins/middleware-plugin'\nimport type { ActionManifest } from './webpack/plugins/flight-client-entry-plugin'\nimport type { ExportAppOptions } from '../export/types'\nimport type { Revalidate } from '../server/lib/revalidate'\n\nimport '../lib/setup-exception-listeners'\n\nimport { loadEnvConfig, type LoadedEnvFiles } from '@next/env'\nimport { bold, yellow } from '../lib/picocolors'\nimport crypto from 'crypto'\nimport { makeRe } from 'next/dist/compiled/picomatch'\nimport { existsSync, promises as fs } from 'fs'\nimport os from 'os'\nimport { Worker } from '../lib/worker'\nimport { defaultConfig } from '../server/config-shared'\nimport devalue from 'next/dist/compiled/devalue'\nimport findUp from 'next/dist/compiled/find-up'\nimport { nanoid } from 'next/dist/compiled/nanoid/index.cjs'\nimport { Sema } from 'next/dist/compiled/async-sema'\nimport path from 'path'\nimport {\n  STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR,\n  PUBLIC_DIR_MIDDLEWARE_CONFLICT,\n  MIDDLEWARE_FILENAME,\n  PAGES_DIR_ALIAS,\n  INSTRUMENTATION_HOOK_FILENAME,\n  RSC_PREFETCH_SUFFIX,\n  RSC_SUFFIX,\n  NEXT_RESUME_HEADER,\n} from '../lib/constants'\nimport { FileType, fileExists } from '../lib/file-exists'\nimport { findPagesDir } from '../lib/find-pages-dir'\nimport loadCustomRoutes, {\n  normalizeRouteRegex,\n} from '../lib/load-custom-routes'\nimport type {\n  CustomRoutes,\n  Header,\n  Redirect,\n  Rewrite,\n  RouteHas,\n} from '../lib/load-custom-routes'\nimport { nonNullable } from '../lib/non-nullable'\nimport { recursiveDelete } from '../lib/recursive-delete'\nimport { verifyPartytownSetup } from '../lib/verify-partytown-setup'\nimport { validateTurboNextConfig } from '../lib/turbopack-warning'\nimport {\n  BUILD_ID_FILE,\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  EXPORT_DETAIL,\n  EXPORT_MARKER,\n  IMAGES_MANIFEST,\n  PAGES_MANIFEST,\n  PHASE_PRODUCTION_BUILD,\n  PRERENDER_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n  ROUTES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVER_FILES_MANIFEST,\n  STATIC_STATUS_PAGES,\n  MIDDLEWARE_MANIFEST,\n  APP_PATHS_MANIFEST,\n  APP_PATH_ROUTES_MANIFEST,\n  APP_BUILD_MANIFEST,\n  RSC_MODULE_TYPES,\n  NEXT_FONT_MANIFEST,\n  SUBRESOURCE_INTEGRITY_MANIFEST,\n  MIDDLEWARE_BUILD_MANIFEST,\n  MIDDLEWARE_REACT_LOADABLE_MANIFEST,\n  SERVER_REFERENCE_MANIFEST,\n  FUNCTIONS_CONFIG_MANIFEST,\n  UNDERSCORE_NOT_FOUND_ROUTE_ENTRY,\n  UNDERSCORE_NOT_FOUND_ROUTE,\n} from '../shared/lib/constants'\nimport {\n  getSortedRoutes,\n  isDynamicRoute,\n  getSortedRouteObjects,\n} from '../shared/lib/router/utils'\nimport type { __ApiPreviewProps } from '../server/api-utils'\nimport loadConfig from '../server/config'\nimport type { BuildManifest } from '../server/get-page-files'\nimport { normalizePagePath } from '../shared/lib/page-path/normalize-page-path'\nimport { getPagePath } from '../server/require'\nimport * as ciEnvironment from '../telemetry/ci-info'\nimport {\n  turborepoTraceAccess,\n  TurborepoAccessTraceResult,\n  writeTurborepoAccessTraceResult,\n} from './turborepo-access-trace'\n\nimport {\n  eventBuildOptimize,\n  eventCliSession,\n  eventBuildFeatureUsage,\n  eventNextPlugins,\n  EVENT_BUILD_FEATURE_USAGE,\n  eventPackageUsedInGetServerSideProps,\n  eventBuildCompleted,\n} from '../telemetry/events'\nimport type { EventBuildFeatureUsage } from '../telemetry/events'\nimport { Telemetry } from '../telemetry/storage'\nimport { hadUnsupportedValue } from './analysis/get-page-static-info'\nimport {\n  createPagesMapping,\n  getPageFromPath,\n  getStaticInfoIncludingLayouts,\n  sortByPageExts,\n} from './entries'\nimport { PAGE_TYPES } from '../lib/page-types'\nimport { generateBuildId } from './generate-build-id'\nimport { isWriteable } from './is-writeable'\nimport * as Log from './output/log'\nimport createSpinner from './spinner'\nimport { trace, flushAllTraces, setGlobal, type Span } from '../trace'\nimport {\n  detectConflictingPaths,\n  computeFromManifest,\n  getJsPageSizeInKb,\n  printCustomRoutes,\n  printTreeView,\n  copyTracedFiles,\n  isReservedPage,\n  isAppBuiltinNotFoundPage,\n  collectRoutesUsingEdgeRuntime,\n  collectMeta,\n  // getSupportedBrowsers,\n} from './utils'\nimport type { PageInfo, PageInfos, AppConfig, PrerenderedRoute } from './utils'\nimport { writeBuildId } from './write-build-id'\nimport { normalizeLocalePath } from '../shared/lib/i18n/normalize-locale-path'\nimport isError from '../lib/is-error'\nimport type { NextError } from '../lib/is-error'\nimport { isEdgeRuntime } from '../lib/is-edge-runtime'\nimport { recursiveCopy } from '../lib/recursive-copy'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport {\n  loadBindings,\n  lockfilePatchPromise,\n  teardownTraceSubscriber,\n  teardownHeapProfiler,\n  createDefineEnv,\n} from './swc'\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex'\nimport { getFilesInDir } from '../lib/get-files-in-dir'\nimport { eventSwcPlugins } from '../telemetry/events/swc-plugins'\nimport { normalizeAppPath } from '../shared/lib/router/utils/app-paths'\nimport {\n  ACTION_HEADER,\n  NEXT_ROUTER_PREFETCH_HEADER,\n  RSC_HEADER,\n  RSC_CONTENT_TYPE_HEADER,\n  NEXT_ROUTER_STATE_TREE_HEADER,\n  NEXT_DID_POSTPONE_HEADER,\n} from '../client/components/app-router-headers'\nimport { webpackBuild } from './webpack-build'\nimport { NextBuildContext, type MappedPages } from './build-context'\nimport { normalizePathSep } from '../shared/lib/page-path/normalize-path-sep'\nimport { isAppRouteRoute } from '../lib/is-app-route-route'\nimport { createClientRouterFilter } from '../lib/create-client-router-filter'\nimport { createValidFileMatcher } from '../server/lib/find-page-file'\nimport { startTypeChecking } from './type-check'\nimport { generateInterceptionRoutesRewrites } from '../lib/generate-interception-routes-rewrites'\n\nimport { buildDataRoute } from '../server/lib/router-utils/build-data-route'\nimport { collectBuildTraces } from './collect-build-traces'\nimport type { BuildTraceContext } from './webpack/plugins/next-trace-entrypoints-plugin'\nimport { formatManifest } from './manifests/formatter/format-manifest'\nimport {\n  recordFrameworkVersion,\n  updateBuildDiagnostics,\n  recordFetchMetrics,\n} from '../diagnostics/build-diagnostics'\nimport { getStartServerInfo, logStartInfo } from '../server/lib/app-info-log'\nimport type { NextEnabledDirectories } from '../server/base-server'\nimport { hasCustomExportOutput } from '../export/utils'\nimport {\n  getTurbopackJsConfig,\n  handleEntrypoints,\n  type EntryIssuesMap,\n  handleRouteType,\n  handlePagesErrorRoute,\n  formatIssue,\n  isRelevantWarning,\n} from '../server/dev/turbopack-utils'\nimport { TurbopackManifestLoader } from '../server/dev/turbopack/manifest-loader'\nimport type { Entrypoints } from '../server/dev/turbopack/types'\nimport { buildCustomRoute } from '../lib/build-custom-route'\nimport { createProgress } from './progress'\nimport { traceMemoryUsage } from '../lib/memory/trace'\nimport { generateEncryptionKeyBase64 } from '../server/app-render/encryption-utils'\nimport type { DeepReadonly } from '../shared/lib/deep-readonly'\nimport uploadTrace from '../trace/upload-trace'\nimport {\n  checkIsAppPPREnabled,\n  checkIsRoutePPREnabled,\n} from '../server/lib/experimental/ppr'\nimport {\n  detectChangedEntries,\n  type DetectedEntriesResult,\n} from './flying-shuttle/detect-changed-entries'\nimport { storeShuttle } from './flying-shuttle/store-shuttle'\nimport { stitchBuilds } from './flying-shuttle/stitch-builds'\nimport { inlineStaticEnv } from './flying-shuttle/inline-static-env'\nimport { FallbackMode, fallbackModeToFallbackField } from '../lib/fallback'\nimport { RenderingMode } from './rendering-mode'\n\ntype Fallback = null | boolean | string\n\nexport interface SsgRoute {\n  dataRoute: string | null\n  experimentalBypassFor?: RouteHas[]\n\n  /**\n   * The headers that should be served along side this prerendered route.\n   */\n  initialHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be served along side this prerendered route.\n   */\n  initialStatus?: number\n\n  /**\n   * The revalidation configuration for this route.\n   */\n  initialRevalidateSeconds: Revalidate\n\n  /**\n   * The prefetch data route associated with this page. If not defined, this\n   * page does not support prefetching.\n   */\n  prefetchDataRoute: string | null | undefined\n\n  /**\n   * The dynamic route that this statically prerendered route is based on. If\n   * this is null, then the route was not based on a dynamic route.\n   */\n  srcRoute: string | null\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n}\n\nexport interface DynamicSsgRoute {\n  dataRoute: string | null\n  dataRouteRegex: string | null\n  experimentalBypassFor?: RouteHas[]\n  fallback: Fallback\n\n  /**\n   * When defined, it describes the revalidation configuration for the fallback\n   * route.\n   */\n  fallbackRevalidate: Revalidate | undefined\n\n  /**\n   * The headers that should used when serving the fallback.\n   */\n  fallbackHeaders?: Record<string, string>\n\n  /**\n   * The status code that should be used when serving the fallback.\n   */\n  fallbackStatus?: number\n  prefetchDataRoute: string | null | undefined\n  prefetchDataRouteRegex: string | null | undefined\n  routeRegex: string\n\n  /**\n   * @deprecated use `renderingMode` instead\n   */\n  experimentalPPR: boolean | undefined\n\n  /**\n   * The rendering mode for this route. Only `undefined` when not an app router\n   * route.\n   */\n  renderingMode: RenderingMode | undefined\n}\n\nexport type PrerenderManifest = {\n  version: 4\n  routes: { [route: string]: SsgRoute }\n  dynamicRoutes: { [route: string]: DynamicSsgRoute }\n  notFoundRoutes: string[]\n  preview: __ApiPreviewProps\n}\n\ntype ManifestBuiltRoute = {\n  /**\n   * The route pattern used to match requests for this route.\n   */\n  regex: string\n}\n\nexport type ManifestRewriteRoute = ManifestBuiltRoute & Rewrite\nexport type ManifestRedirectRoute = ManifestBuiltRoute & Redirect\nexport type ManifestHeaderRoute = ManifestBuiltRoute & Header\n\nexport type ManifestRoute = ManifestBuiltRoute & {\n  page: string\n  namedRegex?: string\n  routeKeys?: { [key: string]: string }\n}\n\nexport type ManifestDataRoute = {\n  page: string\n  routeKeys?: { [key: string]: string }\n  dataRouteRegex: string\n  namedDataRouteRegex?: string\n}\n\nexport type RoutesManifest = {\n  version: number\n  pages404: boolean\n  basePath: string\n  redirects: Array<Redirect>\n  rewrites?:\n    | Array<ManifestRewriteRoute>\n    | {\n        beforeFiles: Array<ManifestRewriteRoute>\n        afterFiles: Array<ManifestRewriteRoute>\n        fallback: Array<ManifestRewriteRoute>\n      }\n  headers: Array<ManifestHeaderRoute>\n  staticRoutes: Array<ManifestRoute>\n  dynamicRoutes: Array<ManifestRoute>\n  dataRoutes: Array<ManifestDataRoute>\n  i18n?: {\n    domains?: Array<{\n      http?: true\n      domain: string\n      locales?: string[]\n      defaultLocale: string\n    }>\n    locales: string[]\n    defaultLocale: string\n    localeDetection?: false\n  }\n  rsc: {\n    header: typeof RSC_HEADER\n    didPostponeHeader: typeof NEXT_DID_POSTPONE_HEADER\n    contentTypeHeader: typeof RSC_CONTENT_TYPE_HEADER\n    varyHeader: string\n    prefetchHeader: typeof NEXT_ROUTER_PREFETCH_HEADER\n    suffix: typeof RSC_SUFFIX\n    prefetchSuffix: typeof RSC_PREFETCH_SUFFIX\n  }\n  skipMiddlewareUrlNormalize?: boolean\n  caseSensitive?: boolean\n  /**\n   * Configuration related to Partial Prerendering.\n   */\n  ppr?: {\n    /**\n     * The chained response for the PPR resume.\n     */\n    chain: {\n      /**\n       * The headers that will indicate to Next.js that the request is for a PPR\n       * resume.\n       */\n      headers: Record<string, string>\n    }\n  }\n}\n\nfunction pageToRoute(page: string) {\n  const routeRegex = getNamedRouteRegex(page, true)\n  return {\n    page,\n    regex: normalizeRouteRegex(routeRegex.re.source),\n    routeKeys: routeRegex.routeKeys,\n    namedRegex: routeRegex.namedRegex,\n  }\n}\n\nfunction getCacheDir(distDir: string): string {\n  const cacheDir = path.join(distDir, 'cache')\n  if (ciEnvironment.isCI && !ciEnvironment.hasNextSupport) {\n    const hasCache = existsSync(cacheDir)\n\n    if (!hasCache) {\n      // Intentionally not piping to stderr which is what `Log.warn` does in case people fail in CI when\n      // stderr is detected.\n      console.log(\n        `${Log.prefixes.warn} No build cache found. Please configure build caching for faster rebuilds. Read more: https://nextjs.org/docs/messages/no-cache`\n      )\n    }\n  }\n  return cacheDir\n}\n\nasync function writeFileUtf8(filePath: string, content: string): Promise<void> {\n  await fs.writeFile(filePath, content, 'utf-8')\n}\n\nfunction readFileUtf8(filePath: string): Promise<string> {\n  return fs.readFile(filePath, 'utf8')\n}\n\nasync function writeManifest<T extends object>(\n  filePath: string,\n  manifest: T\n): Promise<void> {\n  await writeFileUtf8(filePath, formatManifest(manifest))\n}\n\nasync function readManifest<T extends object>(filePath: string): Promise<T> {\n  return JSON.parse(await readFileUtf8(filePath))\n}\n\nasync function writePrerenderManifest(\n  distDir: string,\n  manifest: DeepReadonly<PrerenderManifest>\n): Promise<void> {\n  await writeManifest(path.join(distDir, PRERENDER_MANIFEST), manifest)\n}\n\nasync function writeClientSsgManifest(\n  prerenderManifest: DeepReadonly<PrerenderManifest>,\n  {\n    buildId,\n    distDir,\n    locales,\n  }: { buildId: string; distDir: string; locales: string[] }\n) {\n  const ssgPages = new Set<string>(\n    [\n      ...Object.entries(prerenderManifest.routes)\n        // Filter out dynamic routes\n        .filter(([, { srcRoute }]) => srcRoute == null)\n        .map(([route]) => normalizeLocalePath(route, locales).pathname),\n      ...Object.keys(prerenderManifest.dynamicRoutes),\n    ].sort()\n  )\n\n  const clientSsgManifestContent = `self.__SSG_MANIFEST=${devalue(\n    ssgPages\n  )};self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n  await writeFileUtf8(\n    path.join(distDir, CLIENT_STATIC_FILES_PATH, buildId, '_ssgManifest.js'),\n    clientSsgManifestContent\n  )\n}\n\ninterface FunctionsConfigManifest {\n  version: number\n  functions: Record<string, Record<string, string | number>>\n}\n\nasync function writeFunctionsConfigManifest(\n  distDir: string,\n  manifest: FunctionsConfigManifest\n): Promise<void> {\n  await writeManifest(\n    path.join(distDir, SERVER_DIRECTORY, FUNCTIONS_CONFIG_MANIFEST),\n    manifest\n  )\n}\n\ninterface RequiredServerFilesManifest {\n  version: number\n  config: NextConfigComplete\n  appDir: string\n  relativeAppDir: string\n  files: string[]\n  ignore: string[]\n}\n\nasync function writeRequiredServerFilesManifest(\n  distDir: string,\n  requiredServerFiles: RequiredServerFilesManifest\n) {\n  await writeManifest(\n    path.join(distDir, SERVER_FILES_MANIFEST),\n    requiredServerFiles\n  )\n}\n\nasync function writeImagesManifest(\n  distDir: string,\n  config: NextConfigComplete\n): Promise<void> {\n  const images = { ...config.images }\n  const { deviceSizes, imageSizes } = images\n  ;(images as any).sizes = [...deviceSizes, ...imageSizes]\n  images.remotePatterns = (config?.images?.remotePatterns || []).map((p) => ({\n    // Should be the same as matchRemotePattern()\n    protocol: p.protocol,\n    hostname: makeRe(p.hostname).source,\n    port: p.port,\n    pathname: makeRe(p.pathname ?? '**', { dot: true }).source,\n  }))\n\n  await writeManifest(path.join(distDir, IMAGES_MANIFEST), {\n    version: 1,\n    images,\n  })\n}\n\nconst STANDALONE_DIRECTORY = 'standalone' as const\nasync function writeStandaloneDirectory(\n  nextBuildSpan: Span,\n  distDir: string,\n  pageKeys: { pages: string[]; app: string[] | undefined },\n  denormalizedAppPages: string[] | undefined,\n  outputFileTracingRoot: string,\n  requiredServerFiles: RequiredServerFilesManifest,\n  middlewareManifest: MiddlewareManifest,\n  hasInstrumentationHook: boolean,\n  staticPages: Set<string>,\n  loadedEnvFiles: LoadedEnvFiles,\n  appDir: string | undefined\n) {\n  await nextBuildSpan\n    .traceChild('write-standalone-directory')\n    .traceAsyncFn(async () => {\n      await copyTracedFiles(\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        requiredServerFiles.appDir,\n        distDir,\n        pageKeys.pages,\n        denormalizedAppPages,\n        outputFileTracingRoot,\n        requiredServerFiles.config,\n        middlewareManifest,\n        hasInstrumentationHook,\n        staticPages\n      )\n\n      for (const file of [\n        ...requiredServerFiles.files,\n        path.join(requiredServerFiles.config.distDir, SERVER_FILES_MANIFEST),\n        ...loadedEnvFiles.reduce<string[]>((acc, envFile) => {\n          if (['.env', '.env.production'].includes(envFile.path)) {\n            acc.push(envFile.path)\n          }\n          return acc\n        }, []),\n      ]) {\n        // requiredServerFiles.appDir Refers to the application directory, not App Router.\n        const filePath = path.join(requiredServerFiles.appDir, file)\n        const outputPath = path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, filePath)\n        )\n        await fs.mkdir(path.dirname(outputPath), {\n          recursive: true,\n        })\n        await fs.copyFile(filePath, outputPath)\n      }\n      await recursiveCopy(\n        path.join(distDir, SERVER_DIRECTORY, 'pages'),\n        path.join(\n          distDir,\n          STANDALONE_DIRECTORY,\n          path.relative(outputFileTracingRoot, distDir),\n          SERVER_DIRECTORY,\n          'pages'\n        ),\n        { overwrite: true }\n      )\n      if (appDir) {\n        const originalServerApp = path.join(distDir, SERVER_DIRECTORY, 'app')\n        if (existsSync(originalServerApp)) {\n          await recursiveCopy(\n            originalServerApp,\n            path.join(\n              distDir,\n              STANDALONE_DIRECTORY,\n              path.relative(outputFileTracingRoot, distDir),\n              SERVER_DIRECTORY,\n              'app'\n            ),\n            { overwrite: true }\n          )\n        }\n      }\n    })\n}\n\nfunction getNumberOfWorkers(config: NextConfigComplete) {\n  if (\n    config.experimental.cpus &&\n    config.experimental.cpus !== defaultConfig.experimental!.cpus\n  ) {\n    return config.experimental.cpus\n  }\n\n  if (config.experimental.memoryBasedWorkersCount) {\n    return Math.max(\n      Math.min(config.experimental.cpus || 1, Math.floor(os.freemem() / 1e9)),\n      // enforce a minimum of 4 workers\n      4\n    )\n  }\n\n  if (config.experimental.cpus) {\n    return config.experimental.cpus\n  }\n\n  // Fall back to 4 workers if a count is not specified\n  return 4\n}\n\nconst staticWorkerPath = require.resolve('./worker')\nconst staticWorkerExposedMethods = [\n  'hasCustomGetInitialProps',\n  'isPageStatic',\n  'getDefinedNamedExports',\n  'exportPages',\n] as const\ntype StaticWorker = typeof import('./worker') & Worker\nexport function createStaticWorker(\n  config: NextConfigComplete,\n  onActivity?: () => void\n): StaticWorker {\n  return new Worker(staticWorkerPath, {\n    logger: Log,\n    numWorkers: getNumberOfWorkers(config),\n    onActivity,\n    forkOptions: {\n      env: process.env,\n    },\n    enableWorkerThreads: config.experimental.workerThreads,\n    exposedMethods: staticWorkerExposedMethods,\n  }) as StaticWorker\n}\n\nasync function writeFullyStaticExport(\n  config: NextConfigComplete,\n  dir: string,\n  enabledDirectories: NextEnabledDirectories,\n  configOutDir: string,\n  nextBuildSpan: Span\n): Promise<void> {\n  const exportApp = require('../export')\n    .default as typeof import('../export').default\n\n  const pagesWorker = createStaticWorker(config)\n  const appWorker = createStaticWorker(config)\n\n  await exportApp(\n    dir,\n    {\n      buildExport: false,\n      nextConfig: config,\n      enabledDirectories,\n      silent: true,\n      outdir: path.join(dir, configOutDir),\n      numWorkers: getNumberOfWorkers(config),\n    },\n    nextBuildSpan\n  )\n\n  pagesWorker.end()\n  appWorker.end()\n}\n\nasync function getBuildId(\n  isGenerateMode: boolean,\n  distDir: string,\n  nextBuildSpan: Span,\n  config: NextConfigComplete\n) {\n  if (isGenerateMode) {\n    return await fs.readFile(path.join(distDir, 'BUILD_ID'), 'utf8')\n  }\n  return await nextBuildSpan\n    .traceChild('generate-buildid')\n    .traceAsyncFn(() => generateBuildId(config.generateBuildId, nanoid))\n}\n\nconst IS_TURBOPACK_BUILD = process.env.TURBOPACK && process.env.TURBOPACK_BUILD\n\nexport default async function build(\n  dir: string,\n  reactProductionProfiling = false,\n  debugOutput = false,\n  runLint = true,\n  noMangling = false,\n  appDirOnly = false,\n  turboNextBuild = false,\n  experimentalBuildMode: 'default' | 'compile' | 'generate',\n  traceUploadUrl: string | undefined\n): Promise<void> {\n  const isCompileMode = experimentalBuildMode === 'compile'\n  const isGenerateMode = experimentalBuildMode === 'generate'\n\n  let loadedConfig: NextConfigComplete | undefined\n  try {\n    const nextBuildSpan = trace('next-build', undefined, {\n      buildMode: experimentalBuildMode,\n      isTurboBuild: String(turboNextBuild),\n      version: process.env.__NEXT_VERSION as string,\n    })\n\n    NextBuildContext.nextBuildSpan = nextBuildSpan\n    NextBuildContext.dir = dir\n    NextBuildContext.appDirOnly = appDirOnly\n    NextBuildContext.reactProductionProfiling = reactProductionProfiling\n    NextBuildContext.noMangling = noMangling\n\n    await nextBuildSpan.traceAsyncFn(async () => {\n      // attempt to load global env values so they are available in next.config.js\n      const { loadedEnvFiles } = nextBuildSpan\n        .traceChild('load-dotenv')\n        .traceFn(() => loadEnvConfig(dir, false, Log))\n      NextBuildContext.loadedEnvFiles = loadedEnvFiles\n\n      const turborepoAccessTraceResult = new TurborepoAccessTraceResult()\n      const config: NextConfigComplete = await nextBuildSpan\n        .traceChild('load-next-config')\n        .traceAsyncFn(() =>\n          turborepoTraceAccess(\n            () =>\n              loadConfig(PHASE_PRODUCTION_BUILD, dir, {\n                // Log for next.config loading process\n                silent: false,\n                reactProductionProfiling,\n              }),\n            turborepoAccessTraceResult\n          )\n        )\n      loadedConfig = config\n\n      process.env.NEXT_DEPLOYMENT_ID = config.deploymentId || ''\n      NextBuildContext.config = config\n\n      let configOutDir = 'out'\n      if (hasCustomExportOutput(config)) {\n        configOutDir = config.distDir\n        config.distDir = '.next'\n      }\n      const distDir = path.join(dir, config.distDir)\n      setGlobal('phase', PHASE_PRODUCTION_BUILD)\n      setGlobal('distDir', distDir)\n\n      const buildId = await getBuildId(\n        isGenerateMode,\n        distDir,\n        nextBuildSpan,\n        config\n      )\n      NextBuildContext.buildId = buildId\n\n      const { flyingShuttle } = config.experimental\n      const isFullFlyingShuttle = flyingShuttle?.mode === 'full'\n      const isStoreOnlyFlyingShuttle = flyingShuttle?.mode === 'store-only'\n\n      const shuttleDir = path.join(distDir, 'cache', 'shuttle')\n\n      if (flyingShuttle) {\n        await fs.mkdir(shuttleDir, {\n          recursive: true,\n        })\n      }\n\n      const customRoutes: CustomRoutes = await nextBuildSpan\n        .traceChild('load-custom-routes')\n        .traceAsyncFn(() => loadCustomRoutes(config))\n\n      const { headers, rewrites, redirects } = customRoutes\n      const combinedRewrites: Rewrite[] = [\n        ...rewrites.beforeFiles,\n        ...rewrites.afterFiles,\n        ...rewrites.fallback,\n      ]\n      const hasRewrites = combinedRewrites.length > 0\n\n      NextBuildContext.originalRewrites = config._originalRewrites\n      NextBuildContext.originalRedirects = config._originalRedirects\n\n      const cacheDir = getCacheDir(distDir)\n\n      const telemetry = new Telemetry({ distDir })\n\n      setGlobal('telemetry', telemetry)\n\n      const publicDir = path.join(dir, 'public')\n      const { pagesDir, appDir } = findPagesDir(dir)\n      NextBuildContext.pagesDir = pagesDir\n      NextBuildContext.appDir = appDir\n\n      const enabledDirectories: NextEnabledDirectories = {\n        app: typeof appDir === 'string',\n        pages: typeof pagesDir === 'string',\n      }\n\n      // Generate a random encryption key for this build.\n      // This key is used to encrypt cross boundary values and can be used to generate hashes.\n      const encryptionKey = await generateEncryptionKeyBase64()\n      NextBuildContext.encryptionKey = encryptionKey\n\n      const isSrcDir = path\n        .relative(dir, pagesDir || appDir || '')\n        .startsWith('src')\n      const hasPublicDir = existsSync(publicDir)\n\n      telemetry.record(\n        eventCliSession(dir, config, {\n          webpackVersion: 5,\n          cliCommand: 'build',\n          isSrcDir,\n          hasNowJson: !!(await findUp('now.json', { cwd: dir })),\n          isCustomServer: null,\n          turboFlag: false,\n          pagesDir: !!pagesDir,\n          appDir: !!appDir,\n        })\n      )\n\n      eventNextPlugins(path.resolve(dir)).then((events) =>\n        telemetry.record(events)\n      )\n\n      eventSwcPlugins(path.resolve(dir), config).then((events) =>\n        telemetry.record(events)\n      )\n\n      // Always log next version first then start rest jobs\n      const { envInfo, expFeatureInfo } = await getStartServerInfo(dir, false)\n      logStartInfo({\n        networkUrl: null,\n        appUrl: null,\n        envInfo,\n        expFeatureInfo,\n      })\n\n      const ignoreESLint = Boolean(config.eslint.ignoreDuringBuilds)\n      const shouldLint = !ignoreESLint && runLint\n\n      const typeCheckingOptions: Parameters<typeof startTypeChecking>[0] = {\n        dir,\n        appDir,\n        pagesDir,\n        runLint,\n        shouldLint,\n        ignoreESLint,\n        telemetry,\n        nextBuildSpan,\n        config,\n        cacheDir,\n      }\n\n      // For app directory, we run type checking after build. That's because\n      // we dynamically generate types for each layout and page in the app\n      // directory.\n      if (!appDir && !isCompileMode)\n        await startTypeChecking(typeCheckingOptions)\n\n      if (appDir && 'exportPathMap' in config) {\n        Log.error(\n          'The \"exportPathMap\" configuration cannot be used with the \"app\" directory. Please use generateStaticParams() instead.'\n        )\n        await telemetry.flush()\n        process.exit(1)\n      }\n\n      const buildLintEvent: EventBuildFeatureUsage = {\n        featureName: 'build-lint',\n        invocationCount: shouldLint ? 1 : 0,\n      }\n      telemetry.record({\n        eventName: EVENT_BUILD_FEATURE_USAGE,\n        payload: buildLintEvent,\n      })\n\n      const validFileMatcher = createValidFileMatcher(\n        config.pageExtensions,\n        appDir\n      )\n\n      let pagesPaths =\n        !appDirOnly && pagesDir\n          ? await nextBuildSpan.traceChild('collect-pages').traceAsyncFn(() =>\n              recursiveReadDir(pagesDir, {\n                pathnameFilter: validFileMatcher.isPageFile,\n              })\n            )\n          : []\n\n      let changedPagePathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (pagesPaths && isFullFlyingShuttle) {\n        changedPagePathsResult = await detectChangedEntries({\n          pagesPaths,\n          pageExtensions: config.pageExtensions,\n          distDir,\n          shuttleDir,\n          config,\n        })\n        console.log(\n          JSON.stringify(\n            {\n              changedPagePathsResult: changedPagePathsResult.changed.pages,\n            },\n            null,\n            2\n          )\n        )\n        pagesPaths = changedPagePathsResult.changed.pages\n      }\n\n      const middlewareDetectionRegExp = new RegExp(\n        `^${MIDDLEWARE_FILENAME}\\\\.(?:${config.pageExtensions.join('|')})$`\n      )\n\n      const instrumentationHookDetectionRegExp = new RegExp(\n        `^${INSTRUMENTATION_HOOK_FILENAME}\\\\.(?:${config.pageExtensions.join(\n          '|'\n        )})$`\n      )\n\n      const rootDir = path.join((pagesDir || appDir)!, '..')\n      const includes = [\n        middlewareDetectionRegExp,\n        instrumentationHookDetectionRegExp,\n      ]\n\n      const rootPaths = Array.from(await getFilesInDir(rootDir))\n        .filter((file) => includes.some((include) => include.test(file)))\n        .sort(sortByPageExts(config.pageExtensions))\n        .map((file) => path.join(rootDir, file).replace(dir, ''))\n\n      const hasInstrumentationHook = rootPaths.some((p) =>\n        p.includes(INSTRUMENTATION_HOOK_FILENAME)\n      )\n      const hasMiddlewareFile = rootPaths.some((p) =>\n        p.includes(MIDDLEWARE_FILENAME)\n      )\n\n      NextBuildContext.hasInstrumentationHook = hasInstrumentationHook\n\n      const previewProps: __ApiPreviewProps = {\n        previewModeId: crypto.randomBytes(16).toString('hex'),\n        previewModeSigningKey: crypto.randomBytes(32).toString('hex'),\n        previewModeEncryptionKey: crypto.randomBytes(32).toString('hex'),\n      }\n      NextBuildContext.previewProps = previewProps\n\n      const mappedPages = await nextBuildSpan\n        .traceChild('create-pages-mapping')\n        .traceAsyncFn(() =>\n          createPagesMapping({\n            isDev: false,\n            pageExtensions: config.pageExtensions,\n            pagesType: PAGE_TYPES.PAGES,\n            pagePaths: pagesPaths,\n            pagesDir,\n            appDir,\n          })\n        )\n      NextBuildContext.mappedPages = mappedPages\n\n      let mappedAppPages: MappedPages | undefined\n      let denormalizedAppPages: string[] | undefined\n      let changedAppPathsResult:\n        | undefined\n        | {\n            changed: DetectedEntriesResult\n            unchanged: DetectedEntriesResult\n          }\n\n      if (appDir) {\n        let appPaths = await nextBuildSpan\n          .traceChild('collect-app-paths')\n          .traceAsyncFn(() =>\n            recursiveReadDir(appDir, {\n              pathnameFilter: (absolutePath) =>\n                validFileMatcher.isAppRouterPage(absolutePath) ||\n                // For now we only collect the root /not-found page in the app\n                // directory as the 404 fallback\n                validFileMatcher.isRootNotFound(absolutePath),\n              ignorePartFilter: (part) => part.startsWith('_'),\n            })\n          )\n\n        if (appPaths && isFullFlyingShuttle) {\n          changedAppPathsResult = await detectChangedEntries({\n            appPaths,\n            pageExtensions: config.pageExtensions,\n            distDir,\n            shuttleDir,\n            config,\n          })\n          console.log(\n            JSON.stringify(\n              {\n                changedAppPathsResult: changedAppPathsResult.changed.app,\n              },\n              null,\n              2\n            )\n          )\n          appPaths = changedAppPathsResult.changed.app\n        }\n\n        mappedAppPages = await nextBuildSpan\n          .traceChild('create-app-mapping')\n          .traceAsyncFn(() =>\n            createPagesMapping({\n              pagePaths: appPaths,\n              isDev: false,\n              pagesType: PAGE_TYPES.APP,\n              pageExtensions: config.pageExtensions,\n              pagesDir,\n              appDir,\n            })\n          )\n\n        NextBuildContext.mappedAppPages = mappedAppPages\n      }\n\n      const mappedRootPaths = await createPagesMapping({\n        isDev: false,\n        pageExtensions: config.pageExtensions,\n        pagePaths: rootPaths,\n        pagesType: PAGE_TYPES.ROOT,\n        pagesDir: pagesDir,\n        appDir,\n      })\n      NextBuildContext.mappedRootPaths = mappedRootPaths\n\n      const pagesPageKeys = Object.keys(mappedPages)\n\n      const conflictingAppPagePaths: [pagePath: string, appPath: string][] = []\n      const appPageKeys = new Set<string>()\n      if (mappedAppPages) {\n        denormalizedAppPages = Object.keys(mappedAppPages)\n        for (const appKey of denormalizedAppPages) {\n          const normalizedAppPageKey = normalizeAppPath(appKey)\n          const pagePath = mappedPages[normalizedAppPageKey]\n          if (pagePath) {\n            const appPath = mappedAppPages[appKey]\n            conflictingAppPagePaths.push([\n              pagePath.replace(/^private-next-pages/, 'pages'),\n              appPath.replace(/^private-next-app-dir/, 'app'),\n            ])\n          }\n          appPageKeys.add(normalizedAppPageKey)\n        }\n      }\n\n      const appPaths = Array.from(appPageKeys)\n      // Interception routes are modelled as beforeFiles rewrites\n      rewrites.beforeFiles.push(\n        ...generateInterceptionRoutesRewrites(appPaths, config.basePath)\n      )\n\n      NextBuildContext.rewrites = rewrites\n\n      const totalAppPagesCount = appPaths.length\n\n      const pageKeys = {\n        pages: pagesPageKeys,\n        app: appPaths.length > 0 ? appPaths : undefined,\n      }\n\n      // Turbopack already handles conflicting app and page routes.\n      if (!IS_TURBOPACK_BUILD) {\n        const numConflictingAppPaths = conflictingAppPagePaths.length\n        if (mappedAppPages && numConflictingAppPaths > 0) {\n          Log.error(\n            `Conflicting app and page file${\n              numConflictingAppPaths === 1 ? ' was' : 's were'\n            } found, please remove the conflicting files to continue:`\n          )\n          for (const [pagePath, appPath] of conflictingAppPagePaths) {\n            Log.error(`  \"${pagePath}\" - \"${appPath}\"`)\n          }\n          await telemetry.flush()\n          process.exit(1)\n        }\n      }\n\n      const conflictingPublicFiles: string[] = []\n      const hasPages404 = mappedPages['/404']?.startsWith(PAGES_DIR_ALIAS)\n      const hasApp404 = !!mappedAppPages?.[UNDERSCORE_NOT_FOUND_ROUTE_ENTRY]\n      const hasCustomErrorPage =\n        mappedPages['/_error'].startsWith(PAGES_DIR_ALIAS)\n\n      if (hasPublicDir) {\n        const hasPublicUnderScoreNextDir = existsSync(\n          path.join(publicDir, '_next')\n        )\n        if (hasPublicUnderScoreNextDir) {\n          throw new Error(PUBLIC_DIR_MIDDLEWARE_CONFLICT)\n        }\n      }\n\n      await nextBuildSpan\n        .traceChild('public-dir-conflict-check')\n        .traceAsyncFn(async () => {\n          // Check if pages conflict with files in `public`\n          // Only a page of public file can be served, not both.\n          for (const page in mappedPages) {\n            const hasPublicPageFile = await fileExists(\n              path.join(publicDir, page === '/' ? '/index' : page),\n              FileType.File\n            )\n            if (hasPublicPageFile) {\n              conflictingPublicFiles.push(page)\n            }\n          }\n\n          const numConflicting = conflictingPublicFiles.length\n\n          if (numConflicting) {\n            throw new Error(\n              `Conflicting public and page file${\n                numConflicting === 1 ? ' was' : 's were'\n              } found. https://nextjs.org/docs/messages/conflicting-public-file-page\\n${conflictingPublicFiles.join(\n                '\\n'\n              )}`\n            )\n          }\n        })\n\n      const nestedReservedPages = pageKeys.pages.filter((page) => {\n        return (\n          page.match(/\\/(_app|_document|_error)$/) && path.dirname(page) !== '/'\n        )\n      })\n\n      if (nestedReservedPages.length) {\n        Log.warn(\n          `The following reserved Next.js pages were detected not directly under the pages directory:\\n` +\n            nestedReservedPages.join('\\n') +\n            `\\nSee more info here: https://nextjs.org/docs/messages/nested-reserved-page\\n`\n        )\n      }\n\n      const restrictedRedirectPaths = ['/_next'].map((p) =>\n        config.basePath ? `${config.basePath}${p}` : p\n      )\n\n      const isAppPPREnabled = checkIsAppPPREnabled(config.experimental.ppr)\n\n      const routesManifestPath = path.join(distDir, ROUTES_MANIFEST)\n      const routesManifest: RoutesManifest = nextBuildSpan\n        .traceChild('generate-routes-manifest')\n        .traceFn(() => {\n          const sortedRoutes = getSortedRoutes([\n            ...pageKeys.pages,\n            ...(pageKeys.app ?? []),\n          ])\n          const dynamicRoutes: Array<ReturnType<typeof pageToRoute>> = []\n          const staticRoutes: typeof dynamicRoutes = []\n\n          for (const route of sortedRoutes) {\n            if (isDynamicRoute(route)) {\n              dynamicRoutes.push(pageToRoute(route))\n            } else if (!isReservedPage(route)) {\n              staticRoutes.push(pageToRoute(route))\n            }\n          }\n\n          return {\n            version: 3,\n            pages404: true,\n            caseSensitive: !!config.experimental.caseSensitiveRoutes,\n            basePath: config.basePath,\n            redirects: redirects.map((r) =>\n              buildCustomRoute('redirect', r, restrictedRedirectPaths)\n            ),\n            headers: headers.map((r) => buildCustomRoute('header', r)),\n            dynamicRoutes,\n            staticRoutes,\n            dataRoutes: [],\n            i18n: config.i18n || undefined,\n            rsc: {\n              header: RSC_HEADER,\n              // This vary header is used as a default. It is technically re-assigned in `base-server`,\n              // and may include an additional Vary option for `Next-URL`.\n              varyHeader: `${RSC_HEADER}, ${NEXT_ROUTER_STATE_TREE_HEADER}, ${NEXT_ROUTER_PREFETCH_HEADER}`,\n              prefetchHeader: NEXT_ROUTER_PREFETCH_HEADER,\n              didPostponeHeader: NEXT_DID_POSTPONE_HEADER,\n              contentTypeHeader: RSC_CONTENT_TYPE_HEADER,\n              suffix: RSC_SUFFIX,\n              prefetchSuffix: RSC_PREFETCH_SUFFIX,\n            },\n            skipMiddlewareUrlNormalize: config.skipMiddlewareUrlNormalize,\n            ppr: isAppPPREnabled\n              ? {\n                  chain: {\n                    headers: {\n                      [NEXT_RESUME_HEADER]: '1',\n                    },\n                  },\n                }\n              : undefined,\n          } satisfies RoutesManifest\n        })\n\n      if (rewrites.beforeFiles.length === 0 && rewrites.fallback.length === 0) {\n        routesManifest.rewrites = rewrites.afterFiles.map((r) =>\n          buildCustomRoute('rewrite', r)\n        )\n      } else {\n        routesManifest.rewrites = {\n          beforeFiles: rewrites.beforeFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          afterFiles: rewrites.afterFiles.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n          fallback: rewrites.fallback.map((r) =>\n            buildCustomRoute('rewrite', r)\n          ),\n        }\n      }\n      let clientRouterFilters:\n        | undefined\n        | ReturnType<typeof createClientRouterFilter>\n\n      if (config.experimental.clientRouterFilter) {\n        const nonInternalRedirects = (config._originalRedirects || []).filter(\n          (r: any) => !r.internal\n        )\n        const filterPaths: string[] = []\n\n        if (isFullFlyingShuttle) {\n          filterPaths.push(\n            ...[\n              // client filter always has all app paths\n              ...(changedAppPathsResult?.unchanged?.app || []),\n              ...(changedAppPathsResult?.changed?.app || []),\n            ].map((entry) =>\n              normalizeAppPath(getPageFromPath(entry, config.pageExtensions))\n            ),\n            ...(changedPagePathsResult?.unchanged.pages.length\n              ? changedPagePathsResult.changed?.pages || []\n              : []\n            ).map((item) => getPageFromPath(item, config.pageExtensions))\n          )\n        } else {\n          filterPaths.push(...appPaths)\n        }\n\n        clientRouterFilters = createClientRouterFilter(\n          filterPaths,\n          config.experimental.clientRouterFilterRedirects\n            ? nonInternalRedirects\n            : [],\n          config.experimental.clientRouterFilterAllowedRate\n        )\n        NextBuildContext.clientRouterFilters = clientRouterFilters\n      }\n\n      const distDirCreated = await nextBuildSpan\n        .traceChild('create-dist-dir')\n        .traceAsyncFn(async () => {\n          try {\n            await fs.mkdir(distDir, { recursive: true })\n            return true\n          } catch (err) {\n            if (isError(err) && err.code === 'EPERM') {\n              return false\n            }\n            throw err\n          }\n        })\n\n      if (!distDirCreated || !(await isWriteable(distDir))) {\n        throw new Error(\n          '> Build directory is not writeable. https://nextjs.org/docs/messages/build-dir-not-writeable'\n        )\n      }\n\n      if (config.cleanDistDir && !isGenerateMode) {\n        await recursiveDelete(distDir, /^cache/)\n      }\n\n      // Ensure commonjs handling is used for files in the distDir (generally .next)\n      // Files outside of the distDir can be \"type\": \"module\"\n      await writeFileUtf8(\n        path.join(distDir, 'package.json'),\n        '{\"type\": \"commonjs\"}'\n      )\n\n      // These are written to distDir, so they need to come after creating and cleaning distDr.\n      await recordFrameworkVersion(process.env.__NEXT_VERSION as string)\n      await updateBuildDiagnostics({\n        buildStage: 'start',\n      })\n\n      const outputFileTracingRoot = config.outputFileTracingRoot || dir\n\n      const pagesManifestPath = path.join(\n        distDir,\n        SERVER_DIRECTORY,\n        PAGES_MANIFEST\n      )\n\n      async function turbopackBuild(): Promise<{\n        duration: number\n        buildTraceContext: undefined\n        shutdownPromise: Promise<void>\n      }> {\n        if (!IS_TURBOPACK_BUILD) {\n          throw new Error(\"next build doesn't support turbopack yet\")\n        }\n\n        await validateTurboNextConfig({\n          dir,\n          isDev: false,\n        })\n\n        const startTime = process.hrtime()\n        const bindings = await loadBindings(config?.experimental?.useWasmBinary)\n        const dev = false\n\n        // const supportedBrowsers = await getSupportedBrowsers(dir, dev)\n        const supportedBrowsers = [\n          'last 1 Chrome versions, last 1 Firefox versions, last 1 Safari versions, last 1 Edge versions',\n        ]\n\n        const project = await bindings.turbo.createProject(\n          {\n            projectPath: dir,\n            rootPath:\n              config.experimental?.turbo?.root ||\n              config.outputFileTracingRoot ||\n              dir,\n            nextConfig: config,\n            jsConfig: await getTurbopackJsConfig(dir, config),\n            watch: false,\n            dev,\n            env: process.env as Record<string, string>,\n            defineEnv: createDefineEnv({\n              isTurbopack: true,\n              clientRouterFilters,\n              config,\n              dev,\n              distDir,\n              fetchCacheKeyPrefix: config.experimental.fetchCacheKeyPrefix,\n              hasRewrites,\n              // Implemented separately in Turbopack, doesn't have to be passed here.\n              middlewareMatchers: undefined,\n            }),\n            buildId: NextBuildContext.buildId!,\n            encryptionKey: NextBuildContext.encryptionKey!,\n            previewProps: NextBuildContext.previewProps!,\n            browserslistQuery: supportedBrowsers.join(', '),\n          },\n          {\n            memoryLimit: config.experimental.turbo?.memoryLimit,\n          }\n        )\n\n        await fs.mkdir(path.join(distDir, 'server'), { recursive: true })\n        await fs.mkdir(path.join(distDir, 'static', buildId), {\n          recursive: true,\n        })\n        await fs.writeFile(\n          path.join(distDir, 'package.json'),\n          JSON.stringify(\n            {\n              type: 'commonjs',\n            },\n            null,\n            2\n          )\n        )\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const entrypointsSubscription = project.entrypointsSubscribe()\n        const currentEntrypoints: Entrypoints = {\n          global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n\n            middleware: undefined,\n            instrumentation: undefined,\n          },\n\n          app: new Map(),\n          page: new Map(),\n        }\n\n        const currentEntryIssues: EntryIssuesMap = new Map()\n\n        const manifestLoader = new TurbopackManifestLoader({\n          buildId,\n          distDir,\n          encryptionKey,\n        })\n\n        const entrypointsResult = await entrypointsSubscription.next()\n        if (entrypointsResult.done) {\n          throw new Error('Turbopack did not return any entrypoints')\n        }\n        entrypointsSubscription.return?.().catch(() => {})\n\n        const entrypoints = entrypointsResult.value\n\n        const topLevelErrors: {\n          message: string\n        }[] = []\n        for (const issue of entrypoints.issues) {\n          topLevelErrors.push({\n            message: formatIssue(issue),\n          })\n        }\n\n        if (topLevelErrors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${\n              topLevelErrors.length\n            } issues:\\n${topLevelErrors.map((e) => e.message).join('\\n')}`\n          )\n        }\n\n        await handleEntrypoints({\n          entrypoints,\n          currentEntrypoints,\n          currentEntryIssues,\n          manifestLoader,\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          logErrors: false,\n        })\n\n        const progress = createProgress(\n          currentEntrypoints.page.size + currentEntrypoints.app.size + 1,\n          'Building'\n        )\n        const promises: Promise<any>[] = []\n        const sema = new Sema(10)\n        const enqueue = (fn: () => Promise<void>) => {\n          promises.push(\n            (async () => {\n              await sema.acquire()\n              try {\n                await fn()\n              } finally {\n                sema.release()\n                progress()\n              }\n            })()\n          )\n        }\n\n        if (!appDirOnly) {\n          for (const [page, route] of currentEntrypoints.page) {\n            enqueue(() =>\n              handleRouteType({\n                dev,\n                page,\n                pathname: page,\n                route,\n\n                currentEntryIssues,\n                entrypoints: currentEntrypoints,\n                manifestLoader,\n                devRewrites: undefined,\n                productionRewrites: customRoutes.rewrites,\n                logErrors: false,\n              })\n            )\n          }\n        }\n\n        for (const [page, route] of currentEntrypoints.app) {\n          enqueue(() =>\n            handleRouteType({\n              page,\n              dev: false,\n              pathname: normalizeAppPath(page),\n              route,\n              currentEntryIssues,\n              entrypoints: currentEntrypoints,\n              manifestLoader,\n              devRewrites: undefined,\n              productionRewrites: customRoutes.rewrites,\n              logErrors: false,\n            })\n          )\n        }\n\n        enqueue(() =>\n          handlePagesErrorRoute({\n            dev: false,\n            currentEntryIssues,\n            entrypoints: currentEntrypoints,\n            manifestLoader,\n            devRewrites: undefined,\n            productionRewrites: customRoutes.rewrites,\n            logErrors: false,\n          })\n        )\n        await Promise.all(promises)\n\n        await manifestLoader.writeManifests({\n          devRewrites: undefined,\n          productionRewrites: customRoutes.rewrites,\n          entrypoints: currentEntrypoints,\n        })\n\n        const errors: {\n          page: string\n          message: string\n        }[] = []\n        const warnings: {\n          page: string\n          message: string\n        }[] = []\n        for (const [page, entryIssues] of currentEntryIssues) {\n          for (const issue of entryIssues.values()) {\n            if (issue.severity !== 'warning') {\n              errors.push({\n                page,\n                message: formatIssue(issue),\n              })\n            } else {\n              if (isRelevantWarning(issue)) {\n                warnings.push({\n                  page,\n                  message: formatIssue(issue),\n                })\n              }\n            }\n          }\n        }\n\n        const shutdownPromise = project.shutdown()\n\n        if (warnings.length > 0) {\n          Log.warn(\n            `Turbopack build collected ${warnings.length} warnings:\\n${warnings\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        if (errors.length > 0) {\n          throw new Error(\n            `Turbopack build failed with ${errors.length} errors:\\n${errors\n              .map((e) => {\n                return 'Page: ' + e.page + '\\n' + e.message\n              })\n              .join('\\n')}`\n          )\n        }\n\n        return {\n          duration: process.hrtime(startTime)[0],\n          buildTraceContext: undefined,\n          shutdownPromise,\n        }\n      }\n\n      let buildTraceContext: undefined | BuildTraceContext\n      let buildTracesPromise: Promise<any> | undefined = undefined\n\n      // If there's has a custom webpack config and disable the build worker.\n      // Otherwise respect the option if it's set.\n      const useBuildWorker =\n        config.experimental.webpackBuildWorker ||\n        (config.experimental.webpackBuildWorker === undefined &&\n          !config.webpack)\n      const runServerAndEdgeInParallel =\n        config.experimental.parallelServerCompiles\n      const collectServerBuildTracesInParallel =\n        config.experimental.parallelServerBuildTraces ||\n        (config.experimental.parallelServerBuildTraces === undefined &&\n          isCompileMode)\n\n      nextBuildSpan.setAttribute(\n        'has-custom-webpack-config',\n        String(!!config.webpack)\n      )\n      nextBuildSpan.setAttribute('use-build-worker', String(useBuildWorker))\n\n      if (\n        !useBuildWorker &&\n        (runServerAndEdgeInParallel || collectServerBuildTracesInParallel)\n      ) {\n        throw new Error(\n          'The \"parallelServerBuildTraces\" and \"parallelServerCompiles\" options may only be used when build workers can be used. Read more: https://nextjs.org/docs/messages/parallel-build-without-worker'\n        )\n      }\n\n      Log.info('Creating an optimized production build ...')\n      traceMemoryUsage('Starting build', nextBuildSpan)\n\n      await updateBuildDiagnostics({\n        buildStage: 'compile',\n        buildOptions: {\n          useBuildWorker: String(useBuildWorker),\n        },\n      })\n\n      let shutdownPromise = Promise.resolve()\n      if (!isGenerateMode) {\n        if (turboNextBuild) {\n          const {\n            duration: compilerDuration,\n            shutdownPromise: p,\n            ...rest\n          } = await turbopackBuild()\n          shutdownPromise = p\n          traceMemoryUsage('Finished build', nextBuildSpan)\n\n          buildTraceContext = rest.buildTraceContext\n\n          Log.event('Compiled successfully')\n\n          telemetry.record(\n            eventBuildCompleted(pagesPaths, {\n              durationInSeconds: compilerDuration,\n              totalAppPagesCount,\n            })\n          )\n        } else {\n          if (\n            runServerAndEdgeInParallel ||\n            collectServerBuildTracesInParallel\n          ) {\n            let durationInSeconds = 0\n\n            await updateBuildDiagnostics({\n              buildStage: 'compile-server',\n            })\n\n            const serverBuildPromise = webpackBuild(useBuildWorker, [\n              'server',\n            ]).then((res) => {\n              traceMemoryUsage('Finished server compilation', nextBuildSpan)\n              buildTraceContext = res.buildTraceContext\n              durationInSeconds += res.duration\n\n              if (collectServerBuildTracesInParallel) {\n                const buildTraceWorker = new Worker(\n                  require.resolve('./collect-build-traces'),\n                  {\n                    numWorkers: 1,\n                    exposedMethods: ['collectBuildTraces'],\n                  }\n                ) as Worker & typeof import('./collect-build-traces')\n\n                buildTracesPromise = buildTraceWorker\n                  .collectBuildTraces({\n                    dir,\n                    config,\n                    distDir,\n                    // Serialize Map as this is sent to the worker.\n                    edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(new Map()),\n                    staticPages: [],\n                    hasSsrAmpPages: false,\n                    buildTraceContext,\n                    outputFileTracingRoot,\n                    isFlyingShuttle: Boolean(flyingShuttle),\n                  })\n                  .catch((err) => {\n                    console.error(err)\n                    process.exit(1)\n                  })\n              }\n            })\n            if (!runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n\n            const edgeBuildPromise = webpackBuild(useBuildWorker, [\n              'edge-server',\n            ]).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage(\n                'Finished edge-server compilation',\n                nextBuildSpan\n              )\n            })\n            if (runServerAndEdgeInParallel) {\n              await serverBuildPromise\n              await updateBuildDiagnostics({\n                buildStage: 'webpack-compile-edge-server',\n              })\n            }\n            await edgeBuildPromise\n\n            await updateBuildDiagnostics({\n              buildStage: 'webpack-compile-client',\n            })\n\n            await webpackBuild(useBuildWorker, ['client']).then((res) => {\n              durationInSeconds += res.duration\n              traceMemoryUsage('Finished client compilation', nextBuildSpan)\n            })\n\n            Log.event('Compiled successfully')\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds,\n                totalAppPagesCount,\n              })\n            )\n          } else {\n            const { duration: compilerDuration, ...rest } = await webpackBuild(\n              useBuildWorker,\n              null\n            )\n            traceMemoryUsage('Finished build', nextBuildSpan)\n\n            buildTraceContext = rest.buildTraceContext\n\n            telemetry.record(\n              eventBuildCompleted(pagesPaths, {\n                durationInSeconds: compilerDuration,\n                totalAppPagesCount,\n              })\n            )\n          }\n        }\n      }\n\n      // For app directory, we run type checking after build.\n      if (appDir && !isCompileMode && !isGenerateMode) {\n        await updateBuildDiagnostics({\n          buildStage: 'type-checking',\n        })\n        await startTypeChecking(typeCheckingOptions)\n        traceMemoryUsage('Finished type checking', nextBuildSpan)\n      }\n\n      const postCompileSpinner = createSpinner('Collecting page data')\n\n      if (isFullFlyingShuttle) {\n        // we need to copy the chunks from the shuttle folder\n        // to the distDir (we copy all server split chunks currently)\n        // this has to come before we require any page chunks as webpack\n        // cache could reference previous runtimes/chunks\n        if (await fileExists(path.join(shuttleDir, 'server'))) {\n          await recursiveCopy(\n            path.join(shuttleDir, 'server'),\n            path.join(distDir, 'server'),\n            {\n              filter(item) {\n                // we copy page chunks separately to not copy stale entries\n                return !item.match(/^[/\\\\](pages|app)[/\\\\]/)\n              },\n              overwrite: true,\n            }\n          )\n        }\n      }\n\n      const buildManifestPath = path.join(distDir, BUILD_MANIFEST)\n      const appBuildManifestPath = path.join(distDir, APP_BUILD_MANIFEST)\n\n      let staticAppPagesCount = 0\n      let serverAppPagesCount = 0\n      let edgeRuntimeAppCount = 0\n      let edgeRuntimePagesCount = 0\n      const ssgPages = new Set<string>()\n      const ssgStaticFallbackPages = new Set<string>()\n      const ssgBlockingFallbackPages = new Set<string>()\n      const staticPages = new Set<string>()\n      const invalidPages = new Set<string>()\n      const hybridAmpPages = new Set<string>()\n      const serverPropsPages = new Set<string>()\n      const additionalPaths = new Map<string, PrerenderedRoute[]>()\n      const staticPaths = new Map<string, PrerenderedRoute[]>()\n      const appNormalizedPaths = new Map<string, string>()\n      const fallbackModes = new Map<string, FallbackMode>()\n      const appDefaultConfigs = new Map<string, AppConfig>()\n      const pageInfos: PageInfos = new Map<string, PageInfo>()\n      let pagesManifest = await readManifest<PagesManifest>(pagesManifestPath)\n      const buildManifest = await readManifest<BuildManifest>(buildManifestPath)\n      const appBuildManifest = appDir\n        ? await readManifest<AppBuildManifest>(appBuildManifestPath)\n        : undefined\n\n      const appPathRoutes: Record<string, string> = {}\n\n      if (appDir) {\n        const appPathsManifest = await readManifest<Record<string, string>>(\n          path.join(distDir, SERVER_DIRECTORY, APP_PATHS_MANIFEST)\n        )\n\n        for (const key in appPathsManifest) {\n          appPathRoutes[key] = normalizeAppPath(key)\n        }\n\n        await writeManifest(\n          path.join(distDir, APP_PATH_ROUTES_MANIFEST),\n          appPathRoutes\n        )\n      }\n\n      process.env.NEXT_PHASE = PHASE_PRODUCTION_BUILD\n\n      const worker = createStaticWorker(config)\n\n      const analysisBegin = process.hrtime()\n      const staticCheckSpan = nextBuildSpan.traceChild('static-check')\n\n      const functionsConfigManifest: FunctionsConfigManifest = {\n        version: 1,\n        functions: {},\n      }\n\n      const {\n        customAppGetInitialProps,\n        namedExports,\n        isNextImageImported,\n        hasSsrAmpPages,\n        hasNonStaticErrorPage,\n      } = await staticCheckSpan.traceAsyncFn(async () => {\n        if (isCompileMode) {\n          return {\n            customAppGetInitialProps: false,\n            namedExports: [],\n            isNextImageImported: true,\n            hasSsrAmpPages: !!pagesDir,\n            hasNonStaticErrorPage: true,\n          }\n        }\n\n        const { configFileName, publicRuntimeConfig, serverRuntimeConfig } =\n          config\n        const runtimeEnvConfig = { publicRuntimeConfig, serverRuntimeConfig }\n\n        const nonStaticErrorPageSpan = staticCheckSpan.traceChild(\n          'check-static-error-page'\n        )\n        const errorPageHasCustomGetInitialProps =\n          nonStaticErrorPageSpan.traceAsyncFn(\n            async () =>\n              hasCustomErrorPage &&\n              (await worker.hasCustomGetInitialProps({\n                page: '/_error',\n                distDir,\n                runtimeEnvConfig,\n                checkingApp: false,\n              }))\n          )\n\n        const errorPageStaticResult = nonStaticErrorPageSpan.traceAsyncFn(\n          async () =>\n            hasCustomErrorPage &&\n            worker.isPageStatic({\n              dir,\n              page: '/_error',\n              distDir,\n              configFileName,\n              runtimeEnvConfig,\n              httpAgentOptions: config.httpAgentOptions,\n              locales: config.i18n?.locales,\n              defaultLocale: config.i18n?.defaultLocale,\n              nextConfigOutput: config.output,\n              pprConfig: config.experimental.ppr,\n              isAppPPRFallbacksEnabled: config.experimental.pprFallbacks,\n            })\n        )\n\n        const appPageToCheck = '/_app'\n\n        const customAppGetInitialPropsPromise = worker.hasCustomGetInitialProps(\n          {\n            page: appPageToCheck,\n            distDir,\n            runtimeEnvConfig,\n            checkingApp: true,\n          }\n        )\n\n        const namedExportsPromise = worker.getDefinedNamedExports({\n          page: appPageToCheck,\n          distDir,\n          runtimeEnvConfig,\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let isNextImageImported: boolean | undefined\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        let hasSsrAmpPages = false\n\n        const computedManifestData = await computeFromManifest(\n          { build: buildManifest, app: appBuildManifest },\n          distDir,\n          config.experimental.gzipSize\n        )\n\n        const middlewareManifest: MiddlewareManifest = require(\n          path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n        )\n\n        const actionManifest = appDir\n          ? (require(\n              path.join(\n                distDir,\n                SERVER_DIRECTORY,\n                SERVER_REFERENCE_MANIFEST + '.json'\n              )\n            ) as ActionManifest)\n          : null\n        const entriesWithAction = actionManifest ? new Set() : null\n        if (actionManifest && entriesWithAction) {\n          for (const id in actionManifest.node) {\n            for (const entry in actionManifest.node[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n          for (const id in actionManifest.edge) {\n            for (const entry in actionManifest.edge[id].workers) {\n              entriesWithAction.add(entry)\n            }\n          }\n        }\n\n        for (const key of Object.keys(middlewareManifest?.functions)) {\n          if (key.startsWith('/api')) {\n            edgeRuntimePagesCount++\n          }\n        }\n\n        await Promise.all(\n          Object.entries(pageKeys)\n            .reduce<Array<{ pageType: keyof typeof pageKeys; page: string }>>(\n              (acc, [key, files]) => {\n                if (!files) {\n                  return acc\n                }\n\n                const pageType = key as keyof typeof pageKeys\n\n                for (const page of files) {\n                  acc.push({ pageType, page })\n                }\n\n                return acc\n              },\n              []\n            )\n            .map(({ pageType, page }) => {\n              const checkPageSpan = staticCheckSpan.traceChild('check-page', {\n                page,\n              })\n              return checkPageSpan.traceAsyncFn(async () => {\n                const actualPage = normalizePagePath(page)\n                const [size, totalSize] = await getJsPageSizeInKb(\n                  pageType,\n                  actualPage,\n                  distDir,\n                  buildManifest,\n                  appBuildManifest,\n                  config.experimental.gzipSize,\n                  computedManifestData\n                )\n\n                let isRoutePPREnabled = false\n                let isSSG = false\n                let isStatic = false\n                let isServerComponent = false\n                let isHybridAmp = false\n                let ssgPageRoutes: string[] | null = null\n                let pagePath = ''\n\n                if (pageType === 'pages') {\n                  pagePath =\n                    pagesPaths.find((p) => {\n                      p = normalizePathSep(p)\n                      return (\n                        p.startsWith(actualPage + '.') ||\n                        p.startsWith(actualPage + '/index.')\n                      )\n                    }) || ''\n                }\n                let originalAppPath: string | undefined\n\n                if (pageType === 'app' && mappedAppPages) {\n                  for (const [originalPath, normalizedPath] of Object.entries(\n                    appPathRoutes\n                  )) {\n                    if (normalizedPath === page) {\n                      pagePath = mappedAppPages[originalPath].replace(\n                        /^private-next-app-dir/,\n                        ''\n                      )\n                      originalAppPath = originalPath\n                      break\n                    }\n                  }\n                }\n\n                const pageFilePath = isAppBuiltinNotFoundPage(pagePath)\n                  ? require.resolve(\n                      'next/dist/client/components/not-found-error'\n                    )\n                  : path.join(\n                      (pageType === 'pages' ? pagesDir : appDir) || '',\n                      pagePath\n                    )\n\n                const isInsideAppDir = pageType === 'app'\n                const staticInfo = pagePath\n                  ? await getStaticInfoIncludingLayouts({\n                      isInsideAppDir,\n                      pageFilePath,\n                      pageExtensions: config.pageExtensions,\n                      appDir,\n                      config,\n                      isDev: false,\n                      // If this route is an App Router page route, inherit the\n                      // route segment configs (e.g. `runtime`) from the layout by\n                      // passing the `originalAppPath`, which should end with `/page`.\n                      page: isInsideAppDir ? originalAppPath! : page,\n                    })\n                  : undefined\n\n                if (staticInfo?.extraConfig) {\n                  functionsConfigManifest.functions[page] =\n                    staticInfo.extraConfig\n                }\n\n                const pageRuntime = middlewareManifest.functions[\n                  originalAppPath || page\n                ]\n                  ? 'edge'\n                  : staticInfo?.runtime\n\n                if (!isCompileMode) {\n                  isServerComponent =\n                    pageType === 'app' &&\n                    staticInfo?.rsc !== RSC_MODULE_TYPES.client\n\n                  if (pageType === 'app' || !isReservedPage(page)) {\n                    try {\n                      let edgeInfo: any\n\n                      if (isEdgeRuntime(pageRuntime)) {\n                        if (pageType === 'app') {\n                          edgeRuntimeAppCount++\n                        } else {\n                          edgeRuntimePagesCount++\n                        }\n\n                        const manifestKey =\n                          pageType === 'pages' ? page : originalAppPath || ''\n\n                        edgeInfo = middlewareManifest.functions[manifestKey]\n                      }\n\n                      let isPageStaticSpan =\n                        checkPageSpan.traceChild('is-page-static')\n                      let workerResult = await isPageStaticSpan.traceAsyncFn(\n                        () => {\n                          return worker.isPageStatic({\n                            dir,\n                            page,\n                            originalAppPath,\n                            distDir,\n                            configFileName,\n                            runtimeEnvConfig,\n                            httpAgentOptions: config.httpAgentOptions,\n                            locales: config.i18n?.locales,\n                            defaultLocale: config.i18n?.defaultLocale,\n                            parentId: isPageStaticSpan.getId(),\n                            pageRuntime,\n                            edgeInfo,\n                            pageType,\n                            cacheHandler: config.cacheHandler,\n                            isrFlushToDisk: ciEnvironment.hasNextSupport\n                              ? false\n                              : config.experimental.isrFlushToDisk,\n                            maxMemoryCacheSize: config.cacheMaxMemorySize,\n                            nextConfigOutput: config.output,\n                            pprConfig: config.experimental.ppr,\n                            isAppPPRFallbacksEnabled:\n                              config.experimental.pprFallbacks,\n                          })\n                        }\n                      )\n\n                      if (pageType === 'app' && originalAppPath) {\n                        appNormalizedPaths.set(originalAppPath, page)\n                        // TODO-APP: handle prerendering with edge\n                        if (isEdgeRuntime(pageRuntime)) {\n                          isStatic = false\n                          isSSG = false\n\n                          Log.warnOnce(\n                            `Using edge runtime on a page currently disables static generation for that page`\n                          )\n                        } else {\n                          // If this route can be partially pre-rendered, then\n                          // mark it as such and mark that it can be\n                          // generated server-side.\n                          if (workerResult.isRoutePPREnabled) {\n                            isRoutePPREnabled = workerResult.isRoutePPREnabled\n                            isSSG = true\n                            isStatic = true\n\n                            staticPaths.set(originalAppPath, [])\n                          }\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            staticPaths.set(\n                              originalAppPath,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                            isSSG = true\n                          }\n\n                          const appConfig = workerResult.appConfig || {}\n                          if (appConfig.revalidate !== 0) {\n                            const isDynamic = isDynamicRoute(page)\n                            const hasGenerateStaticParams =\n                              workerResult.prerenderedRoutes &&\n                              workerResult.prerenderedRoutes.length > 0\n\n                            if (\n                              config.output === 'export' &&\n                              isDynamic &&\n                              !hasGenerateStaticParams\n                            ) {\n                              throw new Error(\n                                `Page \"${page}\" is missing \"generateStaticParams()\" so it cannot be used with \"output: export\" config.`\n                              )\n                            }\n\n                            // Mark the app as static if:\n                            // - It has no dynamic param\n                            // - It doesn't have generateStaticParams but `dynamic` is set to\n                            //   `error` or `force-static`\n                            if (!isDynamic) {\n                              staticPaths.set(originalAppPath, [\n                                {\n                                  path: page,\n                                  encoded: page,\n                                  fallbackRouteParams: [],\n                                },\n                              ])\n                              isStatic = true\n                            } else if (\n                              !hasGenerateStaticParams &&\n                              (appConfig.dynamic === 'error' ||\n                                appConfig.dynamic === 'force-static')\n                            ) {\n                              staticPaths.set(originalAppPath, [])\n                              isStatic = true\n                              isRoutePPREnabled = false\n                            }\n                          }\n\n                          if (workerResult.prerenderFallbackMode) {\n                            fallbackModes.set(\n                              originalAppPath,\n                              workerResult.prerenderFallbackMode\n                            )\n                          }\n\n                          appDefaultConfigs.set(originalAppPath, appConfig)\n                        }\n                      } else {\n                        if (isEdgeRuntime(pageRuntime)) {\n                          if (workerResult.hasStaticProps) {\n                            console.warn(\n                              `\"getStaticProps\" is not yet supported fully with \"experimental-edge\", detected on ${page}`\n                            )\n                          }\n                          // TODO: add handling for statically rendering edge\n                          // pages and allow edge with Prerender outputs\n                          workerResult.isStatic = false\n                          workerResult.hasStaticProps = false\n                        }\n\n                        if (\n                          workerResult.isStatic === false &&\n                          (workerResult.isHybridAmp || workerResult.isAmpOnly)\n                        ) {\n                          hasSsrAmpPages = true\n                        }\n\n                        if (workerResult.isHybridAmp) {\n                          isHybridAmp = true\n                          hybridAmpPages.add(page)\n                        }\n\n                        if (workerResult.isNextImageImported) {\n                          isNextImageImported = true\n                        }\n\n                        if (workerResult.hasStaticProps) {\n                          ssgPages.add(page)\n                          isSSG = true\n\n                          if (\n                            workerResult.prerenderedRoutes &&\n                            workerResult.prerenderedRoutes.length > 0\n                          ) {\n                            additionalPaths.set(\n                              page,\n                              workerResult.prerenderedRoutes\n                            )\n                            ssgPageRoutes = workerResult.prerenderedRoutes.map(\n                              (route) => route.path\n                            )\n                          }\n\n                          if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.BLOCKING_STATIC_RENDER\n                          ) {\n                            ssgBlockingFallbackPages.add(page)\n                          } else if (\n                            workerResult.prerenderFallbackMode ===\n                            FallbackMode.PRERENDER\n                          ) {\n                            ssgStaticFallbackPages.add(page)\n                          }\n                        } else if (workerResult.hasServerProps) {\n                          serverPropsPages.add(page)\n                        } else if (\n                          workerResult.isStatic &&\n                          !isServerComponent &&\n                          (await customAppGetInitialPropsPromise) === false\n                        ) {\n                          staticPages.add(page)\n                          isStatic = true\n                        } else if (isServerComponent) {\n                          // This is a static server component page that doesn't have\n                          // gSP or gSSP. We still treat it as a SSG page.\n                          ssgPages.add(page)\n                          isSSG = true\n                        }\n\n                        if (hasPages404 && page === '/404') {\n                          if (\n                            !workerResult.isStatic &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            throw new Error(\n                              `\\`pages/404\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                            )\n                          }\n                          // we need to ensure the 404 lambda is present since we use\n                          // it when _app has getInitialProps\n                          if (\n                            (await customAppGetInitialPropsPromise) &&\n                            !workerResult.hasStaticProps\n                          ) {\n                            staticPages.delete(page)\n                          }\n                        }\n\n                        if (\n                          STATIC_STATUS_PAGES.includes(page) &&\n                          !workerResult.isStatic &&\n                          !workerResult.hasStaticProps\n                        ) {\n                          throw new Error(\n                            `\\`pages${page}\\` ${STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR}`\n                          )\n                        }\n                      }\n                    } catch (err) {\n                      if (\n                        !isError(err) ||\n                        err.message !== 'INVALID_DEFAULT_EXPORT'\n                      )\n                        throw err\n                      invalidPages.add(page)\n                    }\n                  }\n\n                  if (pageType === 'app') {\n                    if (isSSG || isStatic) {\n                      staticAppPagesCount++\n                    } else {\n                      serverAppPagesCount++\n                    }\n                  }\n                }\n\n                pageInfos.set(page, {\n                  size,\n                  totalSize,\n                  isStatic,\n                  isSSG,\n                  isRoutePPREnabled,\n                  isHybridAmp,\n                  ssgPageRoutes,\n                  initialRevalidateSeconds: false,\n                  runtime: pageRuntime,\n                  pageDuration: undefined,\n                  ssgPageDurations: undefined,\n                  hasEmptyPrelude: undefined,\n                })\n              })\n            })\n        )\n\n        if (hadUnsupportedValue) {\n          Log.error(\n            `Invalid config value exports detected, these can cause unexpected behavior from the configs not being applied. Please fix them to continue`\n          )\n          process.exit(1)\n        }\n\n        const errorPageResult = await errorPageStaticResult\n        const nonStaticErrorPage =\n          (await errorPageHasCustomGetInitialProps) ||\n          (errorPageResult && errorPageResult.hasServerProps)\n\n        const returnValue = {\n          customAppGetInitialProps: await customAppGetInitialPropsPromise,\n          namedExports: await namedExportsPromise,\n          isNextImageImported,\n          hasSsrAmpPages,\n          hasNonStaticErrorPage: nonStaticErrorPage,\n        }\n\n        return returnValue\n      })\n\n      if (postCompileSpinner) postCompileSpinner.stopAndPersist()\n      traceMemoryUsage('Finished collecting page data', nextBuildSpan)\n\n      if (customAppGetInitialProps) {\n        console.warn(\n          bold(yellow(`Warning: `)) +\n            yellow(\n              `You have opted-out of Automatic Static Optimization due to \\`getInitialProps\\` in \\`pages/_app\\`. This does not opt-out pages with \\`getStaticProps\\``\n            )\n        )\n        console.warn(\n          'Read more: https://nextjs.org/docs/messages/opt-out-auto-static-optimization\\n'\n        )\n      }\n\n      const { cacheHandler } = config\n\n      const instrumentationHookEntryFiles: string[] = []\n      if (hasInstrumentationHook) {\n        instrumentationHookEntryFiles.push(\n          path.join(SERVER_DIRECTORY, `${INSTRUMENTATION_HOOK_FILENAME}.js`)\n        )\n        // If there's edge routes, append the edge instrumentation hook\n        if (edgeRuntimeAppCount || edgeRuntimePagesCount) {\n          instrumentationHookEntryFiles.push(\n            path.join(\n              SERVER_DIRECTORY,\n              `edge-${INSTRUMENTATION_HOOK_FILENAME}.js`\n            )\n          )\n        }\n      }\n\n      const requiredServerFilesManifest = nextBuildSpan\n        .traceChild('generate-required-server-files')\n        .traceFn(() => {\n          const serverFilesManifest: RequiredServerFilesManifest = {\n            version: 1,\n            config: {\n              ...config,\n              configFile: undefined,\n              ...(ciEnvironment.hasNextSupport\n                ? {\n                    compress: false,\n                  }\n                : {}),\n              cacheHandler: cacheHandler\n                ? path.relative(distDir, cacheHandler)\n                : config.cacheHandler,\n              experimental: {\n                ...config.experimental,\n                trustHostHeader: ciEnvironment.hasNextSupport,\n\n                // @ts-expect-error internal field TODO: fix this, should use a separate mechanism to pass the info.\n                isExperimentalCompile: isCompileMode,\n              },\n            },\n            appDir: dir,\n            relativeAppDir: path.relative(outputFileTracingRoot, dir),\n            files: [\n              ROUTES_MANIFEST,\n              path.relative(distDir, pagesManifestPath),\n              BUILD_MANIFEST,\n              PRERENDER_MANIFEST,\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_MANIFEST),\n              path.join(SERVER_DIRECTORY, MIDDLEWARE_BUILD_MANIFEST + '.js'),\n              path.join(\n                SERVER_DIRECTORY,\n                MIDDLEWARE_REACT_LOADABLE_MANIFEST + '.js'\n              ),\n              ...(appDir\n                ? [\n                    ...(config.experimental.sri\n                      ? [\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.js'\n                          ),\n                          path.join(\n                            SERVER_DIRECTORY,\n                            SUBRESOURCE_INTEGRITY_MANIFEST + '.json'\n                          ),\n                        ]\n                      : []),\n                    path.join(SERVER_DIRECTORY, APP_PATHS_MANIFEST),\n                    path.join(APP_PATH_ROUTES_MANIFEST),\n                    APP_BUILD_MANIFEST,\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.js'\n                    ),\n                    path.join(\n                      SERVER_DIRECTORY,\n                      SERVER_REFERENCE_MANIFEST + '.json'\n                    ),\n                  ]\n                : []),\n              REACT_LOADABLE_MANIFEST,\n              BUILD_ID_FILE,\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.js'),\n              path.join(SERVER_DIRECTORY, NEXT_FONT_MANIFEST + '.json'),\n              ...instrumentationHookEntryFiles,\n            ]\n              .filter(nonNullable)\n              .map((file) => path.join(config.distDir, file)),\n            ignore: [] as string[],\n          }\n\n          return serverFilesManifest\n        })\n\n      if (!hasSsrAmpPages) {\n        requiredServerFilesManifest.ignore.push(\n          path.relative(\n            dir,\n            path.join(\n              path.dirname(\n                require.resolve(\n                  'next/dist/compiled/@ampproject/toolbox-optimizer'\n                )\n              ),\n              '**/*'\n            )\n          )\n        )\n      }\n\n      await writeFunctionsConfigManifest(distDir, functionsConfigManifest)\n\n      if (!isGenerateMode && !buildTracesPromise) {\n        buildTracesPromise = collectBuildTraces({\n          dir,\n          config,\n          distDir,\n          edgeRuntimeRoutes: collectRoutesUsingEdgeRuntime(pageInfos),\n          staticPages: [...staticPages],\n          nextBuildSpan,\n          hasSsrAmpPages,\n          buildTraceContext,\n          outputFileTracingRoot,\n          isFlyingShuttle: Boolean(flyingShuttle),\n        }).catch((err) => {\n          console.error(err)\n          process.exit(1)\n        })\n      }\n\n      if (serverPropsPages.size > 0 || ssgPages.size > 0) {\n        // We update the routes manifest after the build with the\n        // data routes since we can't determine these until after build\n        routesManifest.dataRoutes = getSortedRoutes([\n          ...serverPropsPages,\n          ...ssgPages,\n        ]).map((page) => {\n          return buildDataRoute(page, buildId)\n        })\n\n        // await writeManifest(routesManifestPath, routesManifest)\n      }\n\n      // We need to write the manifest with rewrites before build\n      await nextBuildSpan\n        .traceChild('write-routes-manifest')\n        .traceAsyncFn(() => writeManifest(routesManifestPath, routesManifest))\n\n      // Since custom _app.js can wrap the 404 page we have to opt-out of static optimization if it has getInitialProps\n      // Only export the static 404 when there is no /_error present\n      const useStaticPages404 =\n        !customAppGetInitialProps && (!hasNonStaticErrorPage || hasPages404)\n\n      if (invalidPages.size > 0) {\n        const err = new Error(\n          `Build optimization failed: found page${\n            invalidPages.size === 1 ? '' : 's'\n          } without a React Component as default export in \\n${[...invalidPages]\n            .map((pg) => `pages${pg}`)\n            .join(\n              '\\n'\n            )}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.\\n`\n        ) as NextError\n        err.code = 'BUILD_OPTIMIZATION_FAILED'\n        throw err\n      }\n\n      await writeBuildId(distDir, buildId)\n\n      if (config.experimental.optimizeCss) {\n        const globOrig =\n          require('next/dist/compiled/glob') as typeof import('next/dist/compiled/glob')\n\n        const cssFilePaths = await new Promise<string[]>((resolve, reject) => {\n          globOrig(\n            '**/*.css',\n            { cwd: path.join(distDir, 'static') },\n            (err, files) => {\n              if (err) {\n                return reject(err)\n              }\n              resolve(files)\n            }\n          )\n        })\n\n        requiredServerFilesManifest.files.push(\n          ...cssFilePaths.map((filePath) =>\n            path.join(config.distDir, 'static', filePath)\n          )\n        )\n      }\n\n      const features: EventBuildFeatureUsage[] = [\n        {\n          featureName: 'experimental/optimizeCss',\n          invocationCount: config.experimental.optimizeCss ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/nextScriptWorkers',\n          invocationCount: config.experimental.nextScriptWorkers ? 1 : 0,\n        },\n        {\n          featureName: 'experimental/ppr',\n          invocationCount: config.experimental.ppr ? 1 : 0,\n        },\n      ]\n      telemetry.record(\n        features.map((feature) => {\n          return {\n            eventName: EVENT_BUILD_FEATURE_USAGE,\n            payload: feature,\n          }\n        })\n      )\n\n      await writeRequiredServerFilesManifest(\n        distDir,\n        requiredServerFilesManifest\n      )\n\n      const middlewareManifest: MiddlewareManifest = await readManifest(\n        path.join(distDir, SERVER_DIRECTORY, MIDDLEWARE_MANIFEST)\n      )\n\n      if (!isGenerateMode) {\n        if (flyingShuttle) {\n          await buildTracesPromise\n\n          if (isStoreOnlyFlyingShuttle) {\n            console.log('skipping stitching builds due to store-only mode')\n          } else {\n            console.log('stitching builds...')\n            const stitchResult = await stitchBuilds(\n              {\n                config,\n                buildId,\n                distDir,\n                shuttleDir,\n                rewrites,\n                redirects,\n                edgePreviewProps: {\n                  __NEXT_PREVIEW_MODE_ID:\n                    NextBuildContext.previewProps!.previewModeId,\n                  __NEXT_PREVIEW_MODE_ENCRYPTION_KEY:\n                    NextBuildContext.previewProps!.previewModeEncryptionKey,\n                  __NEXT_PREVIEW_MODE_SIGNING_KEY:\n                    NextBuildContext.previewProps!.previewModeSigningKey,\n                },\n                encryptionKey,\n                allowedErrorRate:\n                  config.experimental.clientRouterFilterAllowedRate,\n              },\n              {\n                changed: {\n                  pages: changedPagePathsResult?.changed.pages || [],\n                  app: changedAppPathsResult?.changed.app || [],\n                },\n                unchanged: {\n                  pages: changedPagePathsResult?.unchanged.pages || [],\n                  app: changedAppPathsResult?.unchanged.app || [],\n                },\n                pageExtensions: config.pageExtensions,\n              }\n            )\n            // reload pagesManifest since it's been updated on disk\n            if (stitchResult.pagesManifest) {\n              pagesManifest = stitchResult.pagesManifest\n            }\n          }\n\n          console.log('storing shuttle')\n          await storeShuttle({\n            config,\n            distDir,\n            shuttleDir,\n          })\n\n          console.log('inlining static env')\n          await inlineStaticEnv({ distDir })\n        }\n      }\n\n      const prerenderManifest: PrerenderManifest = {\n        version: 4,\n        routes: {},\n        dynamicRoutes: {},\n        notFoundRoutes: [],\n        preview: previewProps,\n      }\n\n      const tbdPrerenderRoutes: string[] = []\n\n      const { i18n } = config\n\n      const usedStaticStatusPages = STATIC_STATUS_PAGES.filter(\n        (page) =>\n          mappedPages[page] &&\n          mappedPages[page].startsWith('private-next-pages')\n      )\n      usedStaticStatusPages.forEach((page) => {\n        if (!ssgPages.has(page) && !customAppGetInitialProps) {\n          staticPages.add(page)\n        }\n      })\n\n      const hasPages500 = usedStaticStatusPages.includes('/500')\n      const useDefaultStatic500 =\n        !hasPages500 && !hasNonStaticErrorPage && !customAppGetInitialProps\n\n      const combinedPages = [...staticPages, ...ssgPages]\n      const isApp404Static = staticPaths.has(UNDERSCORE_NOT_FOUND_ROUTE_ENTRY)\n      const hasStaticApp404 = hasApp404 && isApp404Static\n\n      await updateBuildDiagnostics({\n        buildStage: 'static-generation',\n      })\n\n      // we need to trigger automatic exporting when we have\n      // - static 404/500\n      // - getStaticProps paths\n      // - experimental app is enabled\n      if (\n        !isCompileMode &&\n        (combinedPages.length > 0 ||\n          useStaticPages404 ||\n          useDefaultStatic500 ||\n          appDir)\n      ) {\n        const staticGenerationSpan =\n          nextBuildSpan.traceChild('static-generation')\n        await staticGenerationSpan.traceAsyncFn(async () => {\n          detectConflictingPaths(\n            [\n              ...combinedPages,\n              ...pageKeys.pages.filter((page) => !combinedPages.includes(page)),\n            ],\n            ssgPages,\n            new Map(\n              Array.from(additionalPaths.entries()).map(\n                ([page, routes]): [string, string[]] => {\n                  return [page, routes.map((route) => route.path)]\n                }\n              )\n            )\n          )\n          const exportApp = require('../export')\n            .default as typeof import('../export').default\n\n          const exportConfig: NextConfigComplete = {\n            ...config,\n            // Default map will be the collection of automatic statically exported\n            // pages and incremental pages.\n            // n.b. we cannot handle this above in combinedPages because the dynamic\n            // page must be in the `pages` array, but not in the mapping.\n            exportPathMap: (defaultMap: ExportPathMap) => {\n              // Dynamically routed pages should be prerendered to be used as\n              // a client-side skeleton (fallback) while data is being fetched.\n              // This ensures the end-user never sees a 500 or slow response from the\n              // server.\n              //\n              // Note: prerendering disables automatic static optimization.\n              ssgPages.forEach((page) => {\n                if (isDynamicRoute(page)) {\n                  tbdPrerenderRoutes.push(page)\n\n                  if (ssgStaticFallbackPages.has(page)) {\n                    // Override the rendering for the dynamic page to be treated as a\n                    // fallback render.\n                    if (i18n) {\n                      defaultMap[`/${i18n.defaultLocale}${page}`] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    } else {\n                      defaultMap[page] = {\n                        page,\n                        query: { __nextFallback: 'true' },\n                      }\n                    }\n                  } else {\n                    // Remove dynamically routed pages from the default path map when\n                    // fallback behavior is disabled.\n                    delete defaultMap[page]\n                  }\n                }\n              })\n\n              // Append the \"well-known\" routes we should prerender for, e.g. blog\n              // post slugs.\n              additionalPaths.forEach((routes, page) => {\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page,\n                    query: { __nextSsgPath: route.encoded },\n                  }\n                })\n              })\n\n              if (useStaticPages404) {\n                defaultMap['/404'] = {\n                  page: hasPages404 ? '/404' : '/_error',\n                }\n              }\n\n              if (useDefaultStatic500) {\n                defaultMap['/500'] = {\n                  page: '/_error',\n                }\n              }\n\n              // TODO: output manifest specific to app paths and their\n              // revalidate periods and dynamicParams settings\n              staticPaths.forEach((routes, originalAppPath) => {\n                const appConfig = appDefaultConfigs.get(originalAppPath)\n                const isDynamicError = appConfig?.dynamic === 'error'\n\n                const isRoutePPREnabled = appConfig\n                  ? checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                  : undefined\n\n                routes.forEach((route) => {\n                  defaultMap[route.path] = {\n                    page: originalAppPath,\n                    query: { __nextSsgPath: route.encoded },\n                    _fallbackRouteParams: route.fallbackRouteParams,\n                    _isDynamicError: isDynamicError,\n                    _isAppDir: true,\n                    _isRoutePPREnabled: isRoutePPREnabled,\n                  }\n                })\n              })\n\n              if (i18n) {\n                for (const page of [\n                  ...staticPages,\n                  ...ssgPages,\n                  ...(useStaticPages404 ? ['/404'] : []),\n                  ...(useDefaultStatic500 ? ['/500'] : []),\n                ]) {\n                  const isSsg = ssgPages.has(page)\n                  const isDynamic = isDynamicRoute(page)\n                  const isFallback = isSsg && ssgStaticFallbackPages.has(page)\n\n                  for (const locale of i18n.locales) {\n                    // skip fallback generation for SSG pages without fallback mode\n                    if (isSsg && isDynamic && !isFallback) continue\n                    const outputPath = `/${locale}${page === '/' ? '' : page}`\n\n                    defaultMap[outputPath] = {\n                      page: defaultMap[page]?.page || page,\n                      query: {\n                        __nextLocale: locale,\n                        __nextFallback: isFallback ? 'true' : undefined,\n                      },\n                    }\n                  }\n\n                  if (isSsg) {\n                    // remove non-locale prefixed variant from defaultMap\n                    delete defaultMap[page]\n                  }\n                }\n              }\n\n              return defaultMap\n            },\n          }\n\n          const exportOptions: ExportAppOptions = {\n            nextConfig: exportConfig,\n            enabledDirectories,\n            silent: true,\n            buildExport: true,\n            debugOutput,\n            pages: combinedPages,\n            outdir: path.join(distDir, 'export'),\n            statusMessage: 'Generating static pages',\n            numWorkers: getNumberOfWorkers(exportConfig),\n          }\n\n          const exportResult = await exportApp(\n            dir,\n            exportOptions,\n            nextBuildSpan\n          )\n\n          // If there was no result, there's nothing more to do.\n          if (!exportResult) return\n\n          if (debugOutput || process.env.NEXT_SSG_FETCH_METRICS === '1') {\n            recordFetchMetrics(exportResult)\n          }\n\n          writeTurborepoAccessTraceResult({\n            distDir: config.distDir,\n            traces: [\n              turborepoAccessTraceResult,\n              ...exportResult.turborepoAccessTraceResults.values(),\n            ],\n          })\n\n          prerenderManifest.notFoundRoutes = Array.from(\n            exportResult.ssgNotFoundPaths\n          )\n\n          // remove server bundles that were exported\n          for (const page of staticPages) {\n            const serverBundle = getPagePath(page, distDir, undefined, false)\n            await fs.unlink(serverBundle)\n          }\n\n          staticPaths.forEach((prerenderedRoutes, originalAppPath) => {\n            const page = appNormalizedPaths.get(originalAppPath) || ''\n            const appConfig = appDefaultConfigs.get(originalAppPath) || {}\n\n            let hasRevalidateZero =\n              appConfig.revalidate === 0 ||\n              exportResult.byPath.get(page)?.revalidate === 0\n\n            if (hasRevalidateZero && pageInfos.get(page)?.isStatic) {\n              // if the page was marked as being static, but it contains dynamic data\n              // (ie, in the case of a static generation bailout), then it should be marked dynamic\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                isStatic: false,\n                isSSG: false,\n              })\n            }\n\n            const isAppRouteHandler = isAppRouteRoute(originalAppPath)\n\n            // When this is an app page and PPR is enabled, the route supports\n            // partial pre-rendering.\n            const isRoutePPREnabled: true | undefined =\n              !isAppRouteHandler &&\n              checkIsRoutePPREnabled(config.experimental.ppr, appConfig)\n                ? true\n                : undefined\n\n            // this flag is used to selectively bypass the static cache and invoke the lambda directly\n            // to enable server actions on static routes\n            const bypassFor: RouteHas[] = [\n              { type: 'header', key: ACTION_HEADER },\n              {\n                type: 'header',\n                key: 'content-type',\n                value: 'multipart/form-data;.*',\n              },\n            ]\n\n            // We should collect all the dynamic routes into a single array for\n            // this page. Including the full fallback route (the original\n            // route), any routes that were generated with unknown route params\n            // should be collected and included in the dynamic routes part\n            // of the manifest instead.\n            const routes: string[] = []\n            const dynamicRoutes: string[] = []\n\n            // Sort the outputted routes to ensure consistent output. Any route\n            // though that has unknown route params will be pulled and sorted\n            // independently. This is because the routes with unknown route\n            // params will contain the dynamic path parameters, some of which\n            // may conflict with the actual prerendered routes.\n            let unknownPrerenderRoutes: PrerenderedRoute[] = []\n            let knownPrerenderRoutes: PrerenderedRoute[] = []\n            for (const prerenderedRoute of prerenderedRoutes) {\n              if (\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                unknownPrerenderRoutes.push(prerenderedRoute)\n              } else {\n                knownPrerenderRoutes.push(prerenderedRoute)\n              }\n            }\n\n            unknownPrerenderRoutes = getSortedRouteObjects(\n              unknownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n            knownPrerenderRoutes = getSortedRouteObjects(\n              knownPrerenderRoutes,\n              (prerenderedRoute) => prerenderedRoute.path\n            )\n\n            prerenderedRoutes = [\n              ...knownPrerenderRoutes,\n              ...unknownPrerenderRoutes,\n            ]\n\n            for (const prerenderedRoute of prerenderedRoutes) {\n              // TODO: check if still needed?\n              // Exclude the /_not-found route.\n              if (prerenderedRoute.path === UNDERSCORE_NOT_FOUND_ROUTE) {\n                continue\n              }\n\n              if (\n                isRoutePPREnabled &&\n                prerenderedRoute.fallbackRouteParams &&\n                prerenderedRoute.fallbackRouteParams.length > 0\n              ) {\n                // If the route has unknown params, then we need to add it to\n                // the list of dynamic routes.\n                dynamicRoutes.push(prerenderedRoute.path)\n              } else {\n                // If the route doesn't have unknown params, then we need to\n                // add it to the list of routes.\n                routes.push(prerenderedRoute.path)\n              }\n            }\n\n            // Handle all the static routes.\n            for (const route of routes) {\n              if (isDynamicRoute(page) && route === page) continue\n              if (route === UNDERSCORE_NOT_FOUND_ROUTE) continue\n\n              const {\n                revalidate = appConfig.revalidate ?? false,\n                metadata = {},\n                hasEmptyPrelude,\n                hasPostponed,\n              } = exportResult.byPath.get(route) ?? {}\n\n              pageInfos.set(route, {\n                ...(pageInfos.get(route) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              // update the page (eg /blog/[slug]) to also have the postpone metadata\n              pageInfos.set(page, {\n                ...(pageInfos.get(page) as PageInfo),\n                hasPostponed,\n                hasEmptyPrelude,\n              })\n\n              if (revalidate !== 0) {\n                const normalizedRoute = normalizePagePath(route)\n\n                let dataRoute: string | null\n                if (isAppRouteHandler) {\n                  dataRoute = null\n                } else {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | null | undefined\n                // While we may only write the `.rsc` when the route does not\n                // have PPR enabled, we still want to generate the route when\n                // deployed so it doesn't 404. If the app has PPR enabled, we\n                // should add this key.\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                const meta = collectMeta(metadata)\n\n                prerenderManifest.routes[route] = {\n                  initialStatus: meta.status,\n                  initialHeaders: meta.headers,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalPPR: isRoutePPREnabled,\n                  experimentalBypassFor: bypassFor,\n                  initialRevalidateSeconds: revalidate,\n                  srcRoute: page,\n                  dataRoute,\n                  prefetchDataRoute,\n                }\n              } else {\n                hasRevalidateZero = true\n                // we might have determined during prerendering that this page\n                // used dynamic data\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isSSG: false,\n                  isStatic: false,\n                })\n              }\n            }\n\n            if (!hasRevalidateZero && isDynamicRoute(page)) {\n              // When PPR fallbacks aren't used, we need to include it here. If\n              // they are enabled, then it'll already be included in the\n              // prerendered routes.\n              if (!isRoutePPREnabled || !config.experimental.pprFallbacks) {\n                dynamicRoutes.push(page)\n              }\n\n              for (const route of dynamicRoutes) {\n                const normalizedRoute = normalizePagePath(route)\n\n                const { metadata, revalidate } =\n                  exportResult.byPath.get(route) ?? {}\n\n                let dataRoute: string | null = null\n                if (!isAppRouteHandler) {\n                  dataRoute = path.posix.join(`${normalizedRoute}${RSC_SUFFIX}`)\n                }\n\n                let prefetchDataRoute: string | undefined\n                if (!isAppRouteHandler && isAppPPREnabled) {\n                  prefetchDataRoute = path.posix.join(\n                    `${normalizedRoute}${RSC_PREFETCH_SUFFIX}`\n                  )\n                }\n\n                pageInfos.set(route, {\n                  ...(pageInfos.get(route) as PageInfo),\n                  isDynamicAppRoute: true,\n                  // if PPR is turned on and the route contains a dynamic segment,\n                  // we assume it'll be partially prerendered\n                  hasPostponed: isRoutePPREnabled,\n                })\n\n                const fallbackMode =\n                  fallbackModes.get(originalAppPath) ?? FallbackMode.NOT_FOUND\n\n                // When we're configured to serve a prerender, we should use the\n                // fallback revalidate from the export result. If it can't be\n                // found, mark that we should keep the shell forever (`false`).\n                let fallbackRevalidate: Revalidate | undefined =\n                  isRoutePPREnabled && fallbackMode === FallbackMode.PRERENDER\n                    ? revalidate ?? false\n                    : undefined\n\n                const fallback: Fallback = fallbackModeToFallbackField(\n                  fallbackMode,\n                  route\n                )\n\n                const meta =\n                  metadata &&\n                  isRoutePPREnabled &&\n                  fallbackMode === FallbackMode.PRERENDER\n                    ? collectMeta(metadata)\n                    : {}\n\n                prerenderManifest.dynamicRoutes[route] = {\n                  experimentalPPR: isRoutePPREnabled,\n                  renderingMode: isAppPPREnabled\n                    ? isRoutePPREnabled\n                      ? RenderingMode.PARTIALLY_STATIC\n                      : RenderingMode.STATIC\n                    : undefined,\n                  experimentalBypassFor: bypassFor,\n                  routeRegex: normalizeRouteRegex(\n                    getNamedRouteRegex(route, false).re.source\n                  ),\n                  dataRoute,\n                  fallback,\n                  fallbackRevalidate,\n                  fallbackStatus: meta.status,\n                  fallbackHeaders: meta.headers,\n                  dataRouteRegex: !dataRoute\n                    ? null\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          dataRoute.replace(/\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.rsc$')\n                      ),\n                  prefetchDataRoute,\n                  prefetchDataRouteRegex: !prefetchDataRoute\n                    ? undefined\n                    : normalizeRouteRegex(\n                        getNamedRouteRegex(\n                          prefetchDataRoute.replace(/\\.prefetch\\.rsc$/, ''),\n                          false\n                        ).re.source.replace(\n                          /\\(\\?:\\\\\\/\\)\\?\\$$/,\n                          '\\\\.prefetch\\\\.rsc$'\n                        )\n                      ),\n                }\n              }\n            }\n          })\n\n          const moveExportedPage = async (\n            originPage: string,\n            page: string,\n            file: string,\n            isSsg: boolean,\n            ext: 'html' | 'json',\n            additionalSsgFile = false\n          ) => {\n            return staticGenerationSpan\n              .traceChild('move-exported-page')\n              .traceAsyncFn(async () => {\n                file = `${file}.${ext}`\n                const orig = path.join(exportOptions.outdir, file)\n                const pagePath = getPagePath(\n                  originPage,\n                  distDir,\n                  undefined,\n                  false\n                )\n\n                const relativeDest = path\n                  .relative(\n                    path.join(distDir, SERVER_DIRECTORY),\n                    path.join(\n                      path.join(\n                        pagePath,\n                        // strip leading / and then recurse number of nested dirs\n                        // to place from base folder\n                        originPage\n                          .slice(1)\n                          .split('/')\n                          .map(() => '..')\n                          .join('/')\n                      ),\n                      file\n                    )\n                  )\n                  .replace(/\\\\/g, '/')\n\n                if (\n                  !isSsg &&\n                  !(\n                    // don't add static status page to manifest if it's\n                    // the default generated version e.g. no pages/500\n                    (\n                      STATIC_STATUS_PAGES.includes(page) &&\n                      !usedStaticStatusPages.includes(page)\n                    )\n                  )\n                ) {\n                  pagesManifest[page] = relativeDest\n                }\n\n                const dest = path.join(distDir, SERVER_DIRECTORY, relativeDest)\n                const isNotFound =\n                  prerenderManifest.notFoundRoutes.includes(page)\n\n                // for SSG files with i18n the non-prerendered variants are\n                // output with the locale prefixed so don't attempt moving\n                // without the prefix\n                if ((!i18n || additionalSsgFile) && !isNotFound) {\n                  await fs.mkdir(path.dirname(dest), { recursive: true })\n                  await fs.rename(orig, dest)\n                } else if (i18n && !isSsg) {\n                  // this will be updated with the locale prefixed variant\n                  // since all files are output with the locale prefix\n                  delete pagesManifest[page]\n                }\n\n                if (i18n) {\n                  if (additionalSsgFile) return\n\n                  const localeExt = page === '/' ? path.extname(file) : ''\n                  const relativeDestNoPages = relativeDest.slice(\n                    'pages/'.length\n                  )\n\n                  for (const locale of i18n.locales) {\n                    const curPath = `/${locale}${page === '/' ? '' : page}`\n\n                    if (\n                      isSsg &&\n                      prerenderManifest.notFoundRoutes.includes(curPath)\n                    ) {\n                      continue\n                    }\n\n                    const updatedRelativeDest = path\n                      .join(\n                        'pages',\n                        locale + localeExt,\n                        // if it's the top-most index page we want it to be locale.EXT\n                        // instead of locale/index.html\n                        page === '/' ? '' : relativeDestNoPages\n                      )\n                      .replace(/\\\\/g, '/')\n\n                    const updatedOrig = path.join(\n                      exportOptions.outdir,\n                      locale + localeExt,\n                      page === '/' ? '' : file\n                    )\n                    const updatedDest = path.join(\n                      distDir,\n                      SERVER_DIRECTORY,\n                      updatedRelativeDest\n                    )\n\n                    if (!isSsg) {\n                      pagesManifest[curPath] = updatedRelativeDest\n                    }\n                    await fs.mkdir(path.dirname(updatedDest), {\n                      recursive: true,\n                    })\n                    await fs.rename(updatedOrig, updatedDest)\n                  }\n                }\n              })\n          }\n\n          async function moveExportedAppNotFoundTo404() {\n            return staticGenerationSpan\n              .traceChild('move-exported-app-not-found-')\n              .traceAsyncFn(async () => {\n                const orig = path.join(\n                  distDir,\n                  'server',\n                  'app',\n                  '_not-found.html'\n                )\n                const updatedRelativeDest = path\n                  .join('pages', '404.html')\n                  .replace(/\\\\/g, '/')\n\n                if (existsSync(orig)) {\n                  await fs.copyFile(\n                    orig,\n                    path.join(distDir, 'server', updatedRelativeDest)\n                  )\n                  pagesManifest['/404'] = updatedRelativeDest\n                }\n              })\n          }\n\n          // If there's /not-found inside app, we prefer it over the pages 404\n          if (hasStaticApp404) {\n            await moveExportedAppNotFoundTo404()\n          } else {\n            // Only move /404 to /404 when there is no custom 404 as in that case we don't know about the 404 page\n            if (!hasPages404 && !hasApp404 && useStaticPages404) {\n              await moveExportedPage('/_error', '/404', '/404', false, 'html')\n            }\n          }\n\n          if (useDefaultStatic500) {\n            await moveExportedPage('/_error', '/500', '/500', false, 'html')\n          }\n\n          for (const page of combinedPages) {\n            const isSsg = ssgPages.has(page)\n            const isStaticSsgFallback = ssgStaticFallbackPages.has(page)\n            const isDynamic = isDynamicRoute(page)\n            const hasAmp = hybridAmpPages.has(page)\n            const file = normalizePagePath(page)\n\n            const pageInfo = pageInfos.get(page)\n            const durationInfo = exportResult.byPage.get(page)\n            if (pageInfo && durationInfo) {\n              // Set Build Duration\n              if (pageInfo.ssgPageRoutes) {\n                pageInfo.ssgPageDurations = pageInfo.ssgPageRoutes.map(\n                  (pagePath) => {\n                    const duration = durationInfo.durationsByPath.get(pagePath)\n                    if (typeof duration === 'undefined') {\n                      throw new Error(\"Invariant: page wasn't built\")\n                    }\n\n                    return duration\n                  }\n                )\n              }\n              pageInfo.pageDuration = durationInfo.durationsByPath.get(page)\n            }\n\n            // The dynamic version of SSG pages are only prerendered if the\n            // fallback is enabled. Below, we handle the specific prerenders\n            // of these.\n            const hasHtmlOutput = !(isSsg && isDynamic && !isStaticSsgFallback)\n\n            if (hasHtmlOutput) {\n              await moveExportedPage(page, page, file, isSsg, 'html')\n            }\n\n            if (hasAmp && (!isSsg || (isSsg && !isDynamic))) {\n              const ampPage = `${file}.amp`\n              await moveExportedPage(page, ampPage, ampPage, isSsg, 'html')\n\n              if (isSsg) {\n                await moveExportedPage(page, ampPage, ampPage, isSsg, 'json')\n              }\n            }\n\n            if (isSsg) {\n              // For a non-dynamic SSG page, we must copy its data file\n              // from export, we already moved the HTML file above\n              if (!isDynamic) {\n                await moveExportedPage(page, page, file, isSsg, 'json')\n\n                if (i18n) {\n                  // TODO: do we want to show all locale variants in build output\n                  for (const locale of i18n.locales) {\n                    const localePage = `/${locale}${page === '/' ? '' : page}`\n\n                    prerenderManifest.routes[localePage] = {\n                      initialRevalidateSeconds:\n                        exportResult.byPath.get(localePage)?.revalidate ??\n                        false,\n                      experimentalPPR: undefined,\n                      renderingMode: undefined,\n                      srcRoute: null,\n                      dataRoute: path.posix.join(\n                        '/_next/data',\n                        buildId,\n                        `${file}.json`\n                      ),\n                      prefetchDataRoute: undefined,\n                    }\n                  }\n                } else {\n                  prerenderManifest.routes[page] = {\n                    initialRevalidateSeconds:\n                      exportResult.byPath.get(page)?.revalidate ?? false,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: null,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${file}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n                }\n                // Set Page Revalidation Interval\n                if (pageInfo) {\n                  pageInfo.initialRevalidateSeconds =\n                    exportResult.byPath.get(page)?.revalidate ?? false\n                }\n              } else {\n                // For a dynamic SSG page, we did not copy its data exports and only\n                // copy the fallback HTML file (if present).\n                // We must also copy specific versions of this page as defined by\n                // `getStaticPaths` (additionalSsgPaths).\n                for (const route of additionalPaths.get(page) ?? []) {\n                  const pageFile = normalizePagePath(route.path)\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'html',\n                    true\n                  )\n                  await moveExportedPage(\n                    page,\n                    route.path,\n                    pageFile,\n                    isSsg,\n                    'json',\n                    true\n                  )\n\n                  if (hasAmp) {\n                    const ampPage = `${pageFile}.amp`\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'html',\n                      true\n                    )\n                    await moveExportedPage(\n                      page,\n                      ampPage,\n                      ampPage,\n                      isSsg,\n                      'json',\n                      true\n                    )\n                  }\n\n                  const initialRevalidateSeconds =\n                    exportResult.byPath.get(route.path)?.revalidate ?? false\n\n                  if (typeof initialRevalidateSeconds === 'undefined') {\n                    throw new Error(\"Invariant: page wasn't built\")\n                  }\n\n                  prerenderManifest.routes[route.path] = {\n                    initialRevalidateSeconds,\n                    experimentalPPR: undefined,\n                    renderingMode: undefined,\n                    srcRoute: page,\n                    dataRoute: path.posix.join(\n                      '/_next/data',\n                      buildId,\n                      `${normalizePagePath(route.path)}.json`\n                    ),\n                    // Pages does not have a prefetch data route.\n                    prefetchDataRoute: undefined,\n                  }\n\n                  // Set route Revalidation Interval\n                  if (pageInfo) {\n                    pageInfo.initialRevalidateSeconds = initialRevalidateSeconds\n                  }\n                }\n              }\n            }\n          }\n\n          // remove temporary export folder\n          await fs.rm(exportOptions.outdir, { recursive: true, force: true })\n          await writeManifest(pagesManifestPath, pagesManifest)\n        })\n      }\n\n      const postBuildSpinner = createSpinner('Finalizing page optimization')\n      let buildTracesSpinner = createSpinner(`Collecting build traces`)\n\n      // ensure the worker is not left hanging\n      worker.end()\n\n      const analysisEnd = process.hrtime(analysisBegin)\n      telemetry.record(\n        eventBuildOptimize(pagesPaths, {\n          durationInSeconds: analysisEnd[0],\n          staticPageCount: staticPages.size,\n          staticPropsPageCount: ssgPages.size,\n          serverPropsPageCount: serverPropsPages.size,\n          ssrPageCount:\n            pagesPaths.length -\n            (staticPages.size + ssgPages.size + serverPropsPages.size),\n          hasStatic404: useStaticPages404,\n          hasReportWebVitals:\n            namedExports?.includes('reportWebVitals') ?? false,\n          rewritesCount: combinedRewrites.length,\n          headersCount: headers.length,\n          redirectsCount: redirects.length - 1, // reduce one for trailing slash\n          headersWithHasCount: headers.filter((r: any) => !!r.has).length,\n          rewritesWithHasCount: combinedRewrites.filter((r: any) => !!r.has)\n            .length,\n          redirectsWithHasCount: redirects.filter((r: any) => !!r.has).length,\n          middlewareCount: hasMiddlewareFile ? 1 : 0,\n          totalAppPagesCount,\n          staticAppPagesCount,\n          serverAppPagesCount,\n          edgeRuntimeAppCount,\n          edgeRuntimePagesCount,\n        })\n      )\n\n      if (NextBuildContext.telemetryState) {\n        const events = eventBuildFeatureUsage(\n          NextBuildContext.telemetryState.usages\n        )\n        telemetry.record(events)\n        telemetry.record(\n          eventPackageUsedInGetServerSideProps(\n            NextBuildContext.telemetryState.packagesUsedInServerSideProps\n          )\n        )\n      }\n\n      if (ssgPages.size > 0 || appDir) {\n        tbdPrerenderRoutes.forEach((tbdRoute) => {\n          const normalizedRoute = normalizePagePath(tbdRoute)\n          const dataRoute = path.posix.join(\n            '/_next/data',\n            buildId,\n            `${normalizedRoute}.json`\n          )\n\n          prerenderManifest.dynamicRoutes[tbdRoute] = {\n            routeRegex: normalizeRouteRegex(\n              getNamedRouteRegex(tbdRoute, false).re.source\n            ),\n            experimentalPPR: undefined,\n            renderingMode: undefined,\n            dataRoute,\n            fallback: ssgBlockingFallbackPages.has(tbdRoute)\n              ? null\n              : ssgStaticFallbackPages.has(tbdRoute)\n                ? `${normalizedRoute}.html`\n                : false,\n            fallbackRevalidate: undefined,\n            dataRouteRegex: normalizeRouteRegex(\n              getNamedRouteRegex(\n                dataRoute.replace(/\\.json$/, ''),\n                false\n              ).re.source.replace(/\\(\\?:\\\\\\/\\)\\?\\$$/, '\\\\.json$')\n            ),\n            // Pages does not have a prefetch data route.\n            prefetchDataRoute: undefined,\n            prefetchDataRouteRegex: undefined,\n          }\n        })\n\n        NextBuildContext.previewModeId = previewProps.previewModeId\n        NextBuildContext.fetchCacheKeyPrefix =\n          config.experimental.fetchCacheKeyPrefix\n        NextBuildContext.allowedRevalidateHeaderKeys =\n          config.experimental.allowedRevalidateHeaderKeys\n\n        await writePrerenderManifest(distDir, prerenderManifest)\n        await writeClientSsgManifest(prerenderManifest, {\n          distDir,\n          buildId,\n          locales: config.i18n?.locales || [],\n        })\n      } else {\n        await writePrerenderManifest(distDir, {\n          version: 4,\n          routes: {},\n          dynamicRoutes: {},\n          preview: previewProps,\n          notFoundRoutes: [],\n        })\n      }\n\n      await writeImagesManifest(distDir, config)\n      await writeManifest(path.join(distDir, EXPORT_MARKER), {\n        version: 1,\n        hasExportPathMap: typeof config.exportPathMap === 'function',\n        exportTrailingSlash: config.trailingSlash === true,\n        isNextImageImported: isNextImageImported === true,\n      })\n      await fs.unlink(path.join(distDir, EXPORT_DETAIL)).catch((err) => {\n        if (err.code === 'ENOENT') {\n          return Promise.resolve()\n        }\n        return Promise.reject(err)\n      })\n\n      if (Boolean(config.experimental.nextScriptWorkers)) {\n        await nextBuildSpan\n          .traceChild('verify-partytown-setup')\n          .traceAsyncFn(async () => {\n            await verifyPartytownSetup(\n              dir,\n              path.join(distDir, CLIENT_STATIC_FILES_PATH)\n            )\n          })\n      }\n\n      await buildTracesPromise\n\n      if (buildTracesSpinner) {\n        buildTracesSpinner.stopAndPersist()\n        buildTracesSpinner = undefined\n      }\n\n      if (config.output === 'export') {\n        await writeFullyStaticExport(\n          config,\n          dir,\n          enabledDirectories,\n          configOutDir,\n          nextBuildSpan\n        )\n      }\n\n      if (config.output === 'standalone') {\n        await writeStandaloneDirectory(\n          nextBuildSpan,\n          distDir,\n          pageKeys,\n          denormalizedAppPages,\n          outputFileTracingRoot,\n          requiredServerFilesManifest,\n          middlewareManifest,\n          hasInstrumentationHook,\n          staticPages,\n          loadedEnvFiles,\n          appDir\n        )\n      }\n\n      if (postBuildSpinner) postBuildSpinner.stopAndPersist()\n      console.log()\n\n      if (debugOutput) {\n        nextBuildSpan\n          .traceChild('print-custom-routes')\n          .traceFn(() => printCustomRoutes({ redirects, rewrites, headers }))\n      }\n\n      await nextBuildSpan.traceChild('print-tree-view').traceAsyncFn(() =>\n        printTreeView(pageKeys, pageInfos, {\n          distPath: distDir,\n          buildId: buildId,\n          pagesDir,\n          useStaticPages404,\n          pageExtensions: config.pageExtensions,\n          appBuildManifest,\n          buildManifest,\n          middlewareManifest,\n          gzipSize: config.experimental.gzipSize,\n        })\n      )\n\n      await nextBuildSpan\n        .traceChild('telemetry-flush')\n        .traceAsyncFn(() => telemetry.flush())\n\n      await shutdownPromise\n    })\n  } finally {\n    // Ensure we wait for lockfile patching if present\n    await lockfilePatchPromise.cur\n\n    // Ensure all traces are flushed before finishing the command\n    await flushAllTraces()\n    teardownTraceSubscriber()\n    teardownHeapProfiler()\n\n    if (traceUploadUrl && loadedConfig) {\n      uploadTrace({\n        traceUploadUrl,\n        mode: 'build',\n        projectDir: dir,\n        distDir: loadedConfig.distDir,\n        sync: true,\n      })\n    }\n  }\n}\n"],"names":["loadEnvConfig","bold","yellow","crypto","makeRe","existsSync","promises","fs","os","Worker","defaultConfig","devalue","findUp","nanoid","Sema","path","STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR","PUBLIC_DIR_MIDDLEWARE_CONFLICT","MIDDLEWARE_FILENAME","PAGES_DIR_ALIAS","INSTRUMENTATION_HOOK_FILENAME","RSC_PREFETCH_SUFFIX","RSC_SUFFIX","NEXT_RESUME_HEADER","FileType","fileExists","findPagesDir","loadCustomRoutes","normalizeRouteRegex","nonNullable","recursiveDelete","verifyPartytownSetup","validateTurboNextConfig","BUILD_ID_FILE","BUILD_MANIFEST","CLIENT_STATIC_FILES_PATH","EXPORT_DETAIL","EXPORT_MARKER","IMAGES_MANIFEST","PAGES_MANIFEST","PHASE_PRODUCTION_BUILD","PRERENDER_MANIFEST","REACT_LOADABLE_MANIFEST","ROUTES_MANIFEST","SERVER_DIRECTORY","SERVER_FILES_MANIFEST","STATIC_STATUS_PAGES","MIDDLEWARE_MANIFEST","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","APP_BUILD_MANIFEST","RSC_MODULE_TYPES","NEXT_FONT_MANIFEST","SUBRESOURCE_INTEGRITY_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","SERVER_REFERENCE_MANIFEST","FUNCTIONS_CONFIG_MANIFEST","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","UNDERSCORE_NOT_FOUND_ROUTE","getSortedRoutes","isDynamicRoute","getSortedRouteObjects","loadConfig","normalizePagePath","getPagePath","ciEnvironment","turborepoTraceAccess","TurborepoAccessTraceResult","writeTurborepoAccessTraceResult","eventBuildOptimize","eventCliSession","eventBuildFeatureUsage","eventNextPlugins","EVENT_BUILD_FEATURE_USAGE","eventPackageUsedInGetServerSideProps","eventBuildCompleted","Telemetry","hadUnsupportedValue","createPagesMapping","getPageFromPath","getStaticInfoIncludingLayouts","sortByPageExts","PAGE_TYPES","generateBuildId","isWriteable","Log","createSpinner","trace","flushAllTraces","setGlobal","detectConflictingPaths","computeFromManifest","getJsPageSizeInKb","printCustomRoutes","printTreeView","copyTracedFiles","isReservedPage","isAppBuiltinNotFoundPage","collectRoutesUsingEdgeRuntime","collectMeta","writeBuildId","normalizeLocalePath","isError","isEdgeRuntime","recursiveCopy","recursiveReadDir","loadBindings","lockfilePatchPromise","teardownTraceSubscriber","teardownHeapProfiler","createDefineEnv","getNamedRouteRegex","getFilesInDir","eventSwcPlugins","normalizeAppPath","ACTION_HEADER","NEXT_ROUTER_PREFETCH_HEADER","RSC_HEADER","RSC_CONTENT_TYPE_HEADER","NEXT_ROUTER_STATE_TREE_HEADER","NEXT_DID_POSTPONE_HEADER","webpackBuild","NextBuildContext","normalizePathSep","isAppRouteRoute","createClientRouterFilter","createValidFileMatcher","startTypeChecking","generateInterceptionRoutesRewrites","buildDataRoute","collectBuildTraces","formatManifest","recordFrameworkVersion","updateBuildDiagnostics","recordFetchMetrics","getStartServerInfo","logStartInfo","hasCustomExportOutput","getTurbopackJsConfig","handleEntrypoints","handleRouteType","handlePagesErrorRoute","formatIssue","isRelevantWarning","TurbopackManifestLoader","buildCustomRoute","createProgress","traceMemoryUsage","generateEncryptionKeyBase64","uploadTrace","checkIsAppPPREnabled","checkIsRoutePPREnabled","detectChangedEntries","storeShuttle","stitchBuilds","inlineStaticEnv","FallbackMode","fallbackModeToFallbackField","RenderingMode","pageToRoute","page","routeRegex","regex","re","source","routeKeys","namedRegex","getCacheDir","distDir","cacheDir","join","isCI","hasNextSupport","hasCache","console","log","prefixes","warn","writeFileUtf8","filePath","content","writeFile","readFileUtf8","readFile","writeManifest","manifest","readManifest","JSON","parse","writePrerenderManifest","writeClientSsgManifest","prerenderManifest","buildId","locales","ssgPages","Set","Object","entries","routes","filter","srcRoute","map","route","pathname","keys","dynamicRoutes","sort","clientSsgManifestContent","writeFunctionsConfigManifest","writeRequiredServerFilesManifest","requiredServerFiles","writeImagesManifest","config","images","deviceSizes","imageSizes","sizes","remotePatterns","p","protocol","hostname","port","dot","version","STANDALONE_DIRECTORY","writeStandaloneDirectory","nextBuildSpan","pageKeys","denormalizedAppPages","outputFileTracingRoot","middlewareManifest","hasInstrumentationHook","staticPages","loadedEnvFiles","appDir","traceChild","traceAsyncFn","pages","file","files","reduce","acc","envFile","includes","push","outputPath","relative","mkdir","dirname","recursive","copyFile","overwrite","originalServerApp","getNumberOfWorkers","experimental","cpus","memoryBasedWorkersCount","Math","max","min","floor","freemem","staticWorkerPath","require","resolve","staticWorkerExposedMethods","createStaticWorker","onActivity","logger","numWorkers","forkOptions","env","process","enableWorkerThreads","workerThreads","exposedMethods","writeFullyStaticExport","dir","enabledDirectories","configOutDir","exportApp","default","pagesWorker","appWorker","buildExport","nextConfig","silent","outdir","end","getBuildId","isGenerateMode","IS_TURBOPACK_BUILD","TURBOPACK","TURBOPACK_BUILD","build","reactProductionProfiling","debugOutput","runLint","noMangling","appDirOnly","turboNextBuild","experimentalBuildMode","traceUploadUrl","isCompileMode","loadedConfig","undefined","buildMode","isTurboBuild","String","__NEXT_VERSION","mappedPages","traceFn","turborepoAccessTraceResult","NEXT_DEPLOYMENT_ID","deploymentId","flyingShuttle","isFullFlyingShuttle","mode","isStoreOnlyFlyingShuttle","shuttleDir","customRoutes","headers","rewrites","redirects","combinedRewrites","beforeFiles","afterFiles","fallback","hasRewrites","length","originalRewrites","_originalRewrites","originalRedirects","_originalRedirects","telemetry","publicDir","pagesDir","app","encryptionKey","isSrcDir","startsWith","hasPublicDir","record","webpackVersion","cliCommand","hasNowJson","cwd","isCustomServer","turboFlag","then","events","envInfo","expFeatureInfo","networkUrl","appUrl","ignoreESLint","Boolean","eslint","ignoreDuringBuilds","shouldLint","typeCheckingOptions","error","flush","exit","buildLintEvent","featureName","invocationCount","eventName","payload","validFileMatcher","pageExtensions","pagesPaths","pathnameFilter","isPageFile","changedPagePathsResult","stringify","changed","middlewareDetectionRegExp","RegExp","instrumentationHookDetectionRegExp","rootDir","rootPaths","Array","from","some","include","test","replace","hasMiddlewareFile","previewProps","previewModeId","randomBytes","toString","previewModeSigningKey","previewModeEncryptionKey","isDev","pagesType","PAGES","pagePaths","mappedAppPages","changedAppPathsResult","appPaths","absolutePath","isAppRouterPage","isRootNotFound","ignorePartFilter","part","APP","mappedRootPaths","ROOT","pagesPageKeys","conflictingAppPagePaths","appPageKeys","appKey","normalizedAppPageKey","pagePath","appPath","add","basePath","totalAppPagesCount","numConflictingAppPaths","conflictingPublicFiles","hasPages404","hasApp404","hasCustomErrorPage","hasPublicUnderScoreNextDir","Error","hasPublicPageFile","File","numConflicting","nestedReservedPages","match","restrictedRedirectPaths","isAppPPREnabled","ppr","routesManifestPath","routesManifest","sortedRoutes","staticRoutes","pages404","caseSensitive","caseSensitiveRoutes","r","dataRoutes","i18n","rsc","header","varyHeader","prefetchHeader","didPostponeHeader","contentTypeHeader","suffix","prefetchSuffix","skipMiddlewareUrlNormalize","chain","clientRouterFilters","clientRouterFilter","nonInternalRedirects","internal","filterPaths","unchanged","entry","item","clientRouterFilterRedirects","clientRouterFilterAllowedRate","distDirCreated","err","code","cleanDistDir","buildStage","pagesManifestPath","turbopackBuild","startTime","hrtime","bindings","useWasmBinary","dev","supportedBrowsers","project","turbo","createProject","projectPath","rootPath","root","jsConfig","watch","defineEnv","isTurbopack","fetchCacheKeyPrefix","middlewareMatchers","browserslistQuery","memoryLimit","type","entrypointsSubscription","entrypointsSubscribe","currentEntrypoints","global","document","middleware","instrumentation","Map","currentEntryIssues","manifestLoader","entrypointsResult","next","done","return","catch","entrypoints","value","topLevelErrors","issue","issues","message","e","devRewrites","productionRewrites","logErrors","progress","size","sema","enqueue","fn","acquire","release","Promise","all","writeManifests","errors","warnings","entryIssues","values","severity","shutdownPromise","shutdown","duration","buildTraceContext","buildTracesPromise","useBuildWorker","webpackBuildWorker","webpack","runServerAndEdgeInParallel","parallelServerCompiles","collectServerBuildTracesInParallel","parallelServerBuildTraces","setAttribute","info","buildOptions","compilerDuration","rest","event","durationInSeconds","serverBuildPromise","res","buildTraceWorker","edgeRuntimeRoutes","hasSsrAmpPages","isFlyingShuttle","edgeBuildPromise","postCompileSpinner","buildManifestPath","appBuildManifestPath","staticAppPagesCount","serverAppPagesCount","edgeRuntimeAppCount","edgeRuntimePagesCount","ssgStaticFallbackPages","ssgBlockingFallbackPages","invalidPages","hybridAmpPages","serverPropsPages","additionalPaths","staticPaths","appNormalizedPaths","fallbackModes","appDefaultConfigs","pageInfos","pagesManifest","buildManifest","appBuildManifest","appPathRoutes","appPathsManifest","key","NEXT_PHASE","worker","analysisBegin","staticCheckSpan","functionsConfigManifest","functions","customAppGetInitialProps","namedExports","isNextImageImported","hasNonStaticErrorPage","configFileName","publicRuntimeConfig","serverRuntimeConfig","runtimeEnvConfig","nonStaticErrorPageSpan","errorPageHasCustomGetInitialProps","hasCustomGetInitialProps","checkingApp","errorPageStaticResult","isPageStatic","httpAgentOptions","defaultLocale","nextConfigOutput","output","pprConfig","isAppPPRFallbacksEnabled","pprFallbacks","appPageToCheck","customAppGetInitialPropsPromise","namedExportsPromise","getDefinedNamedExports","computedManifestData","gzipSize","actionManifest","entriesWithAction","id","node","workers","edge","pageType","checkPageSpan","actualPage","totalSize","isRoutePPREnabled","isSSG","isStatic","isServerComponent","isHybridAmp","ssgPageRoutes","find","originalAppPath","originalPath","normalizedPath","pageFilePath","isInsideAppDir","staticInfo","extraConfig","pageRuntime","runtime","client","edgeInfo","manifestKey","isPageStaticSpan","workerResult","parentId","getId","cacheHandler","isrFlushToDisk","maxMemoryCacheSize","cacheMaxMemorySize","set","warnOnce","prerenderedRoutes","appConfig","revalidate","isDynamic","hasGenerateStaticParams","encoded","fallbackRouteParams","dynamic","prerenderFallbackMode","hasStaticProps","isAmpOnly","BLOCKING_STATIC_RENDER","PRERENDER","hasServerProps","delete","initialRevalidateSeconds","pageDuration","ssgPageDurations","hasEmptyPrelude","errorPageResult","nonStaticErrorPage","returnValue","stopAndPersist","instrumentationHookEntryFiles","requiredServerFilesManifest","serverFilesManifest","configFile","compress","trustHostHeader","isExperimentalCompile","relativeAppDir","sri","ignore","useStaticPages404","pg","optimizeCss","globOrig","cssFilePaths","reject","features","nextScriptWorkers","feature","stitchResult","edgePreviewProps","__NEXT_PREVIEW_MODE_ID","__NEXT_PREVIEW_MODE_ENCRYPTION_KEY","__NEXT_PREVIEW_MODE_SIGNING_KEY","allowedErrorRate","notFoundRoutes","preview","tbdPrerenderRoutes","usedStaticStatusPages","forEach","has","hasPages500","useDefaultStatic500","combinedPages","isApp404Static","hasStaticApp404","staticGenerationSpan","exportConfig","exportPathMap","defaultMap","query","__nextFallback","__nextSsgPath","get","isDynamicError","_fallbackRouteParams","_isDynamicError","_isAppDir","_isRoutePPREnabled","isSsg","isFallback","locale","__nextLocale","exportOptions","statusMessage","exportResult","NEXT_SSG_FETCH_METRICS","traces","turborepoAccessTraceResults","ssgNotFoundPaths","serverBundle","unlink","hasRevalidateZero","byPath","isAppRouteHandler","bypassFor","unknownPrerenderRoutes","knownPrerenderRoutes","prerenderedRoute","metadata","hasPostponed","normalizedRoute","dataRoute","posix","prefetchDataRoute","meta","initialStatus","status","initialHeaders","renderingMode","PARTIALLY_STATIC","STATIC","experimentalPPR","experimentalBypassFor","isDynamicAppRoute","fallbackMode","NOT_FOUND","fallbackRevalidate","fallbackStatus","fallbackHeaders","dataRouteRegex","prefetchDataRouteRegex","moveExportedPage","originPage","ext","additionalSsgFile","orig","relativeDest","slice","split","dest","isNotFound","rename","localeExt","extname","relativeDestNoPages","curPath","updatedRelativeDest","updatedOrig","updatedDest","moveExportedAppNotFoundTo404","isStaticSsgFallback","hasAmp","pageInfo","durationInfo","byPage","durationsByPath","hasHtmlOutput","ampPage","localePage","pageFile","rm","force","postBuildSpinner","buildTracesSpinner","analysisEnd","staticPageCount","staticPropsPageCount","serverPropsPageCount","ssrPageCount","hasStatic404","hasReportWebVitals","rewritesCount","headersCount","redirectsCount","headersWithHasCount","rewritesWithHasCount","redirectsWithHasCount","middlewareCount","telemetryState","usages","packagesUsedInServerSideProps","tbdRoute","allowedRevalidateHeaderKeys","hasExportPathMap","exportTrailingSlash","trailingSlash","distPath","cur","projectDir","sync"],"mappings":"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"}