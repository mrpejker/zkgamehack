{"version":3,"sources":["../../../src/build/flying-shuttle/inline-static-env.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport { promisify } from 'util'\nimport globOriginal from 'next/dist/compiled/glob'\nimport { getNextPublicEnvironmentVariables } from '../webpack/plugins/define-env-plugin'\nimport { Sema } from 'next/dist/compiled/async-sema'\n\nconst glob = promisify(globOriginal)\n\nexport async function inlineStaticEnv({ distDir }: { distDir: string }) {\n  const staticEnv = getNextPublicEnvironmentVariables()\n\n  const serverDir = path.join(distDir, 'server')\n  const serverChunks = await glob('**/*.js', {\n    cwd: serverDir,\n  })\n  const clientDir = path.join(distDir, 'static')\n  const clientChunks = await glob('**/*.js', {\n    cwd: clientDir,\n  })\n\n  const inlineSema = new Sema(8)\n\n  for (const [parentDir, files] of [\n    [serverDir, serverChunks],\n    [clientDir, clientChunks],\n  ] as const) {\n    await Promise.all(\n      files.map(async (file) => {\n        await inlineSema.acquire()\n        const filepath = path.join(parentDir, file)\n        const content = await fs.promises.readFile(filepath, 'utf8')\n\n        await fs.promises.writeFile(\n          filepath,\n          content.replace(/[\\w]{1,}\\.env\\.NEXT_PUBLIC_[\\w]{1,}/g, (match) => {\n            let normalizedMatch = `process.env.${match.split('.').pop()}`\n\n            if (staticEnv[normalizedMatch]) {\n              return JSON.stringify(staticEnv[normalizedMatch])\n            }\n            return match\n          })\n        )\n        inlineSema.release()\n      })\n    )\n  }\n}\n"],"names":["fs","path","promisify","globOriginal","getNextPublicEnvironmentVariables","Sema","glob","inlineStaticEnv","distDir","staticEnv","serverDir","join","serverChunks","cwd","clientDir","clientChunks","inlineSema","parentDir","files","Promise","all","map","file","acquire","filepath","content","promises","readFile","writeFile","replace","match","normalizedMatch","split","pop","JSON","stringify","release"],"mappings":"AAAA,OAAOA,QAAQ,KAAI;AACnB,OAAOC,UAAU,OAAM;AACvB,SAASC,SAAS,QAAQ,OAAM;AAChC,OAAOC,kBAAkB,0BAAyB;AAClD,SAASC,iCAAiC,QAAQ,uCAAsC;AACxF,SAASC,IAAI,QAAQ,gCAA+B;AAEpD,MAAMC,OAAOJ,UAAUC;AAEvB,OAAO,eAAeI,gBAAgB,EAAEC,OAAO,EAAuB;IACpE,MAAMC,YAAYL;IAElB,MAAMM,YAAYT,KAAKU,IAAI,CAACH,SAAS;IACrC,MAAMI,eAAe,MAAMN,KAAK,WAAW;QACzCO,KAAKH;IACP;IACA,MAAMI,YAAYb,KAAKU,IAAI,CAACH,SAAS;IACrC,MAAMO,eAAe,MAAMT,KAAK,WAAW;QACzCO,KAAKC;IACP;IAEA,MAAME,aAAa,IAAIX,KAAK;IAE5B,KAAK,MAAM,CAACY,WAAWC,MAAM,IAAI;QAC/B;YAACR;YAAWE;SAAa;QACzB;YAACE;YAAWC;SAAa;KAC1B,CAAW;QACV,MAAMI,QAAQC,GAAG,CACfF,MAAMG,GAAG,CAAC,OAAOC;YACf,MAAMN,WAAWO,OAAO;YACxB,MAAMC,WAAWvB,KAAKU,IAAI,CAACM,WAAWK;YACtC,MAAMG,UAAU,MAAMzB,GAAG0B,QAAQ,CAACC,QAAQ,CAACH,UAAU;YAErD,MAAMxB,GAAG0B,QAAQ,CAACE,SAAS,CACzBJ,UACAC,QAAQI,OAAO,CAAC,wCAAwC,CAACC;gBACvD,IAAIC,kBAAkB,CAAC,YAAY,EAAED,MAAME,KAAK,CAAC,KAAKC,GAAG,GAAG,CAAC;gBAE7D,IAAIxB,SAAS,CAACsB,gBAAgB,EAAE;oBAC9B,OAAOG,KAAKC,SAAS,CAAC1B,SAAS,CAACsB,gBAAgB;gBAClD;gBACA,OAAOD;YACT;YAEFd,WAAWoB,OAAO;QACpB;IAEJ;AACF"}