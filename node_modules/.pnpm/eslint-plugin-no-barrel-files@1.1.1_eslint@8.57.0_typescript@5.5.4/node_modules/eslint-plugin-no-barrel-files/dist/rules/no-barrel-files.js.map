{"version":3,"file":"no-barrel-files.js","sourceRoot":"","sources":["../../src/rules/no-barrel-files.ts"],"names":[],"mappings":";;AAIA,MAAM,aAAa,GAAoC;IACrD,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE;YACJ,GAAG,EAAE,yDAAyD;YAC9D,WAAW,EAAE,uBAAuB;SACrC;QACD,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE;YACR,UAAU,EAAE,iDAAiD;YAC7D,WAAW,EAAE,6CAA6C;SAC3D;KACF;IACD,MAAM,CAAC,OAAO;QACZ,MAAM,eAAe,GAAkB,EAAE,CAAC;QAE1C,OAAO;YACL,wBAAwB,CAAC,IAAI;gBAC3B,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,YAAY,IAAI,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;oBAC7F,OAAO,CAAC,MAAM,CAAC;wBACb,IAAI;wBACJ,SAAS,EAAE,YAAY;wBACvB,IAAI,EAAE;4BACJ,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;yBAC5B;qBACF,CAAC,CAAC;iBACJ;YACH,CAAC;YACD,oBAAoB,CAAC,IAAI;gBACvB,OAAO,CAAC,MAAM,CAAC;oBACb,IAAI;oBACJ,SAAS,EAAE,aAAa;iBACzB,CAAC,CAAC;YACL,CAAC;YACD,sBAAsB,CAAC,IAAI;;gBACzB,IAAI,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,0CAAE,IAAI,MAAK,SAAS,EAAE;oBACpC,OAAO,CAAC,MAAM,CAAC;wBACb,IAAI;wBACJ,SAAS,EAAE,YAAY;wBACvB,IAAI,EAAE;4BACJ,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;yBACxB;qBACF,CAAC,CAAC;iBACJ;gBAED,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;oBAClC,IAAI,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;wBAClD,OAAO,CAAC,MAAM,CAAC;4BACb,IAAI,EAAE,SAAS;4BACf,SAAS,EAAE,YAAY;4BACvB,IAAI,EAAE;gCACJ,IAAI,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI;6BAC9B;yBACF,CAAC,CAAC;qBACJ;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YACD,iBAAiB,CAAC,IAAI;gBACpB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBAC7B,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;YACL,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["import { TSESLint } from '@typescript-eslint/utils';\n\ntype MessageIds = 'noReExport' | 'noExportAll';\n\nconst noBarrelFiles: TSESLint.RuleModule<MessageIds> = {\n  defaultOptions: [],\n  meta: {\n    type: 'suggestion',\n    docs: {\n      url: 'https://github.com/art0rz/eslint-plugin-no-barrel-files',\n      description: 'disallow barrel files',\n    },\n    schema: [],\n    messages: {\n      noReExport: 'Do not re-export imported variable (`{{name}}`)',\n      noExportAll: 'Do not use export all (`export * from ...`)',\n    },\n  },\n  create(context) {\n    const declaredImports: Array<string> = [];\n\n    return {\n      ExportDefaultDeclaration(node) {\n        if (node.declaration.type === 'Identifier' && declaredImports.includes(node.declaration.name)) {\n          context.report({\n            node,\n            messageId: 'noReExport',\n            data: {\n              name: node.declaration.name,\n            },\n          });\n        }\n      },\n      ExportAllDeclaration(node) {\n        context.report({\n          node,\n          messageId: 'noExportAll',\n        });\n      },\n      ExportNamedDeclaration(node) {\n        if (node?.source?.type === 'Literal') {\n          context.report({\n            node,\n            messageId: 'noReExport',\n            data: {\n              name: node.source.value,\n            },\n          });\n        }\n\n        node.specifiers.forEach(specifier => {\n          if (declaredImports.includes(specifier.local.name)) {\n            context.report({\n              node: specifier,\n              messageId: 'noReExport',\n              data: {\n                name: specifier.exported.name,\n              },\n            });\n          }\n        });\n      },\n      ImportDeclaration(node) {\n        node.specifiers.forEach(item => {\n          declaredImports.push(item.local.name);\n        });\n      },\n    };\n  },\n};\n\nexport default noBarrelFiles;\n"]}