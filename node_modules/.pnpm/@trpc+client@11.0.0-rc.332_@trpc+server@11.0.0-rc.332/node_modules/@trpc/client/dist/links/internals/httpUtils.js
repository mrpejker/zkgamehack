'use strict';

var getFetch = require('../../getFetch.js');
var getAbortController = require('../../internals/getAbortController.js');
var TRPCClientError = require('../../TRPCClientError.js');
var transformer = require('../../internals/transformer.js');

function resolveHTTPLinkOptions(opts) {
    return {
        url: opts.url.toString().replace(/\/$/, ''),
        fetch: opts.fetch,
        AbortController: getAbortController.getAbortController(opts.AbortController),
        transformer: transformer.getTransformer(opts.transformer),
        methodOverride: opts.methodOverride
    };
}
// https://github.com/trpc/trpc/pull/669
function arrayToDict(array) {
    const dict = {};
    for(let index = 0; index < array.length; index++){
        const element = array[index];
        dict[index] = element;
    }
    return dict;
}
const METHOD = {
    query: 'GET',
    mutation: 'POST'
};
function getInput(opts) {
    return 'input' in opts ? opts.transformer.input.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.transformer.input.serialize(_input)));
}
const getUrl = (opts)=>{
    let url = opts.url + '/' + opts.path;
    const queryParts = [];
    if ('inputs' in opts) {
        queryParts.push('batch=1');
    }
    if (opts.type === 'query') {
        const input = getInput(opts);
        if (input !== undefined && opts.methodOverride !== 'POST') {
            queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);
        }
    }
    if (queryParts.length) {
        url += '?' + queryParts.join('&');
    }
    return url;
};
const getBody = (opts)=>{
    if (opts.type === 'query' && opts.methodOverride !== 'POST') {
        return undefined;
    }
    const input = getInput(opts);
    return input !== undefined ? JSON.stringify(input) : undefined;
};
const jsonHttpRequester = (opts)=>{
    return httpRequest({
        ...opts,
        contentTypeHeader: 'application/json',
        getUrl,
        getBody
    });
};
async function fetchHTTPResponse(opts, ac) {
    const url = opts.getUrl(opts);
    const body = opts.getBody(opts);
    const { type  } = opts;
    const resolvedHeaders = await (async ()=>{
        const heads = await opts.headers();
        if (Symbol.iterator in heads) {
            return Object.fromEntries(heads);
        }
        return heads;
    })();
    /* istanbul ignore if -- @preserve */ if (type === 'subscription') {
        throw new Error('Subscriptions should use wsLink');
    }
    const headers = {
        ...opts.contentTypeHeader ? {
            'content-type': opts.contentTypeHeader
        } : {},
        ...opts.batchModeHeader ? {
            'trpc-batch-mode': opts.batchModeHeader
        } : {},
        ...resolvedHeaders
    };
    return getFetch.getFetch(opts.fetch)(url, {
        method: opts.methodOverride ?? METHOD[type],
        signal: ac?.signal,
        body,
        headers
    });
}
function httpRequest(opts) {
    const ac = opts.AbortController ? new opts.AbortController() : null;
    const meta = {};
    let done = false;
    const promise = new Promise((resolve, reject)=>{
        fetchHTTPResponse(opts, ac).then((_res)=>{
            meta.response = _res;
            done = true;
            return _res.json();
        }).then((json)=>{
            meta.responseJSON = json;
            resolve({
                json: json,
                meta
            });
        }).catch((err)=>{
            done = true;
            reject(TRPCClientError.TRPCClientError.from(err, {
                meta
            }));
        });
    });
    const cancel = ()=>{
        if (!done) {
            ac?.abort();
        }
    };
    return {
        promise,
        cancel
    };
}

exports.fetchHTTPResponse = fetchHTTPResponse;
exports.getBody = getBody;
exports.getUrl = getUrl;
exports.httpRequest = httpRequest;
exports.jsonHttpRequester = jsonHttpRequester;
exports.resolveHTTPLinkOptions = resolveHTTPLinkOptions;
