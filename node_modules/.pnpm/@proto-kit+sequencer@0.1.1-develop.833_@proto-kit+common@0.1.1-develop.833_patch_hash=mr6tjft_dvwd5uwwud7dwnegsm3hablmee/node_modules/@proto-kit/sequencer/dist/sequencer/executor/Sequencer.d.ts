import { ModuleContainer, ModulesRecord, TypedClass, ModuleContainerDefinition } from "@proto-kit/common";
import { Runtime, RuntimeModulesRecord } from "@proto-kit/module";
import { MandatoryProtocolModulesRecord, Protocol, ProtocolModulesRecord } from "@proto-kit/protocol";
import { DependencyContainer } from "tsyringe";
import { SequencerModule } from "../builder/SequencerModule";
import { Sequenceable } from "./Sequenceable";
export type SequencerModulesRecord = ModulesRecord<TypedClass<SequencerModule<unknown>>>;
export declare class Sequencer<Modules extends SequencerModulesRecord> extends ModuleContainer<Modules> implements Sequenceable {
    /**
     * Alternative constructor for Sequencer
     * @param definition
     * @returns Sequencer
     */
    static from<Modules extends SequencerModulesRecord>(definition: ModuleContainerDefinition<Modules>): TypedClass<Sequencer<Modules>>;
    get runtime(): Runtime<RuntimeModulesRecord>;
    get protocol(): Protocol<MandatoryProtocolModulesRecord & ProtocolModulesRecord>;
    get dependencyContainer(): DependencyContainer;
    /**
     * Starts the sequencer by iterating over all provided
     * modules to start each
     */
    start(): Promise<void>;
}
//# sourceMappingURL=Sequencer.d.ts.map