var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { noop } from "@proto-kit/common";
import { CachedStateService } from "../../state/state/CachedStateService";
import { sequencerModule, SequencerModule, } from "../../sequencer/builder/SequencerModule";
import { InMemoryBlockStorage } from "./InMemoryBlockStorage";
import { InMemoryAsyncMerkleTreeStore } from "./InMemoryAsyncMerkleTreeStore";
import { InMemoryBatchStorage } from "./InMemoryBatchStorage";
import { InMemoryMessageStorage } from "./InMemoryMessageStorage";
import { InMemorySettlementStorage } from "./InMemorySettlementStorage";
import { InMemoryTransactionStorage } from "./InMemoryTransactionStorage";
export let InMemoryDatabase = class InMemoryDatabase extends SequencerModule {
    dependencies() {
        return {
            asyncMerkleStore: {
                useClass: InMemoryAsyncMerkleTreeStore,
            },
            asyncStateService: {
                useFactory: () => new CachedStateService(undefined),
            },
            batchStorage: {
                useClass: InMemoryBatchStorage,
            },
            blockQueue: {
                useClass: InMemoryBlockStorage,
            },
            blockStorage: {
                useToken: "BlockQueue",
            },
            unprovenStateService: {
                useFactory: () => new CachedStateService(undefined),
            },
            unprovenMerkleStore: {
                useClass: InMemoryAsyncMerkleTreeStore,
            },
            blockTreeStore: {
                useClass: InMemoryAsyncMerkleTreeStore,
            },
            messageStorage: {
                useClass: InMemoryMessageStorage,
            },
            settlementStorage: {
                useClass: InMemorySettlementStorage,
            },
            transactionStorage: {
                useClass: InMemoryTransactionStorage,
            },
        };
    }
    async start() {
        noop();
    }
    async pruneDatabase() {
        // Figure out how to implement this nicely.
        // However, this would only be a op when pruneDatabase will be called
        // at some point that is after startup (which we don't do currently)
        noop();
    }
};
InMemoryDatabase = __decorate([
    sequencerModule()
], InMemoryDatabase);
