var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { Field } from "o1js";
import { InMemoryBatchStorage } from "./InMemoryBatchStorage";
export let InMemoryTransactionStorage = class InMemoryTransactionStorage {
    constructor(blockStorage, batchStorage) {
        this.blockStorage = blockStorage;
        this.batchStorage = batchStorage;
        this.queue = [];
        this.latestScannedBlock = -1;
    }
    async getPendingUserTransactions() {
        const nextHeight = await this.blockStorage.getCurrentBlockHeight();
        for (let height = this.latestScannedBlock + 1; height < nextHeight; height++) {
            // eslint-disable-next-line no-await-in-loop
            const block = await this.blockStorage.getBlockAt(height);
            if (block !== undefined) {
                const hashes = block.transactions.map((tx) => tx.tx.hash().toString());
                this.queue = this.queue.filter((tx) => !hashes.includes(tx.hash().toString()));
            }
        }
        this.latestScannedBlock = nextHeight - 1;
        return this.queue.slice();
    }
    async pushUserTransaction(tx) {
        const notInQueue = this.queue.find((tx2) => tx2.hash().toString() === tx.hash().toString()) === undefined;
        if (notInQueue) {
            this.queue.push(tx);
        }
        return notInQueue;
    }
    async findBatch(block) {
        const tipHeight = await this.batchStorage.getCurrentBlockHeight();
        for (let height = tipHeight - 1; height >= 0; height--) {
            // eslint-disable-next-line no-await-in-loop
            const batch = await this.batchStorage.getBlockAt(height);
            if (batch === undefined) {
                return undefined;
            }
            if (batch.bundles.includes(block)) {
                return height;
            }
        }
        return undefined;
    }
    async findTransaction(hash) {
        const tipHeight = await this.blockStorage.getCurrentBlockHeight();
        const hashField = Field(hash);
        for (let height = tipHeight - 1; height >= 0; height--) {
            // eslint-disable-next-line no-await-in-loop
            const block = await this.blockStorage.getBlockAt(height);
            if (block === undefined) {
                return undefined;
            }
            const txResult = block.transactions.find((tx) => tx.tx.hash().equals(hashField).toBoolean());
            if (txResult !== undefined) {
                // eslint-disable-next-line no-await-in-loop
                const batch = await this.findBatch(block.hash.toString());
                return {
                    transaction: txResult.tx,
                    block: block.transactionsHash.toString(),
                    batch,
                };
            }
        }
        return undefined;
    }
};
InMemoryTransactionStorage = __decorate([
    injectable(),
    __param(0, inject("BlockStorage")),
    __param(1, inject("BatchStorage")),
    __metadata("design:paramtypes", [Object, InMemoryBatchStorage])
], InMemoryTransactionStorage);
