import { TransactionStorage } from "../repositories/TransactionStorage";
import { PendingTransaction } from "../../mempool/PendingTransaction";
import { HistoricalBlockStorage, BlockStorage } from "../repositories/BlockStorage";
import { InMemoryBatchStorage } from "./InMemoryBatchStorage";
export declare class InMemoryTransactionStorage implements TransactionStorage {
    private readonly blockStorage;
    private readonly batchStorage;
    private queue;
    private latestScannedBlock;
    constructor(blockStorage: BlockStorage & HistoricalBlockStorage, batchStorage: InMemoryBatchStorage);
    getPendingUserTransactions(): Promise<PendingTransaction[]>;
    pushUserTransaction(tx: PendingTransaction): Promise<boolean>;
    private findBatch;
    findTransaction(hash: string): Promise<{
        transaction: PendingTransaction;
        block?: string;
        batch?: number;
    } | undefined>;
}
//# sourceMappingURL=InMemoryTransactionStorage.d.ts.map