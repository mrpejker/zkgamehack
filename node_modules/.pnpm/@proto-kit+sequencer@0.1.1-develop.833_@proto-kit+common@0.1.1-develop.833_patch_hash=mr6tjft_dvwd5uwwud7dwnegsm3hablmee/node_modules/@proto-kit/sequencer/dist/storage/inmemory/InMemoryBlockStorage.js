var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
export let InMemoryBlockStorage = class InMemoryBlockStorage {
    constructor(batchStorage) {
        this.batchStorage = batchStorage;
        this.blocks = [];
        this.results = [];
    }
    async getBlockAt(height) {
        return this.blocks.at(height);
    }
    async getCurrentBlockHeight() {
        return this.blocks.length;
    }
    async getLatestBlock() {
        const currentHeight = await this.getCurrentBlockHeight();
        const block = await this.getBlockAt(currentHeight - 1);
        const result = this.results[currentHeight - 1];
        if (block === undefined) {
            return undefined;
        }
        return {
            block,
            result,
        };
    }
    async getNewBlocks() {
        const latestBatch = await this.batchStorage.getLatestBlock();
        let cursor = 0;
        if (latestBatch !== undefined) {
            cursor = this.blocks.reduce((c, block, index) => latestBatch.bundles.includes(block.hash.toString()) ? index + 1 : c, 0);
        }
        const slice = this.blocks.slice(cursor);
        let results = this.results.slice(Math.max(cursor - 1, 0));
        if (cursor === 0) {
            results = [undefined, ...results];
        }
        return slice.map((block, index) => ({
            block: {
                block,
                result: results[index + 1],
            },
            lastBlockResult: results[index],
        }));
    }
    async pushBlock(block) {
        this.blocks.push(block);
    }
    async getNewestMetadata() {
        return this.results.length > 0 ? this.results.at(-1) : undefined;
    }
    async pushMetadata(metadata) {
        this.results.push(metadata);
    }
    async getBlock(hash) {
        return this.blocks.find((block) => block.hash.toString() === hash);
    }
};
InMemoryBlockStorage = __decorate([
    injectable(),
    __param(0, inject("BatchStorage")),
    __metadata("design:paramtypes", [Object])
], InMemoryBlockStorage);
