var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject } from "tsyringe";
import { noop, log } from "@proto-kit/common";
import { SequencerModule, sequencerModule, } from "../sequencer/builder/SequencerModule";
export let DatabasePruneModule = class DatabasePruneModule extends SequencerModule {
    constructor(database) {
        super();
        this.database = database;
    }
    async start() {
        try {
            if (this.config?.pruneOnStartup ?? false) {
                log.info("Pruning database");
                await this.database.pruneDatabase();
            }
        }
        catch (e) {
            noop();
        }
    }
};
DatabasePruneModule = __decorate([
    sequencerModule(),
    __param(0, inject("Database")),
    __metadata("design:paramtypes", [Object])
], DatabasePruneModule);
