import { Bool, Field } from "o1js";
import { BlockHashMerkleTreeWitness, NetworkState } from "@proto-kit/protocol";
import { PendingTransaction } from "../../mempool/PendingTransaction";
import { UntypedStateTransition } from "../../protocol/production/helpers/UntypedStateTransition";
export interface TransactionExecutionResult {
    tx: PendingTransaction;
    stateTransitions: UntypedStateTransition[];
    protocolTransitions: UntypedStateTransition[];
    status: Bool;
    statusMessage?: string;
}
export interface UnprovenBlock {
    hash: Field;
    height: Field;
    networkState: {
        before: NetworkState;
        during: NetworkState;
    };
    transactions: TransactionExecutionResult[];
    transactionsHash: Field;
    toEternalTransactionsHash: Field;
    fromEternalTransactionsHash: Field;
    fromBlockHashRoot: Field;
    fromMessagesHash: Field;
    toMessagesHash: Field;
    previousBlockHash: Field | undefined;
}
export declare const UnprovenBlock: {
    calculateHash(height: Field, transactionsHash: Field): Field;
    hash(block: Omit<UnprovenBlock, "hash">): Field;
};
export interface UnprovenBlockMetadata {
    blockHash: bigint;
    stateRoot: bigint;
    blockHashRoot: bigint;
    afterNetworkState: NetworkState;
    blockStateTransitions: UntypedStateTransition[];
    blockHashWitness: BlockHashMerkleTreeWitness;
}
export interface UnprovenBlockWithMetadata {
    block: UnprovenBlock;
    metadata: UnprovenBlockMetadata;
}
export declare const UnprovenBlockWithMetadata: {
    createEmpty: () => {
        block: {
            hash: import("o1js/dist/node/lib/provable/field").Field;
            height: import("o1js/dist/node/lib/provable/field").Field;
            transactionsHash: import("o1js/dist/node/lib/provable/field").Field;
            fromEternalTransactionsHash: import("o1js/dist/node/lib/provable/field").Field;
            toEternalTransactionsHash: import("o1js/dist/node/lib/provable/field").Field;
            transactions: never[];
            networkState: {
                before: NetworkState;
                during: NetworkState;
            };
            fromBlockHashRoot: import("o1js/dist/node/lib/provable/field").Field;
            fromMessagesHash: import("o1js/dist/node/lib/provable/field").Field;
            toMessagesHash: import("o1js/dist/node/lib/provable/field").Field;
            previousBlockHash: undefined;
        };
        metadata: {
            afterNetworkState: NetworkState;
            stateRoot: bigint;
            blockHashRoot: bigint;
            blockStateTransitions: never[];
            blockHashWitness: import("@proto-kit/common").AbstractMerkleWitness;
            blockHash: bigint;
        };
    };
};
//# sourceMappingURL=UnprovenBlock.d.ts.map