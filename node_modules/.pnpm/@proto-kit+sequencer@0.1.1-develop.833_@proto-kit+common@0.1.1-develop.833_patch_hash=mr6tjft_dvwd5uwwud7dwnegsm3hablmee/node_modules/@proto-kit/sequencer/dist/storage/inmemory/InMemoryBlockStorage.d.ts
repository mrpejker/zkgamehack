import { HistoricalBlockStorage, BlockQueue, BlockStorage } from "../repositories/BlockStorage";
import type { Block, BlockResult, BlockWithResult } from "../model/Block";
import { BlockWithPreviousResult } from "../../protocol/production/BatchProducerModule";
import { BatchStorage } from "../repositories/BatchStorage";
export declare class InMemoryBlockStorage implements BlockStorage, HistoricalBlockStorage, BlockQueue {
    private readonly batchStorage;
    constructor(batchStorage: BatchStorage);
    private readonly blocks;
    private readonly results;
    getBlockAt(height: number): Promise<Block | undefined>;
    getCurrentBlockHeight(): Promise<number>;
    getLatestBlock(): Promise<BlockWithResult | undefined>;
    getNewBlocks(): Promise<BlockWithPreviousResult[]>;
    pushBlock(block: Block): Promise<void>;
    getNewestMetadata(): Promise<BlockResult | undefined>;
    pushMetadata(metadata: BlockResult): Promise<void>;
    getBlock(hash: string): Promise<Block | undefined>;
}
//# sourceMappingURL=InMemoryBlockStorage.d.ts.map