var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { MethodParameterEncoder, Runtime, } from "@proto-kit/module";
export let TransactionValidator = class TransactionValidator {
    constructor(runtime) {
        this.runtime = runtime;
    }
    validateMethod(tx) {
        // Check if method exists
        // We don't actually need to use runtime.getMethodById here, bcs the
        // module name validation happens inside getMethodNameFromId
        // and also in the next step
        const methodPath = this.runtime.methodIdResolver.getMethodNameFromId(tx.methodId.toBigInt());
        if (methodPath === undefined) {
            return `Method with id ${tx.methodId} does not exist`;
        }
        // Check if parameters are decodable
        const runtimeModule = this.runtime.resolve(methodPath[0]);
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const encoder = MethodParameterEncoder.fromMethod(runtimeModule, methodPath[1]);
        return undefined;
    }
    validateTx(tx) {
        const methodError = this.validateMethod(tx);
        if (methodError !== undefined) {
            return [false, methodError];
        }
        const validSignature = tx.signature.verify(tx.sender, tx.getSignatureData());
        if (!validSignature.toBoolean()) {
            return [false, "Signature provided is not valid"];
        }
        return [true, undefined];
    }
};
TransactionValidator = __decorate([
    injectable(),
    __param(0, inject("Runtime")),
    __metadata("design:paramtypes", [Runtime])
], TransactionValidator);
