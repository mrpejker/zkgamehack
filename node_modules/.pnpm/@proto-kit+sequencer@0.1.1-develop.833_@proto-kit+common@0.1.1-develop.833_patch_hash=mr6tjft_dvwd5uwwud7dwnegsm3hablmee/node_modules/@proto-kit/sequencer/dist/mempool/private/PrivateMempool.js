var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { EventEmitter, log, noop } from "@proto-kit/common";
import { inject } from "tsyringe";
import { sequencerModule, SequencerModule, } from "../../sequencer/builder/SequencerModule";
import { TransactionValidator } from "../verification/TransactionValidator";
export let PrivateMempool = class PrivateMempool extends SequencerModule {
    constructor(transactionValidator, transactionStorage) {
        super();
        this.transactionValidator = transactionValidator;
        this.transactionStorage = transactionStorage;
        this.events = new EventEmitter();
    }
    async add(tx) {
        const [txValid, error] = this.transactionValidator.validateTx(tx);
        if (txValid) {
            const success = await this.transactionStorage.pushUserTransaction(tx);
            if (success) {
                this.events.emit("mempool-transaction-added", tx);
                log.info(`Transaction added to mempool: ${tx.hash().toString()} (${(await this.getTxs()).length} transactions in mempool)`);
            }
            else {
                log.error(`Transaction ${tx.hash().toString()} rejected: already exists in mempool`);
            }
            return success;
        }
        log.error(`Validation of tx ${tx.hash().toString()} failed:`, `${error ?? "unknown error"}`);
        throw new Error(`Validation of tx ${tx.hash().toString()} failed: ${error ?? "unknown error"}`);
    }
    async getTxs() {
        return await this.transactionStorage.getPendingUserTransactions();
    }
    async start() {
        noop();
    }
};
PrivateMempool = __decorate([
    sequencerModule(),
    __param(1, inject("TransactionStorage")),
    __metadata("design:paramtypes", [TransactionValidator, Object])
], PrivateMempool);
