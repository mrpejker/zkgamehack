import { InMemoryStateService } from "@proto-kit/module";
import { SimpleAsyncStateService } from "@proto-kit/protocol";
import { Field } from "o1js";
/**
 * A simple stateservice that records the retrieved and written state.
 * The values fields from the extended InMemoryStateService serves as the memory.
 * After merging, the memory will not be deleted.
 * Therefore, this service should not be used twice, except consectively
 */
export declare class RecordingStateService extends InMemoryStateService implements SimpleAsyncStateService {
    private readonly parent;
    constructor(parent: SimpleAsyncStateService);
    /**
     * Works like get(), but if a value is in this store,
     * but is known to be empty, this will return null
     */
    protected getNullAware(key: Field): Field[] | null | undefined;
    get(key: Field): Promise<Field[] | undefined>;
    set(key: Field, value: Field[] | undefined): Promise<void>;
    getRecorded(): Record<string, import("o1js/dist/node/lib/provable/field").Field[] | null>;
    mergeIntoParent(): Promise<void>;
}
//# sourceMappingURL=RecordingStateService.d.ts.map