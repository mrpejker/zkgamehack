import { InMemoryStateService } from "@proto-kit/module";
import { Field } from "o1js";
import { mapSequential } from "@proto-kit/common";
/**
 * A simple stateservice that records the retrieved and written state.
 * The values fields from the extended InMemoryStateService serves as the memory.
 * After merging, the memory will not be deleted.
 * Therefore, this service should not be used twice, except consectively
 */
export class RecordingStateService extends InMemoryStateService {
    constructor(parent) {
        super();
        this.parent = parent;
    }
    /**
     * Works like get(), but if a value is in this store,
     * but is known to be empty, this will return null
     */
    getNullAware(key) {
        return this.values[key.toString()];
    }
    async get(key) {
        const remembered = this.getNullAware(key);
        if (remembered !== undefined) {
            return remembered ?? undefined;
        }
        const fetched = await this.parent.get(key);
        if (fetched !== undefined) {
            await super.set(key, fetched);
        }
        return fetched;
    }
    async set(key, value) {
        await super.set(key, value);
    }
    getRecorded() {
        return this.values;
    }
    async mergeIntoParent() {
        await mapSequential(Object.entries(this.values), async ([key, values]) => {
            await this.parent.set(Field(key), values ?? undefined);
        });
    }
}
