import { Field } from "o1js";
import { InMemoryStateService } from "@proto-kit/module";
import { SimpleAsyncStateService } from "@proto-kit/protocol";
import { AsyncStateService, StateEntry } from "../async/AsyncStateService";
export declare class CachedStateService extends InMemoryStateService implements AsyncStateService, SimpleAsyncStateService {
    private readonly parent;
    private writes;
    constructor(parent: AsyncStateService | undefined);
    /**
     * Works like get(), but if a value is in this store,
     * but is known to be empty, this will return null
     */
    private getNullAware;
    private assertParentNotNull;
    writeStates(entries: StateEntry[]): void;
    commit(): Promise<void>;
    openTransaction(): Promise<void>;
    preloadKey(key: Field): Promise<void>;
    preloadKeys(keys: Field[]): Promise<void>;
    getMany(keys: Field[]): Promise<StateEntry[]>;
    get(key: Field): Promise<Field[] | undefined>;
    /**
     * Merges all caches set() operation into the parent and
     * resets this instance to the parent's state (by clearing the cache and
     * defaulting to the parent)
     */
    mergeIntoParent(): Promise<void>;
}
//# sourceMappingURL=CachedStateService.d.ts.map