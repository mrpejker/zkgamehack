import { Runtime, RuntimeModulesRecord } from "@proto-kit/module";
import { Withdrawal } from "@proto-kit/protocol";
import type { BlockTriggerBase } from "../../protocol/production/trigger/BlockTrigger";
import { SettlementModule } from "../SettlementModule";
import { SequencerModule } from "../../sequencer/builder/SequencerModule";
import { Sequencer } from "../../sequencer/executor/Sequencer";
export interface OutgoingMessage<Type> {
    index: number;
    value: Type;
}
/**
 * This interface allows the SettlementModule to retrieve information about
 * pending L2-dispatched (outgoing) messages that it can then use to roll
 * them up on the L1 contract.
 *
 * In the future, this interface should be flexibly typed so that the
 * outgoing message type is not limited to Withdrawals
 */
export interface OutgoingMessageQueue {
    peek: (num: number) => OutgoingMessage<Withdrawal>[];
    pop: (num: number) => OutgoingMessage<Withdrawal>[];
    length: () => number;
}
export declare class WithdrawalQueue extends SequencerModule implements OutgoingMessageQueue {
    private readonly runtime;
    private readonly sequencer;
    private lockedQueue;
    private unlockedQueue;
    private outgoingWithdrawalIds;
    private currentIndex;
    constructor(runtime: Runtime<RuntimeModulesRecord>, sequencer: Sequencer<{
        BlockTrigger: typeof BlockTriggerBase;
        SettlementModule: typeof SettlementModule;
    }>);
    peek(num: number): OutgoingMessage<Withdrawal>[];
    pop(num: number): OutgoingMessage<Withdrawal>[];
    length(): number;
    start(): Promise<void>;
}
//# sourceMappingURL=WithdrawalQueue.d.ts.map