import { Protocol, DispatchSmartContract, SettlementSmartContract, SettlementContractConfig, MandatoryProtocolModulesRecord } from "@proto-kit/protocol";
import { PrivateKey, PublicKey, Transaction } from "o1js";
import { EventEmitter, EventEmittingComponent } from "@proto-kit/common";
import { Runtime, RuntimeModulesRecord } from "@proto-kit/module";
import { SequencerModule } from "../sequencer/builder/SequencerModule";
import { FlowCreator } from "../worker/flow/Flow";
import { SettlementStorage } from "../storage/repositories/SettlementStorage";
import { MessageStorage } from "../storage/repositories/MessageStorage";
import type { MinaBaseLayer } from "../protocol/baselayer/MinaBaseLayer";
import { Batch, SettleableBatch } from "../storage/model/Batch";
import { AsyncMerkleTreeStore } from "../state/async/AsyncMerkleTreeStore";
import { BlockProofSerializer } from "../protocol/production/helpers/BlockProofSerializer";
import { Settlement } from "../storage/model/Settlement";
import { IncomingMessageAdapter } from "./messages/IncomingMessageAdapter";
import type { OutgoingMessageQueue } from "./messages/WithdrawalQueue";
import { MinaTransactionSender } from "./transactions/MinaTransactionSender";
export interface SettlementModuleConfig {
    feepayer: PrivateKey;
    address?: PublicKey;
}
export type SettlementModuleEvents = {
    "settlement-submitted": [Batch];
};
export declare class SettlementModule extends SequencerModule<SettlementModuleConfig> implements EventEmittingComponent<SettlementModuleEvents> {
    private readonly baseLayer;
    private readonly protocol;
    private readonly runtime;
    private readonly flowCreator;
    private readonly incomingMessagesAdapter;
    private readonly messageStorage;
    private readonly settlementStorage;
    private readonly outgoingMessageQueue;
    private readonly merkleTreeStore;
    private readonly blockProofSerializer;
    private readonly transactionSender;
    protected contracts?: {
        settlement: SettlementSmartContract;
        dispatch: DispatchSmartContract;
    };
    protected settlementModuleConfig?: SettlementContractConfig;
    addresses?: {
        settlement: PublicKey;
        dispatch: PublicKey;
    };
    events: EventEmitter<SettlementModuleEvents>;
    constructor(baseLayer: MinaBaseLayer, protocol: Protocol<MandatoryProtocolModulesRecord>, runtime: Runtime<RuntimeModulesRecord>, flowCreator: FlowCreator, incomingMessagesAdapter: IncomingMessageAdapter, messageStorage: MessageStorage, settlementStorage: SettlementStorage, outgoingMessageQueue: OutgoingMessageQueue, merkleTreeStore: AsyncMerkleTreeStore, blockProofSerializer: BlockProofSerializer, transactionSender: MinaTransactionSender);
    private settlementContractModule;
    getSettlementModuleConfig(): SettlementContractConfig;
    getContracts(): {
        settlement: SettlementSmartContract;
        dispatch: DispatchSmartContract;
    };
    sendRollupTransactions(options: {
        nonce: number;
    }): Promise<{
        tx: Transaction<false, true>;
    }[]>;
    settleBatch(batch: SettleableBatch, options?: {
        nonce?: number;
    }): Promise<Settlement>;
    deploy(settlementKey: PrivateKey, dispatchKey: PrivateKey, options?: {
        nonce?: number;
    }): Promise<void>;
    start(): Promise<void>;
}
//# sourceMappingURL=SettlementModule.d.ts.map