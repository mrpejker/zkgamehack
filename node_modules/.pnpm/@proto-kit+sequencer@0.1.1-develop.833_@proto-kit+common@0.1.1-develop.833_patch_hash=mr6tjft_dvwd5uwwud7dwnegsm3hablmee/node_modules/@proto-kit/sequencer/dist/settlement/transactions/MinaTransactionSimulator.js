var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { addCachedAccount, Bool, fetchAccount, Field, Mina, TokenId, Types, UInt32, } from "o1js";
import { match } from "ts-pattern";
import { inject, injectable } from "tsyringe";
import { noop } from "@proto-kit/common";
import { distinctByPredicate } from "../../helpers/utils";
export let MinaTransactionSimulator = class MinaTransactionSimulator {
    constructor(baseLayer) {
        this.baseLayer = baseLayer;
        this.local = this.baseLayer.config.network.local;
        this.loaded = {};
    }
    async fetchGraphql(f) {
        if (!this.baseLayer.config.network.local) {
            return await f();
        }
        return undefined;
    }
    async getAccountsInternal(tx) {
        const { feePayer, accountUpdates } = tx.transaction;
        const accounts = {};
        const accountsKeys = [[feePayer.body.publicKey, TokenId.default]]
            .concat(accountUpdates.map((au) => [au.publicKey, au.tokenId]))
            .filter(distinctByPredicate((a, b) => a[0].equals(b[0]).and(a[1].equals(b[1])).toBoolean()));
        for (const [pubKey, tokenId] of accountsKeys) {
            // eslint-disable-next-line no-await-in-loop
            accounts[this.cacheKey(pubKey, tokenId)] = await this.getAccount(pubKey, tokenId);
        }
        return accounts;
    }
    async getAccounts(tx) {
        return Object.values(await this.getAccountsInternal(tx));
    }
    async applyTransaction(tx) {
        const { feePayer, accountUpdates } = tx.transaction;
        const accounts = await this.getAccountsInternal(tx);
        const feePayerAccount = accounts[this.cacheKey(feePayer.body.publicKey)];
        if (!this.checkFeePayer(feePayerAccount, feePayer)) {
            throw new Error("Feepayer invalid");
        }
        this.applyFeepayer(feePayerAccount, feePayer);
        // This check isn't 100% accurate, since the preconditions should probably
        // be checked after previous AUs have been already applied.
        // But it should be enough for now
        const valid = accountUpdates
            .map((au) => this.checkPreconditions(accounts[this.cacheKey(au.publicKey, au.tokenId)], au))
            .reduce((a, b) => a && b);
        if (!valid) {
            throw new Error("AccountUpdate preconditions not satisfied");
        }
        accountUpdates.forEach((au) => {
            this.apply(accounts[this.cacheKey(au.publicKey, au.tokenId)], au);
        });
        Object.entries(accounts).forEach(([, account]) => {
            addCachedAccount(account);
            this.loaded[account.publicKey.toBase58()] = account;
        });
    }
    cacheKey(publicKey, tokenId) {
        return (publicKey.toBase58() +
            (tokenId && tokenId.equals(TokenId.default).not().toBoolean()
                ? `-${tokenId.toString()}`
                : ""));
    }
    async getAccount(publicKey, tokenId) {
        const key = this.cacheKey(publicKey, tokenId);
        if (this.loaded[key] === undefined) {
            await this.reloadAccount(publicKey, tokenId);
        }
        return this.loaded[key] ?? this.dummyAccount(publicKey);
    }
    dummyAccount(pubkey, tokenId) {
        const dummy = Types.Account.empty();
        if (pubkey) {
            dummy.publicKey = pubkey;
        }
        if (tokenId) {
            dummy.tokenId = tokenId;
        }
        return dummy;
    }
    // TODO Add applying of pending transaction fetched from mempool or DB
    async reloadAccount(publicKey, tokenId) {
        const key = this.cacheKey(publicKey, tokenId);
        if (!this.local) {
            const fetchedAccount = await this.fetchGraphql(() => fetchAccount({ publicKey, tokenId }));
            const getAccountSafe = () => {
                try {
                    return Mina.getAccount(publicKey, tokenId);
                }
                catch {
                    return undefined;
                }
            };
            const account = match(fetchedAccount)
                .with(undefined, () => getAccountSafe())
                .with({ account: undefined }, () => getAccountSafe())
                .with({ error: undefined }, (v) => v.account)
                .exhaustive();
            if (account !== undefined) {
                addCachedAccount(account);
                this.loaded[key] = account;
            }
        }
        else {
            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
            const instance = Mina.activeInstance;
            try {
                this.loaded[key] = instance.getAccount(publicKey, tokenId);
            }
            catch {
                noop();
            }
        }
    }
    checkFeePayer(account, feepayer) {
        return account.balance
            .greaterThanOrEqual(feepayer.body.fee)
            .and(account.nonce.equals(feepayer.body.nonce))
            .toBoolean();
    }
    checkPreconditions(account, au) {
        let valid = true;
        const { balance, nonce, state } = au.body.preconditions.account;
        if (balance.isSome.toBoolean()) {
            valid && (valid = account.balance
                .greaterThanOrEqual(balance.value.lower)
                .and(account.balance.lessThanOrEqual(balance.value.upper))
                .toBoolean());
        }
        if (nonce.isSome.toBoolean()) {
            valid && (valid = account.nonce
                .greaterThanOrEqual(nonce.value.lower)
                .and(account.nonce.lessThanOrEqual(nonce.value.upper))
                .toBoolean());
        }
        for (let i = 0; i < 8; i++) {
            if (state[i].isSome.toBoolean()) {
                valid && (valid = account.zkapp.appState[i].equals(state[i].value).toBoolean());
            }
        }
        return valid;
    }
    applyFeepayer(account, feepayer) {
        account.balance = account.balance.sub(feepayer.body.fee);
        account.nonce = account.nonce.add(1);
    }
    apply(account, au) {
        const { balanceChange, update, incrementNonce } = au.body;
        try {
            account.balance = balanceChange.sgn.isPositive().toBoolean()
                ? account.balance.add(balanceChange.magnitude)
                : account.balance.sub(balanceChange.magnitude);
        }
        catch (e) {
            throw new Error(`Account balance: ${account.balance.toString()}, balance change: ${balanceChange.sgn.isPositive().toBoolean() ? "+" : "-"}${balanceChange.magnitude.toString()}`);
        }
        if (incrementNonce.toBoolean()) {
            account.nonce = account.nonce.add(1);
        }
        if (update.verificationKey.isSome.toBoolean()) {
            (account.zkapp ?? (account.zkapp = {
                appState: Array(8)
                    .fill(0)
                    .map(() => Field(0)),
                verificationKey: undefined,
                actionState: Array(5)
                    .fill(0)
                    .map(() => Field(0)),
                zkappUri: "",
                provedState: Bool(false),
                zkappVersion: UInt32.zero,
                lastActionSlot: UInt32.zero,
            })).verificationKey = update.verificationKey.value;
        }
        if (account.zkapp !== undefined) {
            const { appState } = update;
            for (let i = 0; i < 8; i++) {
                if (appState[i].isSome.toBoolean()) {
                    account.zkapp.appState[i] = appState[i].value;
                }
            }
        }
    }
};
MinaTransactionSimulator = __decorate([
    injectable(),
    __param(0, inject("BaseLayer")),
    __metadata("design:paramtypes", [Function])
], MinaTransactionSimulator);
