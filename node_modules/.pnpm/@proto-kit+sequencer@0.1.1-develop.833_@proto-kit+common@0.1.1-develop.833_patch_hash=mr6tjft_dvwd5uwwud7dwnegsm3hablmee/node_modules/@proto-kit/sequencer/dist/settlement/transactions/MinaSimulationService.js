var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { addCachedAccount, fetchAccount, fetchLastBlock, Ledger, Mina, } from "o1js";
import { match } from "ts-pattern";
import { MinaBaseLayer } from "../../protocol/baselayer/MinaBaseLayer";
export let MinaSimulationService = class MinaSimulationService {
    constructor(baseLayer) {
        this.baseLayer = baseLayer;
        this.ledger = Ledger.create();
        this.networkState = undefined;
    }
    async fetchGraphql(f) {
        if (!this.baseLayer.config.network.local) {
            return await f();
        }
        return undefined;
    }
    async updateNetworkState() {
        const block = await this.fetchGraphql(() => fetchLastBlock());
        this.networkState = block ?? Mina.getNetworkState();
    }
    async updateAccount(publicKey, tokenId) {
        const fetchedAccount = await this.fetchGraphql(() => fetchAccount({ publicKey, tokenId }));
        const getAccountSafe = () => {
            try {
                return Mina.getAccount(publicKey, tokenId);
            }
            catch {
                return undefined;
            }
        };
        const account = match(fetchedAccount)
            .with(undefined, () => getAccountSafe())
            .with({ account: undefined }, () => getAccountSafe())
            .with({ error: undefined }, (v) => v.account)
            .exhaustive();
        // this.ledger.addAccount(Ml.fromPublicKey(publicKey));
        if (account !== undefined) {
            addCachedAccount(account);
        }
    }
    applyTransaction(tx) {
        const txJson = tx.toJSON();
        this.ledger.applyJsonTransaction(txJson, String(1e9), JSON.stringify(this.networkState));
    }
};
MinaSimulationService = __decorate([
    injectable(),
    __param(0, inject("BaseLayer")),
    __metadata("design:paramtypes", [MinaBaseLayer])
], MinaSimulationService);
