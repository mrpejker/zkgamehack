import { AccountUpdate, Field, Mina, PublicKey, Types, Transaction } from "o1js";
import { ReturnType } from "@proto-kit/protocol";
import type { MinaBaseLayer } from "../../protocol/baselayer/MinaBaseLayer";
type Account = ReturnType<typeof Mina.getAccount>;
type FeePayer = Transaction<false, false>["transaction"]["feePayer"];
export declare class MinaTransactionSimulator {
    private readonly baseLayer;
    private local;
    private loaded;
    constructor(baseLayer: MinaBaseLayer);
    private fetchGraphql;
    private getAccountsInternal;
    getAccounts(tx: Transaction<boolean, boolean>): Promise<Account[]>;
    applyTransaction(tx: Transaction<boolean, boolean>): Promise<void>;
    private cacheKey;
    getAccount(publicKey: PublicKey, tokenId?: Field): Promise<Types.Account>;
    private dummyAccount;
    reloadAccount(publicKey: PublicKey, tokenId?: Field): Promise<void>;
    checkFeePayer(account: Account, feepayer: FeePayer): boolean;
    checkPreconditions(account: Account, au: AccountUpdate): boolean;
    applyFeepayer(account: Account, feepayer: FeePayer): void;
    apply(account: Account, au: AccountUpdate): void;
}
export {};
//# sourceMappingURL=MinaTransactionSimulator.d.ts.map