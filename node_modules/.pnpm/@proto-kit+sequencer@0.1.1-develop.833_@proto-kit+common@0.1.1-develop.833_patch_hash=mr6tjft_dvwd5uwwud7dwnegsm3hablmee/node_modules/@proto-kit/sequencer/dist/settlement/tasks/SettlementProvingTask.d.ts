import { MandatoryProtocolModulesRecord, MandatorySettlementModulesRecord, Protocol, ReturnType, SettlementContractModule } from "@proto-kit/protocol";
import { Field, Mina, Proof, Transaction, Void } from "o1js";
import { CompileRegistry } from "../../protocol/production/tasks/CompileRegistry";
import { Task, TaskSerializer } from "../../worker/flow/Task";
import { TaskWorkerModule } from "../../worker/worker/TaskWorkerModule";
type Account = ReturnType<typeof Mina.getAccount>;
export type ChainStateTaskArgs = {
    accounts: Account[];
    graphql: string | undefined;
};
export type TransactionTaskArgs = {
    transaction: Transaction<false, true>;
    chainState: ChainStateTaskArgs;
};
export type TransactionTaskResult = {
    transaction: Mina.Transaction<true, true>;
};
export declare class SomeProofSubclass extends Proof<Field, Void> {
    static publicInputType: typeof import("o1js/dist/node/lib/provable/field").Field & ((x: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field | import("o1js/dist/node/lib/provable/core/fieldvar").FieldConst | import("o1js/dist/node/lib/provable/core/fieldvar").FieldVar) => import("o1js/dist/node/lib/provable/field").Field);
    static publicOutputType: import("o1js/dist/node/lib/provable/types/struct").ProvablePureExtended<void, void, null>;
}
/**
 * Implementation of a task to prove any Mina transaction.
 * The o1js-internal account state is configurable via the task args.
 * It also dynamically retrieves the proof generation parameters from
 * the provided AccountUpdate
 */
export declare class SettlementProvingTask extends TaskWorkerModule implements Task<TransactionTaskArgs, TransactionTaskResult> {
    private readonly protocol;
    private readonly compileRegistry;
    name: string;
    settlementContractModule: SettlementContractModule<MandatorySettlementModulesRecord> | undefined;
    constructor(protocol: Protocol<MandatoryProtocolModulesRecord>, compileRegistry: CompileRegistry);
    private withCustomInstance;
    compute(input: TransactionTaskArgs): Promise<TransactionTaskResult>;
    private getProofSerializer;
    inputSerializer(): TaskSerializer<TransactionTaskArgs>;
    prepare(): Promise<void>;
    resultSerializer(): TaskSerializer<TransactionTaskResult>;
}
export {};
//# sourceMappingURL=SettlementProvingTask.d.ts.map