var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject } from "tsyringe";
import { injectOptional } from "@proto-kit/common";
import { sequencerModule } from "../../../sequencer/builder/SequencerModule";
import { BatchProducerModule } from "../BatchProducerModule";
import { BlockProducerModule } from "../sequencing/BlockProducerModule";
import { BlockTriggerBase } from "./BlockTrigger";
export let ManualBlockTrigger = class ManualBlockTrigger extends BlockTriggerBase {
    constructor(batchProducerModule, blockProducerModule, settlementModule, blockQueue, batchStorage, settlementStorage) {
        super(blockProducerModule, batchProducerModule, settlementModule, blockQueue, batchStorage, settlementStorage);
    }
    /**
     * Produces both an unproven block and immediately produce a
     * settlement block proof
     */
    async produceBlockAndBatch() {
        return [await this.produceBlock(), await this.produceBatch()];
    }
    // These methods expose the internal methods publicly
    async produceBatch() {
        return await super.produceBatch();
    }
    async settle(batch) {
        return await super.settle(batch);
    }
    async produceBlock(enqueueInSettlementQueue = true) {
        return await super.produceBlock(enqueueInSettlementQueue);
    }
};
ManualBlockTrigger = __decorate([
    sequencerModule(),
    __param(0, inject("BatchProducerModule")),
    __param(1, inject("BlockProducerModule")),
    __param(2, injectOptional("SettlementModule")),
    __param(3, inject("BlockQueue")),
    __param(4, inject("BatchStorage")),
    __param(5, injectOptional("SettlementStorage")),
    __metadata("design:paramtypes", [BatchProducerModule,
        BlockProducerModule, Object, Object, Object, Object])
], ManualBlockTrigger);
