var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { injectable, singleton } from "tsyringe";
import { log } from "@proto-kit/common";
export let CompileRegistry = class CompileRegistry {
    constructor() {
        this.compilationPromises = {};
        this.contractCompilationPromises = {};
        this.compiledContracts = {};
    }
    getContractVerificationKey(name) {
        return this.compiledContracts[name]?.artifact;
    }
    // Use only the compile interface here, to avoid type issues
    async compile(name, zkProgram) {
        if (this.compilationPromises[name] === undefined) {
            log.info(`Compiling ${name}`);
            this.compilationPromises[name] = zkProgram.compile();
        }
        await this.compilationPromises[name];
        log.info(`Compiled ${name}`);
    }
    async compileSmartContract(name, contract, proofsEnabled = true) {
        if (this.contractCompilationPromises[name] === undefined) {
            if (proofsEnabled) {
                this.contractCompilationPromises[name] = contract.compile();
            }
            else {
                this.contractCompilationPromises[name] = Promise.resolve(undefined);
            }
        }
        const artifact = await this.contractCompilationPromises[name];
        this.compiledContracts[name] = {
            artifact,
            clas: contract,
        };
    }
    isSubtypeOfName(clas, name) {
        if (clas.name === name) {
            return true;
        }
        if (clas.name === "SmartContract") {
            return false;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        return this.isSubtypeOfName(Object.getPrototypeOf(clas), name);
    }
    getContractClassByName(name) {
        const clas = this.compiledContracts[name]?.clas;
        if (clas === undefined) {
            // Fall back to finding by class.name
            return Object.values(this.compiledContracts).find((entry) => this.isSubtypeOfName(entry.clas, name))?.clas;
        }
        return clas;
    }
};
CompileRegistry = __decorate([
    injectable(),
    singleton()
], CompileRegistry);
