import { BlockProof, BlockProverExecutionData, BlockProverPublicInput, MandatoryProtocolModulesRecord, MethodPublicOutput, Protocol, ProtocolModulesRecord, StateServiceProvider, StateTransitionProof } from "@proto-kit/protocol";
import { Proof } from "o1js";
import { Runtime } from "@proto-kit/module";
import { ProvableMethodExecutionContext } from "@proto-kit/common";
import { PairTuple } from "../../../helpers/utils";
import { PairingDerivedInput } from "../flow/ReductionTaskFlow";
import { TaskSerializer, Task } from "../../../worker/flow/Task";
import { TaskWorkerModule } from "../../../worker/worker/TaskWorkerModule";
import { TaskStateRecord } from "../TransactionTraceService";
import { CompileRegistry } from "./CompileRegistry";
import { JSONEncodableState } from "./RuntimeTaskParameters";
type RuntimeProof = Proof<undefined, MethodPublicOutput>;
export interface BlockProverParameters {
    publicInput: BlockProverPublicInput;
    executionData: BlockProverExecutionData;
    startingState: TaskStateRecord;
}
export type BlockProvingTaskParameters = PairingDerivedInput<StateTransitionProof, RuntimeProof, BlockProverParameters>;
export declare class DecodedStateSerializer {
    static fromJSON(json: JSONEncodableState): TaskStateRecord;
    static toJSON(input: TaskStateRecord): JSONEncodableState;
}
export declare class BlockReductionTask extends TaskWorkerModule implements Task<PairTuple<BlockProof>, BlockProof> {
    private readonly protocol;
    private readonly executionContext;
    private readonly compileRegistry;
    private readonly blockProver;
    name: string;
    constructor(protocol: Protocol<MandatoryProtocolModulesRecord & ProtocolModulesRecord>, executionContext: ProvableMethodExecutionContext, compileRegistry: CompileRegistry);
    inputSerializer(): TaskSerializer<PairTuple<BlockProof>>;
    resultSerializer(): TaskSerializer<BlockProof>;
    compute(input: PairTuple<BlockProof>): Promise<BlockProof>;
    prepare(): Promise<void>;
}
export declare class BlockProvingTask extends TaskWorkerModule implements Task<BlockProvingTaskParameters, BlockProof> {
    private readonly protocol;
    private readonly runtime;
    private readonly stateServiceProvider;
    private readonly executionContext;
    private readonly compileRegistry;
    private readonly stateTransitionProver;
    private readonly blockProver;
    private readonly runtimeProofType;
    name: string;
    constructor(protocol: Protocol<MandatoryProtocolModulesRecord & ProtocolModulesRecord>, runtime: Runtime<never>, stateServiceProvider: StateServiceProvider, executionContext: ProvableMethodExecutionContext, compileRegistry: CompileRegistry);
    inputSerializer(): TaskSerializer<BlockProvingTaskParameters>;
    resultSerializer(): TaskSerializer<BlockProof>;
    private executeWithPrefilledStateService;
    compute(input: PairingDerivedInput<StateTransitionProof, RuntimeProof, BlockProverParameters>): Promise<BlockProof>;
    prepare(): Promise<void>;
}
export {};
//# sourceMappingURL=BlockProvingTask.d.ts.map