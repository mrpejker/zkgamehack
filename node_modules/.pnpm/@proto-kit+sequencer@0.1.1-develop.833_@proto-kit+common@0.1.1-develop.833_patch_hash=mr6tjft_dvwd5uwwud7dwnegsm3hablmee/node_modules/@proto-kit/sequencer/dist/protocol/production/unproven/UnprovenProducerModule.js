var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject } from "tsyringe";
import { log, noop } from "@proto-kit/common";
import { ACTIONS_EMPTY_HASH } from "@proto-kit/protocol";
import { sequencerModule, SequencerModule, } from "../../../sequencer/builder/SequencerModule";
import { UnprovenBlockWithMetadata, } from "../../../storage/model/UnprovenBlock";
import { CachedStateService } from "../../../state/state/CachedStateService";
import { TransactionExecutionService } from "./TransactionExecutionService";
export let UnprovenProducerModule = class UnprovenProducerModule extends SequencerModule {
    constructor(mempool, messageStorage, unprovenStateService, unprovenMerkleStore, unprovenBlockQueue, blockTreeStore, executionService) {
        super();
        this.mempool = mempool;
        this.messageStorage = messageStorage;
        this.unprovenStateService = unprovenStateService;
        this.unprovenMerkleStore = unprovenMerkleStore;
        this.unprovenBlockQueue = unprovenBlockQueue;
        this.blockTreeStore = blockTreeStore;
        this.executionService = executionService;
        this.productionInProgress = false;
    }
    allowEmptyBlock() {
        return this.config.allowEmptyBlock ?? true;
    }
    async tryProduceUnprovenBlock() {
        if (!this.productionInProgress) {
            try {
                const block = await this.produceUnprovenBlock();
                if (block === undefined) {
                    if (!this.allowEmptyBlock()) {
                        log.info("No transactions in mempool, skipping production");
                    }
                    else {
                        log.error("Something wrong happened, skipping block");
                    }
                    return undefined;
                }
                log.info(`Produced unproven block (${block.transactions.length} txs)`);
                // Generate metadata for next block
                // TODO: make async of production in the future
                const metadata = await this.executionService.generateMetadataForNextBlock(block, this.unprovenMerkleStore, this.blockTreeStore, true);
                return {
                    block,
                    metadata,
                };
            }
            catch (error) {
                if (error instanceof Error) {
                    throw error;
                }
                else {
                    log.error(error);
                }
            }
            finally {
                this.productionInProgress = false;
            }
        }
        return undefined;
    }
    async collectProductionData() {
        const txs = await this.mempool.getTxs();
        const parentBlock = await this.unprovenBlockQueue.getLatestBlock();
        if (parentBlock === undefined) {
            log.debug("No unproven block metadata given, assuming first block, generating genesis metadata");
        }
        const messages = await this.messageStorage.getMessages(parentBlock?.block.toMessagesHash.toString() ??
            ACTIONS_EMPTY_HASH.toString());
        const metadata = parentBlock ?? UnprovenBlockWithMetadata.createEmpty();
        log.debug(`Unproven block collected, ${txs.length} txs, ${messages.length} messages`);
        return {
            txs: messages.concat(txs),
            metadata,
        };
    }
    async produceUnprovenBlock() {
        this.productionInProgress = true;
        const { txs, metadata } = await this.collectProductionData();
        // Skip production if no transactions are available for now
        if (txs.length === 0 && !this.allowEmptyBlock()) {
            return undefined;
        }
        const cachedStateService = new CachedStateService(this.unprovenStateService);
        const block = await this.executionService.createUnprovenBlock(cachedStateService, txs, metadata, this.allowEmptyBlock());
        await cachedStateService.mergeIntoParent();
        this.productionInProgress = false;
        return block;
    }
    async start() {
        noop();
    }
};
UnprovenProducerModule = __decorate([
    sequencerModule(),
    __param(0, inject("Mempool")),
    __param(1, inject("MessageStorage")),
    __param(2, inject("UnprovenStateService")),
    __param(3, inject("UnprovenMerkleStore")),
    __param(4, inject("UnprovenBlockQueue")),
    __param(5, inject("BlockTreeStore")),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object, TransactionExecutionService])
], UnprovenProducerModule);
