import { Field } from "o1js";
import { NetworkState } from "@proto-kit/protocol";
import { PendingTransaction } from "../../../mempool/PendingTransaction";
export class RuntimeProofParametersSerializer {
    toJSON(parameters) {
        const jsonReadyObject = {
            tx: parameters.tx.toJSON(),
            networkState: NetworkState.toJSON(parameters.networkState),
            state: Object.fromEntries(Object.entries(parameters.state).map(([key, value]) => [
                key,
                value?.map((v) => v.toString()),
            ])),
        };
        return JSON.stringify(jsonReadyObject);
    }
    fromJSON(json) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const jsonReadyObject = JSON.parse(json);
        return {
            tx: PendingTransaction.fromJSON(jsonReadyObject.tx),
            networkState: new NetworkState(NetworkState.fromJSON(jsonReadyObject.networkState)),
            state: Object.fromEntries(Object.entries(jsonReadyObject.state).map(([key, values]) => [
                key,
                values?.map((encodedField) => Field(encodedField)),
            ])),
        };
    }
}
