var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable, Lifecycle, scoped } from "tsyringe";
import { Protocol, } from "@proto-kit/protocol";
import { ProofTaskSerializer } from "../../../helpers/utils";
export let BlockProofSerializer = class BlockProofSerializer {
    constructor(protocol) {
        this.protocol = protocol;
    }
    getBlockProofSerializer() {
        if (this.serializer === undefined) {
            const blockProver = this.protocol.resolve("BlockProver");
            const proofType = blockProver.zkProgrammable.zkProgram.Proof;
            this.serializer = new ProofTaskSerializer(proofType);
        }
        return this.serializer;
    }
};
BlockProofSerializer = __decorate([
    injectable(),
    scoped(Lifecycle.ContainerScoped),
    __param(0, inject("Protocol")),
    __metadata("design:paramtypes", [Protocol])
], BlockProofSerializer);
