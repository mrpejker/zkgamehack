import { MandatoryProtocolModulesRecord, Protocol, ProtocolModulesRecord, StateTransitionProof, StateTransitionProvable } from "@proto-kit/protocol";
import { ProvableMethodExecutionContext } from "@proto-kit/common";
import { Task, TaskSerializer } from "../../../worker/flow/Task";
import { PairTuple } from "../../../helpers/utils";
import { TaskWorkerModule } from "../../../worker/worker/TaskWorkerModule";
import { StateTransitionProofParameters } from "./StateTransitionTaskParameters";
import { CompileRegistry } from "./CompileRegistry";
export declare class StateTransitionTask extends TaskWorkerModule implements Task<StateTransitionProofParameters, StateTransitionProof> {
    private readonly protocol;
    private readonly executionContext;
    private readonly compileRegistry;
    protected readonly stateTransitionProver: StateTransitionProvable;
    name: string;
    constructor(protocol: Protocol<MandatoryProtocolModulesRecord & ProtocolModulesRecord>, executionContext: ProvableMethodExecutionContext, compileRegistry: CompileRegistry);
    inputSerializer(): TaskSerializer<StateTransitionProofParameters>;
    resultSerializer(): TaskSerializer<StateTransitionProof>;
    compute(input: StateTransitionProofParameters): Promise<StateTransitionProof>;
    prepare(): Promise<void>;
}
export declare class StateTransitionReductionTask extends TaskWorkerModule implements Task<PairTuple<StateTransitionProof>, StateTransitionProof> {
    private readonly protocol;
    private readonly executionContext;
    private readonly compileRegistry;
    protected readonly stateTransitionProver: StateTransitionProvable;
    name: string;
    constructor(protocol: Protocol<MandatoryProtocolModulesRecord & ProtocolModulesRecord>, executionContext: ProvableMethodExecutionContext, compileRegistry: CompileRegistry);
    inputSerializer(): TaskSerializer<PairTuple<StateTransitionProof>>;
    resultSerializer(): TaskSerializer<StateTransitionProof>;
    compute(input: PairTuple<StateTransitionProof>): Promise<StateTransitionProof>;
    prepare(): Promise<void>;
}
//# sourceMappingURL=StateTransitionTask.d.ts.map