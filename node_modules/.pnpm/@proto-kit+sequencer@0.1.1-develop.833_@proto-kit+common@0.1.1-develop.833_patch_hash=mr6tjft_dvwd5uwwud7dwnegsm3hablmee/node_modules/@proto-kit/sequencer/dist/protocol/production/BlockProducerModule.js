var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject } from "tsyringe";
import { DefaultProvableHashList, MINA_EVENT_PREFIXES, MinaPrefixedProvableHashList, } from "@proto-kit/protocol";
import { Field } from "o1js";
import { log, noop, RollupMerkleTree } from "@proto-kit/common";
import { sequencerModule, SequencerModule, } from "../../sequencer/builder/SequencerModule";
import { CachedStateService } from "../../state/state/CachedStateService";
import { CachedMerkleTreeStore } from "../../state/merkle/CachedMerkleTreeStore";
import { TransactionTraceService } from "./TransactionTraceService";
import { BlockTaskFlowService } from "./BlockTaskFlowService";
import { BlockProofSerializer } from "./helpers/BlockProofSerializer";
const errors = {
    blockWithoutTxs: () => new Error("Can't create a block with zero transactions"),
};
/**
 * The BlockProducerModule has the resposiblity to oversee the block production
 * and combine all necessary parts for that to happen. The flow roughly follows
 * the following steps:
 *
 * 1. BlockTrigger triggers and executes the startup function
 * 2.
 */
export let BlockProducerModule = class BlockProducerModule extends SequencerModule {
    constructor(asyncStateService, merkleStore, blockStorage, blockTreeStore, traceService, blockFlowService, blockProofSerializer) {
        super();
        this.asyncStateService = asyncStateService;
        this.merkleStore = merkleStore;
        this.blockStorage = blockStorage;
        this.blockTreeStore = blockTreeStore;
        this.traceService = traceService;
        this.blockFlowService = blockFlowService;
        this.blockProofSerializer = blockProofSerializer;
        this.productionInProgress = false;
    }
    async applyStateChanges(unprovenBlocks, block) {
        await block.stateService.mergeIntoParent();
        await block.merkleStore.mergeIntoParent();
    }
    /**
     * Main function to call when wanting to create a new block based on the
     * transactions that are present in the mempool. This function should also
     * be the one called by BlockTriggers
     */
    async createBlock(unprovenBlocks) {
        log.info("Producing batch...");
        const height = await this.blockStorage.getCurrentBlockHeight();
        const blockWithStateDiff = await this.tryProduceBlock(unprovenBlocks, height);
        if (blockWithStateDiff !== undefined) {
            log.info(`Batch produced (${blockWithStateDiff.block.bundles.length} bundles, ${blockWithStateDiff.block.bundles.flat(1).length} txs)`);
            // Apply state changes to current StateService
            await this.applyStateChanges(unprovenBlocks.map((data) => data.block.block), blockWithStateDiff);
        }
        return blockWithStateDiff?.block;
    }
    async start() {
        noop();
    }
    async tryProduceBlock(unprovenBlocks, height) {
        if (!this.productionInProgress) {
            try {
                this.productionInProgress = true;
                const block = await this.produceBlock(unprovenBlocks, height);
                this.productionInProgress = false;
                return block;
            }
            catch (error) {
                this.productionInProgress = false;
                if (error instanceof Error) {
                    if (!error.message.includes("Can't create a block with zero transactions")) {
                        log.error(error);
                    }
                    throw error;
                }
                else {
                    log.error(error);
                }
            }
        }
        else {
            log.debug("Skipping new block production because production is still in progress");
        }
        return undefined;
    }
    async produceBlock(unprovenBlocks, height) {
        const block = await this.computeBlock(unprovenBlocks, height);
        const computedBundles = unprovenBlocks.map((bundle) => bundle.block.block.hash.toString());
        const jsonProof = this.blockProofSerializer
            .getBlockProofSerializer()
            .toJSONProof(block.proof);
        return {
            block: {
                proof: jsonProof,
                bundles: computedBundles,
                height,
                fromNetworkState: block.fromNetworkState,
                toNetworkState: block.toNetworkState,
            },
            stateService: block.stateService,
            merkleStore: block.merkleStore,
        };
    }
    /**
     * Very naive impl for now
     *
     * How we produce Blocks (batches):
     *
     * 1. We get all pending txs from the mempool and define an order
     * 2. We execute them to get results / intermediate state-roots.
     * We define a tuple of (tx data (methodId, args), state-input, state-output)
     * as a "tx trace"
     * 3. We create tasks based on those traces
     *
     */
    async computeBlock(bundles, blockId) {
        if (bundles.length === 0 || bundles.flat(1).length === 0) {
            throw errors.blockWithoutTxs();
        }
        const stateServices = {
            stateService: new CachedStateService(this.asyncStateService),
            merkleStore: new CachedMerkleTreeStore(this.merkleStore),
        };
        const blockTraces = [];
        const eternalBundleTracker = new DefaultProvableHashList(Field, bundles[0].block.block.fromEternalTransactionsHash);
        const messageTracker = new MinaPrefixedProvableHashList(Field, MINA_EVENT_PREFIXES.sequenceEvents, bundles[0].block.block.fromMessagesHash);
        for (const bundleWithMetadata of bundles) {
            const { block } = bundleWithMetadata.block;
            const txs = block.transactions;
            const bundleTracker = new DefaultProvableHashList(Field);
            const transactionTraces = [];
            for (const [, tx] of txs.entries()) {
                // eslint-disable-next-line no-await-in-loop
                const result = await this.traceService.createTransactionTrace(tx, stateServices, block.networkState.during, bundleTracker, eternalBundleTracker, messageTracker);
                transactionTraces.push(result);
            }
            // eslint-disable-next-line no-await-in-loop
            const blockTrace = await this.traceService.createBlockTrace(transactionTraces, stateServices, this.blockTreeStore, Field(bundleWithMetadata.lastBlockMetadata?.stateRoot ??
                RollupMerkleTree.EMPTY_ROOT), bundleWithMetadata.block);
            blockTraces.push(blockTrace);
        }
        const proof = await this.blockFlowService.executeFlow(blockTraces, blockId);
        const fromNetworkState = bundles[0].block.block.networkState.before;
        const toNetworkState = bundles.at(-1).block.metadata.afterNetworkState;
        return {
            proof,
            stateService: stateServices.stateService,
            merkleStore: stateServices.merkleStore,
            fromNetworkState,
            toNetworkState,
        };
    }
};
BlockProducerModule = __decorate([
    sequencerModule(),
    __param(0, inject("AsyncStateService")),
    __param(1, inject("AsyncMerkleStore")),
    __param(2, inject("BlockStorage")),
    __param(3, inject("BlockTreeStore")),
    __metadata("design:paramtypes", [Object, Object, Object, Object, TransactionTraceService,
        BlockTaskFlowService,
        BlockProofSerializer])
], BlockProducerModule);
