import { RuntimeMethodExecutionContext, RuntimeMethodExecutionData, StateTransition, ProtocolEnvironment } from "@proto-kit/protocol";
import { RuntimeEnvironment } from "@proto-kit/module";
import { AsyncStateService } from "../../../state/async/AsyncStateService";
export declare class RuntimeMethodExecution {
    private readonly runtime;
    private readonly protocol;
    private readonly executionContext;
    constructor(runtime: RuntimeEnvironment, protocol: ProtocolEnvironment, executionContext: RuntimeMethodExecutionContext);
    private executeMethodWithKeys;
    /**
     * Simulates a certain Context-aware method through multiple rounds.
     *
     * For a method that emits n Statetransitions, we execute it n times,
     * where for every i-th iteration, we collect the i-th ST that has
     * been emitted and preload the corresponding key.
     */
    simulateMultiRound(method: () => Promise<unknown>, contextInputs: RuntimeMethodExecutionData, parentStateService: AsyncStateService): Promise<StateTransition<unknown>[]>;
}
//# sourceMappingURL=RuntimeMethodExecution.d.ts.map