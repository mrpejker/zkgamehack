import { EventEmitter, noop, log, } from "@proto-kit/common";
import { SequencerModule } from "../../../sequencer/builder/SequencerModule";
export class BlockTriggerBase extends SequencerModule {
    constructor(blockProducerModule, batchProducerModule, settlementModule, blockQueue, batchQueue, settlementStorage) {
        super();
        this.blockProducerModule = blockProducerModule;
        this.batchProducerModule = batchProducerModule;
        this.settlementModule = settlementModule;
        this.blockQueue = blockQueue;
        this.batchQueue = batchQueue;
        this.settlementStorage = settlementStorage;
        this.events = new EventEmitter();
    }
    async produceBatch() {
        const blocks = await this.blockQueue.getNewBlocks();
        if (blocks.length > 0) {
            const batch = await this.batchProducerModule?.createBatch(blocks);
            if (batch !== undefined) {
                await this.batchQueue.pushBlock(batch);
                this.events.emit("batch-produced", batch);
            }
            return batch;
        }
        return undefined;
    }
    async produceBlock(enqueueInSettlementQueue) {
        const block = await this.blockProducerModule.tryProduceBlock();
        if (block && enqueueInSettlementQueue) {
            await this.blockQueue.pushBlock(block.block);
            this.events.emit("block-produced", block.block);
            await this.blockQueue.pushMetadata(block.result);
            this.events.emit("block-metadata-produced", block);
        }
        return block?.block;
    }
    async settle(batch) {
        if (this.settlementModule === undefined) {
            log.info("SettlementModule not configured, cannot compute settlement, skipping");
            return undefined;
        }
        if (this.settlementStorage === undefined) {
            throw new Error("SettlementStorage module not configured, check provided database moduel");
        }
        const settlement = await this.settlementModule.settleBatch(batch);
        await this.settlementStorage.pushSettlement(settlement);
        return settlement;
    }
    async start() {
        noop();
    }
}
