var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { injectOptional, log } from "@proto-kit/common";
import gcd from "compute-gcd";
import { BlockProducerModule } from "../sequencing/BlockProducerModule";
import { BlockTriggerBase } from "./BlockTrigger";
export let TimedBlockTrigger = class TimedBlockTrigger extends BlockTriggerBase {
    constructor(batchProducerModule, blockProducerModule, settlementModule, blockQueue, batchStorage, settlementStorage, mempool) {
        super(blockProducerModule, batchProducerModule, settlementModule, blockQueue, batchStorage, settlementStorage);
        this.mempool = mempool;
    }
    getTimerInterval() {
        const { settlementInterval, blockInterval, tick } = this.config;
        let timerInterval = settlementInterval !== undefined
            ? gcd(settlementInterval, blockInterval)
            : blockInterval;
        const definedTick = tick ?? 1000;
        if (definedTick <= timerInterval) {
            // Check if tick is a divisor of the calculated interval
            const div = timerInterval / definedTick;
            if (Math.floor(div) === div) {
                timerInterval = definedTick;
            }
        }
        return timerInterval;
    }
    async start() {
        log.info("Starting timed block trigger");
        const { settlementInterval, blockInterval } = this.config;
        const timerInterval = this.getTimerInterval();
        let totalTime = 0;
        this.interval = setInterval(async () => {
            totalTime += timerInterval;
            this.events.emit("tick", totalTime);
            try {
                // Trigger unproven blocks
                if (totalTime % blockInterval === 0) {
                    await this.produceUnprovenBlock();
                }
                // Trigger proven (settlement) blocks
                // Only produce settlements if a time has been set
                // otherwise treat as unproven-only
                if (settlementInterval !== undefined &&
                    totalTime % settlementInterval === 0) {
                    const batch = await this.produceBatch();
                    if (batch !== undefined) {
                        await this.settle(batch);
                    }
                }
            }
            catch (error) {
                log.error(error);
            }
        }, timerInterval);
        await super.start();
    }
    async produceUnprovenBlock() {
        const mempoolTxs = await this.mempool.getTxs();
        // Produce a block if either produceEmptyBlocks is true or we have more
        // than 1 tx in mempool
        if (mempoolTxs.length > 0 || (this.config.produceEmptyBlocks ?? true)) {
            await this.produceBlock(true);
        }
    }
    async close() {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        clearInterval(this.interval);
    }
};
TimedBlockTrigger = __decorate([
    injectable(),
    __param(0, injectOptional("BatchProducerModule")),
    __param(1, inject("BlockProducerModule")),
    __param(2, injectOptional("SettlementModule")),
    __param(3, inject("BlockQueue")),
    __param(4, inject("BatchStorage")),
    __param(5, injectOptional("SettlementStorage")),
    __param(6, inject("Mempool")),
    __metadata("design:paramtypes", [Object, BlockProducerModule, Object, Object, Object, Object, Object])
], TimedBlockTrigger);
