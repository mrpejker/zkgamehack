import { EventEmitter, EventEmittingComponent, NoConfig } from "@proto-kit/common";
import { Batch, SettleableBatch } from "../../../storage/model/Batch";
import { BatchProducerModule } from "../BatchProducerModule";
import { BlockProducerModule } from "../sequencing/BlockProducerModule";
import { BlockQueue } from "../../../storage/repositories/BlockStorage";
import { SequencerModule } from "../../../sequencer/builder/SequencerModule";
import { SettlementModule } from "../../../settlement/SettlementModule";
import { Block, BlockWithResult } from "../../../storage/model/Block";
import { BatchStorage } from "../../../storage/repositories/BatchStorage";
import { SettlementStorage } from "../../../storage/repositories/SettlementStorage";
/**
 * A BlockTrigger is the primary method to start the production of a block and
 * all associated processes.
 */
export interface BlockTrigger {
}
export type BlockEvents = {
    "block-produced": [Block];
    "block-metadata-produced": [BlockWithResult];
    "batch-produced": [Batch];
};
export declare class BlockTriggerBase<Config = NoConfig, Events extends BlockEvents = BlockEvents> extends SequencerModule<Config> implements BlockTrigger, EventEmittingComponent<Events> {
    protected readonly blockProducerModule: BlockProducerModule;
    protected readonly batchProducerModule: BatchProducerModule | undefined;
    protected readonly settlementModule: SettlementModule | undefined;
    protected readonly blockQueue: BlockQueue;
    protected readonly batchQueue: BatchStorage;
    protected readonly settlementStorage: SettlementStorage | undefined;
    readonly events: EventEmitter<Events>;
    constructor(blockProducerModule: BlockProducerModule, batchProducerModule: BatchProducerModule | undefined, settlementModule: SettlementModule | undefined, blockQueue: BlockQueue, batchQueue: BatchStorage, settlementStorage: SettlementStorage | undefined);
    protected produceBatch(): Promise<SettleableBatch | undefined>;
    protected produceBlock(enqueueInSettlementQueue: boolean): Promise<Block | undefined>;
    protected settle(batch: SettleableBatch): Promise<import("../../..").Settlement | undefined>;
    start(): Promise<void>;
}
//# sourceMappingURL=BlockTrigger.d.ts.map