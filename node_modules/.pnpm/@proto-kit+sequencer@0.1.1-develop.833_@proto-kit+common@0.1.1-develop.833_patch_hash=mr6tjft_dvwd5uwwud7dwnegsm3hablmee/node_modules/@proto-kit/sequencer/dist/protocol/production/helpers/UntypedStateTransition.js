import { Field } from "o1js";
import { ProvableStateTransition } from "@proto-kit/protocol";
import { UntypedOption } from "./UntypedOption";
/**
 * Generic state transition that constraints the current method circuit
 * to external state, by providing a state anchor.
 */
export class UntypedStateTransition {
    static fromStateTransition(st) {
        return new UntypedStateTransition(st.path, UntypedOption.fromOption(st.fromValue), UntypedOption.fromOption(st.toValue));
    }
    static fromJSON({ path, from, to, }) {
        return new UntypedStateTransition(Field(path), UntypedOption.fromJSON(from), UntypedOption.fromJSON(to));
    }
    constructor(path, fromValue, toValue) {
        this.path = path;
        this.fromValue = fromValue;
        this.toValue = toValue;
    }
    get from() {
        const from = this.fromValue.clone();
        from.forceSome();
        return from;
    }
    get to() {
        return this.toValue.clone();
    }
    /**
     * Converts a StateTransition to a ProvableStateTransition,
     * while enforcing the 'from' property to be 'Some' in all cases.
     */
    toProvable() {
        return new ProvableStateTransition({
            path: this.path,
            from: this.from.toProvable(),
            to: this.to.toProvable(),
        });
    }
    toJSON() {
        return {
            path: this.path.toString(),
            from: this.fromValue.toJSON(),
            to: this.toValue.toJSON(),
        };
    }
}
