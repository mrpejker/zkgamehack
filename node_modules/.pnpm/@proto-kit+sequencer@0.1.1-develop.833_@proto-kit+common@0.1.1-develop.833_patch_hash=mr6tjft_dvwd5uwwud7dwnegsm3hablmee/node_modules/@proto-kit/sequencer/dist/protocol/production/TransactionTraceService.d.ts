import { NetworkState, ProvableHashList } from "@proto-kit/protocol";
import { Field } from "o1js";
import { CachedMerkleTreeStore } from "../../state/merkle/CachedMerkleTreeStore";
import { CachedStateService } from "../../state/state/CachedStateService";
import type { TransactionExecutionResult, BlockWithResult } from "../../storage/model/Block";
import { AsyncMerkleTreeStore } from "../../state/async/AsyncMerkleTreeStore";
import type { TransactionTrace, BlockTrace } from "./BatchProducerModule";
export type TaskStateRecord = Record<string, Field[]>;
export declare class TransactionTraceService {
    private allKeys;
    private collectStartingState;
    private applyTransitions;
    createBlockTrace(traces: TransactionTrace[], stateServices: {
        stateService: CachedStateService;
        merkleStore: CachedMerkleTreeStore;
    }, blockHashTreeStore: AsyncMerkleTreeStore, beforeBlockStateRoot: Field, block: BlockWithResult): Promise<BlockTrace>;
    /**
     * What is in a trace?
     * A trace has two parts:
     * 1. start values of storage keys accessed by all state transitions
     * 2. Merkle Witnesses of the keys accessed by the state transitions
     *
     * How do we create a trace?
     *
     * 1. We execute the transaction and create the stateTransitions
     * The first execution is done with a DummyStateService to find out the
     * accessed keys that can then be cached for the actual run, which generates
     * the correct state transitions and  has to be done for the next
     * transactions to be based on the correct state.
     *
     * 2. We extract the accessed keys, download the state and put it into
     * AppChainProveParams
     *
     * 3. We retrieve merkle witnesses for each step and put them into
     * StateTransitionProveParams
     */
    createTransactionTrace(executionResult: TransactionExecutionResult, stateServices: {
        stateService: CachedStateService;
        merkleStore: CachedMerkleTreeStore;
    }, networkState: NetworkState, bundleTracker: ProvableHashList<Field>, eternalBundleTracker: ProvableHashList<Field>, messageTracker: ProvableHashList<Field>): Promise<TransactionTrace>;
    private createMerkleTrace;
}
//# sourceMappingURL=TransactionTraceService.d.ts.map