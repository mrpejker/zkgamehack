var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var LocalTaskWorkerModule_1;
import { log, ModuleContainer, noop, } from "@proto-kit/common";
import { NewBlockTask } from "../../protocol/production/tasks/NewBlockTask";
import { RuntimeProvingTask } from "../../protocol/production/tasks/RuntimeProvingTask";
import { sequencerModule, } from "../../sequencer/builder/SequencerModule";
import { SettlementProvingTask } from "../../settlement/tasks/SettlementProvingTask";
import { BlockProvingTask, BlockReductionTask, } from "../../protocol/production/tasks/BlockProvingTask";
import { StateTransitionReductionTask, StateTransitionTask, } from "../../protocol/production/tasks/StateTransitionTask";
import { FlowTaskWorker } from "./FlowTaskWorker";
/**
 * This module spins up a worker in the current local node instance.
 * This should only be used for local testing/development and not in a
 * production setup. Use the proper worker execution method for spinning up
 * cloud workers.
 */
export let LocalTaskWorkerModule = LocalTaskWorkerModule_1 = class LocalTaskWorkerModule extends ModuleContainer {
    static from(modules) {
        return class ScopedTaskWorkerModule extends LocalTaskWorkerModule_1 {
            constructor() {
                super(modules);
            }
        };
    }
    constructor(modules) {
        super({ modules });
        // Since we disabled configs for tasks, we initialize the config as empty here
        const config = Object.keys(modules).reduce((acc, moduleName) => {
            this.assertIsValidModuleName(moduleName);
            acc[moduleName] = {};
            return acc;
        }, {});
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        this.currentConfig = config;
    }
    taskQueue() {
        return this.container.resolve("TaskQueue");
    }
    async start() {
        const tasks = this.moduleNames.map((moduleName) => {
            this.assertIsValidModuleName(moduleName);
            const task = this.resolve(moduleName);
            log.info(`Setting up task ${task.name}`);
            return task;
        });
        const worker = new FlowTaskWorker(this.taskQueue(), tasks);
        worker
            .start()
            .then(() => {
            noop();
        })
            .catch((error) => {
            log.error(error);
        });
    }
};
LocalTaskWorkerModule.presets = {};
LocalTaskWorkerModule = LocalTaskWorkerModule_1 = __decorate([
    sequencerModule(),
    __metadata("design:paramtypes", [Object])
], LocalTaskWorkerModule);
export class VanillaTaskWorkerModules {
    static withoutSettlement() {
        return {
            StateTransitionTask,
            StateTransitionReductionTask,
            RuntimeProvingTask,
            BlockProvingTask,
            BlockReductionTask,
            BlockBuildingTask: NewBlockTask,
        };
    }
    static allTasks() {
        return {
            ...VanillaTaskWorkerModules.withoutSettlement(),
            SettlementProvingTask,
        };
    }
    static defaultConfig() {
        return {
            StateTransitionTask: {},
            RuntimeProvingTask: {},
            BlockProvingTask: {},
            BlockReductionTask: {},
            BlockBuildingTask: {},
            StateTransitionReductionTask: {},
            SettlementProvingTask: {},
        };
    }
}
