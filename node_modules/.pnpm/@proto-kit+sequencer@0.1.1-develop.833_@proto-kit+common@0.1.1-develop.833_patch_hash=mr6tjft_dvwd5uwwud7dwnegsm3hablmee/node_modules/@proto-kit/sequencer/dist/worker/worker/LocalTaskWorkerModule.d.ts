import { ModuleContainer, ModulesRecord, Presets, TypedClass } from "@proto-kit/common";
import { ReturnType } from "@proto-kit/protocol";
import { NewBlockTask } from "../../protocol/production/tasks/NewBlockTask";
import { RuntimeProvingTask } from "../../protocol/production/tasks/RuntimeProvingTask";
import { SequencerModule } from "../../sequencer/builder/SequencerModule";
import { SettlementProvingTask } from "../../settlement/tasks/SettlementProvingTask";
import { Task } from "../flow/Task";
import { BlockProvingTask, BlockReductionTask } from "../../protocol/production/tasks/BlockProvingTask";
import { StateTransitionReductionTask, StateTransitionTask } from "../../protocol/production/tasks/StateTransitionTask";
import { TaskWorkerModule } from "./TaskWorkerModule";
export { TypedClass };
export type TaskWorkerModulesRecord = ModulesRecord<TypedClass<TaskWorkerModule & Task<any, any>>>;
/**
 * This module spins up a worker in the current local node instance.
 * This should only be used for local testing/development and not in a
 * production setup. Use the proper worker execution method for spinning up
 * cloud workers.
 */
export declare class LocalTaskWorkerModule<Tasks extends TaskWorkerModulesRecord> extends ModuleContainer<Tasks> implements SequencerModule {
    static presets: Presets<unknown>;
    static from<Tasks extends TaskWorkerModulesRecord>(modules: Tasks): TypedClass<LocalTaskWorkerModule<Tasks>>;
    constructor(modules: Tasks);
    private taskQueue;
    start(): Promise<void>;
}
export declare class VanillaTaskWorkerModules {
    static withoutSettlement(): {
        StateTransitionTask: typeof StateTransitionTask;
        StateTransitionReductionTask: typeof StateTransitionReductionTask;
        RuntimeProvingTask: typeof RuntimeProvingTask;
        BlockProvingTask: typeof BlockProvingTask;
        BlockReductionTask: typeof BlockReductionTask;
        BlockBuildingTask: typeof NewBlockTask;
    };
    static allTasks(): {
        SettlementProvingTask: typeof SettlementProvingTask;
        StateTransitionTask: typeof StateTransitionTask;
        StateTransitionReductionTask: typeof StateTransitionReductionTask;
        RuntimeProvingTask: typeof RuntimeProvingTask;
        BlockProvingTask: typeof BlockProvingTask;
        BlockReductionTask: typeof BlockReductionTask;
        BlockBuildingTask: typeof NewBlockTask;
    };
    static defaultConfig(): {
        StateTransitionTask: {};
        RuntimeProvingTask: {};
        BlockProvingTask: {};
        BlockReductionTask: {};
        BlockBuildingTask: {};
        StateTransitionReductionTask: {};
        SettlementProvingTask: {};
    };
}
export type TaskWorkerModulesWithoutSettlement = ReturnType<typeof VanillaTaskWorkerModules.withoutSettlement>;
export type AllTaskWorkerModules = ReturnType<typeof VanillaTaskWorkerModules.withoutSettlement>;
//# sourceMappingURL=LocalTaskWorkerModule.d.ts.map