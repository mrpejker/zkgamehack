import { Closeable, InstantiatedQueue, TaskQueue } from "../queue/TaskQueue";
import { MapReduceTask, TaskPayload, TaskSerializer } from "./ReducableTask";
export declare const TASKS_REDUCE_SUFFIX = "_reduce";
/**
 * Task-runner that has the responsibility of pushing and coordinating
 * the computing of a task with the corresponding inputs.
 *
 * This instance takes a ReduceableTask and runs it on a given TaskQueue
 */
export declare class MapReduceFlow<Input, Result> implements Closeable {
    protected readonly messageQueue: TaskQueue;
    protected readonly mapReduceTask: MapReduceTask<Input, Result>;
    protected readonly queueName: string;
    protected serializer: TaskSerializer<Result>;
    protected queue?: InstantiatedQueue;
    private executionState;
    protected openCloseables: Closeable[];
    protected onCompletedListeners: {
        [key: string]: (payload: TaskPayload) => Promise<void>;
    };
    /**
     * @param messageQueue The connection object to the messageQueue
     * @param mapReduceTask The task definition to be executed
     * @param queueName The name of the queue on which the task should be
     * executed (workers have to listen on that queue)
     */
    constructor(messageQueue: TaskQueue, mapReduceTask: MapReduceTask<Input, Result>, queueName: string);
    protected assertQueueNotNull(queue: InstantiatedQueue | undefined): asserts queue is InstantiatedQueue;
    private resolveReducibleTasks;
    private pushReduction;
    protected pushAvailableReductions(flowId: string): Promise<void>;
    protected handleCompletedReducingStep(flowId: string, payload: TaskPayload, resolve: (result: Result) => void): Promise<void>;
    protected addInput(flowId: string, ...inputs: Result[]): Promise<void>;
    executeMapReduce(flowId: string, inputs: Input[]): Promise<Result>;
    /**
     * Executes a function that handles the processing of the flow while
     * opening a queue instance and handling errors
     */
    protected executeFlowWithQueue(flowId: string, executor: (resolve: (type: Result) => void) => Promise<void>): Promise<Result>;
    close(): Promise<void>;
}
//# sourceMappingURL=MapReduceFlow.d.ts.map