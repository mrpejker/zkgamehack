import { TaskQueue } from "../queue/TaskQueue";
import { MapReduceFlow } from "./MapReduceFlow";
import { MappingTask, MapReduceTask } from "./ReducableTask";
/**
 *  This type is used to consistently define the input type of a MapReduce flow
 *  that is depenend on the result a pairing.
 */
export interface PairingDerivedInput<Input1, Input2, AdditionalParameters> {
    input1: Input1;
    input2: Input2;
    params: AdditionalParameters;
}
/**
 * This is a task runner that extends the functionality of the
 * MapReduceTaskRunner with the ability to perform an extra step
 * called "pairing" before starting the map-reduce.
 *
 * The pairing is an extra step with 2 distinct and seperated tasks
 * that get executed independently, but then the two results together
 * are in turn used as an input for Map-Reduce flow that then gets
 * processed normally.
 *
 * What is a "pairing"?
 * A pairing is defined as a set of two tasks that have to be matched 1:1 and
 * need to be both completed before a result will be returned and followup
 * actions are triggered
 */
export declare class PairingMapReduceFlow<Input1, Output1, Input2, Output2, AdditionalParameters, Result> extends MapReduceFlow<PairingDerivedInput<Output1, Output2, AdditionalParameters>, Result> {
    protected readonly task: {
        reducingTask: MapReduceTask<PairingDerivedInput<Output1, Output2, AdditionalParameters>, Result>;
        firstPairing: MappingTask<Input1, Output1>;
        secondPairing: MappingTask<Input2, Output2>;
    };
    constructor(messageQueue: TaskQueue, queueName: string, task: {
        reducingTask: MapReduceTask<PairingDerivedInput<Output1, Output2, AdditionalParameters>, Result>;
        firstPairing: MappingTask<Input1, Output1>;
        secondPairing: MappingTask<Input2, Output2>;
    });
    private assertTaskIdSet;
    /**
     * Create a new empty collection object for collecting the pairing results
     * and determining if both sides have results
     */
    private createNewPairingCollector;
    /**
     * Checks if the given pairing has both outputs computed
     * (i.e. results have been received).
     * If so, return a new task that is in turn an input for the map-reduce flow.
     */
    private checkPaired;
    /**
     *
     * @param inputs Set of inputs
     * @param taskIds A array that containes unique IDs for each input
     * to identify submitted tasks.
     */
    executePairingMapReduce(flowId: string, inputs: [Input1, Input2, AdditionalParameters][], taskIds: string[]): Promise<Result>;
}
//# sourceMappingURL=PairingMapReduceFlow.d.ts.map