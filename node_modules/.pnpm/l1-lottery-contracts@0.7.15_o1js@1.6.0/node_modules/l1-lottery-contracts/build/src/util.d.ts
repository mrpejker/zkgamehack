import { Field, MerkleMap, UInt32, UInt64 } from 'o1js';
import { Ticket } from './Ticket.js';
export declare const getEmpty2dMerkleMap: (height?: number) => MerkleMap;
declare const NumberPacked_base: {
    new (packed: import("o1js/dist/node/lib/provable/field.js").Field): {
        toBigInts(): bigint[];
        toFields(): import("o1js/dist/node/lib/provable/field.js").Field[];
        assertEquals(other: {
            toFields(): import("o1js/dist/node/lib/provable/field.js").Field[];
            assertEquals(other: any): void;
            packed: import("o1js/dist/node/lib/provable/field.js").Field;
        }): void;
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    };
    extractField(input: UInt32): import("o1js/dist/node/lib/provable/field.js").Field;
    sizeInBits(): bigint;
    unpack(f: import("o1js/dist/node/lib/provable/field.js").Field): UInt32[];
    fromUInt32s(uint32s: UInt32[]): {
        toBigInts(): bigint[];
        toFields(): import("o1js/dist/node/lib/provable/field.js").Field[];
        assertEquals(other: {
            toFields(): import("o1js/dist/node/lib/provable/field.js").Field[];
            assertEquals(other: any): void;
            packed: import("o1js/dist/node/lib/provable/field.js").Field;
        }): void;
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    };
    fromBigInts(bigints: bigint[]): {
        toBigInts(): bigint[];
        toFields(): import("o1js/dist/node/lib/provable/field.js").Field[];
        assertEquals(other: {
            toFields(): import("o1js/dist/node/lib/provable/field.js").Field[];
            assertEquals(other: any): void;
            packed: import("o1js/dist/node/lib/provable/field.js").Field;
        }): void;
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    };
    type: import("o1js/dist/node/bindings/lib/generic.js").GenericProvableExtendedPure<{
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    }, {
        packed: bigint;
    }, {
        packed: string;
    }, import("o1js/dist/node/lib/provable/field.js").Field>;
    l: number;
    bitSize: bigint;
    checkPack(unpacked: UInt32[]): void;
    pack(unpacked: UInt32[]): import("o1js/dist/node/lib/provable/field.js").Field;
    unpackToBigints(f: import("o1js/dist/node/lib/provable/field.js").Field): bigint[];
    _isStruct: true;
    toFields: (value: {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    }) => import("o1js/dist/node/lib/provable/field.js").Field[];
    toAuxiliary: (value?: {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    } | undefined) => any[];
    sizeInFields: () => number;
    check: (value: {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    }) => void;
    toValue: (x: {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    }) => {
        packed: bigint;
    };
    fromValue: ((x: {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    } | {
        packed: bigint;
    }) => {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    }) & ((value: {
        packed: string | number | bigint | import("o1js/dist/node/lib/provable/field.js").Field;
    }) => {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    });
    fromFields: (fields: import("o1js/dist/node/lib/provable/field.js").Field[]) => {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    };
    toInput: (x: {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field.js").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field.js").Field, number][] | undefined;
    };
    toJSON: (x: {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    }) => {
        packed: string;
    };
    fromJSON: (x: {
        packed: string;
    }) => {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    };
    empty: () => {
        packed: import("o1js/dist/node/lib/provable/field.js").Field;
    };
};
export declare class NumberPacked extends NumberPacked_base {
}
export declare const comisionTicket: Ticket;
export declare function getTotalScoreAndCommision(value: UInt64): UInt64;
export declare function getNullifierId(round: Field, ticketId: Field): Field;
export declare function convertToUInt64(value: Field): UInt64;
export declare function convertToUInt32(value: Field): UInt32;
export {};
