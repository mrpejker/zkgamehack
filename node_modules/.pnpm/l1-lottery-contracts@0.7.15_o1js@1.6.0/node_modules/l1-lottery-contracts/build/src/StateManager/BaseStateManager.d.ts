import { Field, JsonProof, MerkleMap, MerkleMapWitness } from 'o1js';
import { Ticket } from '../Ticket.js';
import { DistributionProof } from '../DistributionProof.js';
import { MerkleMap20, MerkleMap20Witness } from '../CustomMerkleMap.js';
export declare function mockProof<I, O, P>(publicOutput: O, ProofType: new ({ proof, publicInput, publicOutput, maxProofsVerified, }: {
    proof: unknown;
    publicInput: I;
    publicOutput: any;
    maxProofsVerified: 0 | 2 | 1;
}) => P, publicInput: I): Promise<P>;
export declare class BaseStateManager {
    ticketMap: MerkleMap20;
    roundTicketMap: MerkleMap20[];
    roundTickets: Ticket[][];
    lastTicketInRound: number[];
    ticketNullifierMap: MerkleMap;
    bankMap: MerkleMap20;
    roundResultMap: MerkleMap20;
    startBlock: Field;
    isMock: boolean;
    shouldUpdateState: boolean;
    dpProofs: {
        [key: number]: DistributionProof;
    };
    constructor(startBlock: Field, isMock?: boolean, shouldUpdateState?: boolean);
    syncWithCurBlock(curBlock: number): void;
    startNextRound(amount?: number): void;
    getNextTicketWitenss(round: number): [MerkleMap20Witness, MerkleMap20Witness];
    addTicket(ticket: Ticket, round: number): [MerkleMap20Witness, MerkleMap20Witness, MerkleMap20Witness, Field];
    getBankWitness(round: number): [MerkleMap20Witness, Field];
    updateResult(round: number | Field): {
        resultWitness: MerkleMap20Witness;
        bankValue: Field;
        bankWitness: MerkleMap20Witness;
    };
    getDP(round: number): Promise<DistributionProof>;
    getReward(round: number, ticket: Ticket, roundDP?: JsonProof | undefined, ticketIndex?: number): Promise<{
        roundWitness: MerkleMap20Witness;
        roundTicketWitness: MerkleMap20Witness;
        dp: DistributionProof;
        winningNumbers: Field;
        resultWitness: MerkleMap20Witness;
        bankValue: Field;
        bankWitness: MerkleMap20Witness;
        nullifierWitness: MerkleMapWitness;
    }>;
    getRefund(round: number, ticket: Ticket): Promise<{
        roundWitness: MerkleMap20Witness;
        roundTicketWitness: MerkleMap20Witness;
        resultWitness: MerkleMap20Witness;
        nullifierWitness: MerkleMapWitness;
    }>;
}
