import { Field } from 'o1js';
import { Ticket } from '../Ticket.js';
import { MerkleMap20Witness } from '../CustomMerkleMap.js';
import { PLottery } from '../PLottery.js';
import { TicketReduceProof } from '../TicketReduceProof.js';
import { BaseStateManager } from './BaseStateManager.js';
export declare function mockProof<I, O, P>(publicOutput: O, ProofType: new ({ proof, publicInput, publicOutput, maxProofsVerified, }: {
    proof: unknown;
    publicInput: I;
    publicOutput: any;
    maxProofsVerified: 0 | 2 | 1;
}) => P, publicInput: I): Promise<P>;
export declare class PStateManager extends BaseStateManager {
    contract: PLottery;
    processedTicketData: {
        ticketId: number;
        round: number;
    };
    constructor(plottery: PLottery, startBlock: Field, isMock?: boolean, shouldUpadteState?: boolean);
    addTicket(ticket: Ticket, round: number, forceUpdate?: boolean): [MerkleMap20Witness, MerkleMap20Witness, MerkleMap20Witness, Field];
    removeLastTicket(round: number): Promise<void>;
    reduceTickets(): Promise<TicketReduceProof>;
}
