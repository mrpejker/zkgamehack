var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { filterNonUndefined } from "@proto-kit/common";
import { stringToField } from "@proto-kit/protocol";
import { Poseidon } from "o1js";
import { inject, injectable } from "tsyringe";
import { runtimeMethodTypeMetadataKey, } from "../method/runtimeMethod";
/**
 * Please see `getMethodId` to learn more about
 * methodId encoding
 */
export let MethodIdResolver = class MethodIdResolver {
    constructor(runtime) {
        Object.defineProperty(this, "runtime", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: runtime
        });
        Object.defineProperty(this, "dictionary", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        this.dictionary = runtime.runtimeModuleNames.reduce((dict, moduleName) => {
            this.runtime.assertIsValidModuleName(moduleName);
            runtime.resolve(moduleName).runtimeMethodNames.forEach((methodName) => {
                dict[this.getMethodId(moduleName, methodName).toString()] = {
                    moduleName,
                    methodName,
                };
            });
            return dict;
        }, {});
    }
    /**
     * The purpose of this method is to provide a dictionary where
     * we can look up properties like methodId and invocationType
     * for each runtimeMethod using their module name and method name
     */
    methodIdMap() {
        const methodIdResolver = this.runtime.dependencyContainer.resolve("MethodIdResolver");
        const rawMappings = this.runtime.moduleNames.flatMap((moduleName) => {
            const module = this.runtime.resolve(moduleName);
            return module.runtimeMethodNames.map((method) => {
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                const type = Reflect.getMetadata(runtimeMethodTypeMetadataKey, module, method);
                if (type !== undefined) {
                    return {
                        name: `${moduleName}.${method}`,
                        methodId: methodIdResolver.getMethodId(moduleName, method),
                        type,
                    };
                }
                return undefined;
            });
        });
        return rawMappings
            .filter(filterNonUndefined)
            .reduce((acc, entry) => {
            acc[entry.name] = {
                methodId: entry.methodId,
                type: entry.type,
            };
            return acc;
        }, {});
    }
    getMethodNameFromId(methodId) {
        const methodPath = this.dictionary[methodId.toString()];
        if (methodPath === undefined) {
            return undefined;
        }
        const { moduleName, methodName } = methodPath;
        this.runtime.assertIsValidModuleName(moduleName);
        return [moduleName, methodName];
    }
    getMethodId(moduleName, methodName) {
        this.runtime.assertIsValidModuleName(moduleName);
        return Poseidon.hash([
            stringToField(moduleName),
            stringToField(methodName),
        ]).toBigInt();
    }
};
MethodIdResolver = __decorate([
    injectable(),
    __param(0, inject("Runtime")),
    __metadata("design:paramtypes", [Function])
], MethodIdResolver);
