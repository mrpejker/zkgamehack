var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { PublicKey, UInt64 } from "o1js";
import { State, StateMap } from "@proto-kit/protocol";
import { RuntimeModule, runtimeMethod, runtimeModule, state } from "../../src";
import { Admin } from "./Admin.js";
export let Balances = class Balances extends RuntimeModule {
    constructor(admin) {
        super();
        Object.defineProperty(this, "admin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: admin
        });
        Object.defineProperty(this, "totalSupply", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: State.from(UInt64)
        });
        Object.defineProperty(this, "balances", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: StateMap.from(PublicKey, UInt64)
        });
    }
    getTotalSupply() {
        this.totalSupply.get();
    }
    setTotalSupply() {
        this.totalSupply.set(UInt64.from(20));
        this.admin.isAdmin(this.transaction.sender.value);
    }
    getBalance(address) {
        this.balances.get(address).orElse(UInt64.zero);
    }
    transientState() {
        const totalSupply = this.totalSupply.get();
        this.totalSupply.set(totalSupply.orElse(UInt64.zero).add(100));
        const totalSupply2 = this.totalSupply.get();
        this.totalSupply.set(totalSupply2.orElse(UInt64.zero).add(100));
    }
};
/**
 * We use `satisfies` here in order to be able to access
 * presets by key in a type safe way.
 */
Object.defineProperty(Balances, "presets", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {}
});
__decorate([
    state(),
    __metadata("design:type", Object)
], Balances.prototype, "totalSupply", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], Balances.prototype, "balances", void 0);
__decorate([
    runtimeMethod(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Balances.prototype, "getTotalSupply", null);
__decorate([
    runtimeMethod(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Balances.prototype, "setTotalSupply", null);
__decorate([
    runtimeMethod(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [PublicKey]),
    __metadata("design:returntype", void 0)
], Balances.prototype, "getBalance", null);
__decorate([
    runtimeMethod(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], Balances.prototype, "transientState", null);
Balances = __decorate([
    runtimeModule(),
    __metadata("design:paramtypes", [Admin])
], Balances);
