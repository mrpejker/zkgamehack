var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { CachedMerkleTreeStore, Sequencer, } from "@proto-kit/sequencer";
import { inject, injectable } from "tsyringe";
import { RollupMerkleTree } from "@proto-kit/common";
import { AppChainModule } from "../appChain/AppChainModule";
export let StateServiceQueryModule = class StateServiceQueryModule extends AppChainModule {
    constructor(sequencer) {
        super();
        this.sequencer = sequencer;
    }
    get asyncStateService() {
        return this.sequencer.dependencyContainer.resolve("UnprovenStateService");
    }
    get treeStore() {
        return this.sequencer.dependencyContainer.resolve("AsyncMerkleStore");
    }
    get(key) {
        return this.asyncStateService.get(key);
    }
    async merkleWitness(path) {
        const syncStore = new CachedMerkleTreeStore(this.treeStore);
        await syncStore.preloadKey(path.toBigInt());
        const tree = new RollupMerkleTree(syncStore);
        return tree.getWitness(path.toBigInt());
    }
};
StateServiceQueryModule = __decorate([
    injectable(),
    __param(0, inject("Sequencer")),
    __metadata("design:paramtypes", [Sequencer])
], StateServiceQueryModule);
