import { State, StateMap, } from "@proto-kit/protocol";
export const QueryBuilderFactory = {
    // eslint-disable-next-line sonarjs/cognitive-complexity
    fillQuery(runtimeModule, queryTransportModule) {
        let query = {};
        for (const propertyName in runtimeModule) {
            const property = runtimeModule[propertyName];
            if (property instanceof StateMap) {
                query = {
                    ...query,
                    [propertyName]: {
                        get: async (key) => {
                            const path = property.getPath(key);
                            const fields = await queryTransportModule.get(path);
                            return fields ? property.valueType.fromFields(fields) : undefined;
                        },
                    },
                };
            }
            if (property instanceof State) {
                query = {
                    ...query,
                    [propertyName]: {
                        get: async () => {
                            // eslint-disable-next-line max-len
                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                            const path = property.path;
                            const fields = await queryTransportModule.get(path);
                            return fields ? property.valueType.fromFields(fields) : undefined;
                        },
                    },
                };
            }
        }
        return query;
    },
    fromRuntime(runtime, queryTransportModule) {
        const { modules } = runtime.definition;
        return Object.keys(modules).reduce((query, runtimeModuleName) => {
            runtime.isValidModuleName(modules, runtimeModuleName);
            const runtimeModule = runtime.resolve(runtimeModuleName);
            query[runtimeModuleName] = QueryBuilderFactory.fillQuery(runtimeModule, queryTransportModule);
            return query;
            // eslint-disable-next-line max-len
            // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter,@typescript-eslint/consistent-type-assertions
        }, {});
    },
    fromProtocol(runtime, queryTransportModule) {
        const { modules } = runtime.definition;
        return Object.keys(modules).reduce((query, protocolModuleName) => {
            runtime.isValidModuleName(modules, protocolModuleName);
            const protocolModule = runtime.resolve(protocolModuleName);
            query[protocolModuleName] = QueryBuilderFactory.fillQuery(protocolModule, queryTransportModule);
            return query;
        }, 
        // eslint-disable-next-line max-len
        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter,@typescript-eslint/consistent-type-assertions
        {});
    },
};
