var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { Sequencer, } from "@proto-kit/sequencer";
import { AppChainModule } from "../appChain/AppChainModule";
export let BlockStorageNetworkStateModule = class BlockStorageNetworkStateModule extends AppChainModule {
    constructor(sequencer) {
        super();
        this.sequencer = sequencer;
    }
    get unprovenQueue() {
        return this.sequencer.dependencyContainer.resolve("BlockQueue");
    }
    get unprovenStorage() {
        return this.sequencer.dependencyContainer.resolve("BlockStorage");
    }
    get provenStorage() {
        return this.sequencer.dependencyContainer.resolve("BatchStorage");
    }
    async getUnprovenNetworkState() {
        const latestBlock = await this.unprovenStorage.getLatestBlock();
        return latestBlock?.block.networkState.during;
    }
    /**
     * Staged network state is the networkstate after the latest unproven block
     * with afterBundle() hooks executed
     */
    async getStagedNetworkState() {
        const result = await this.unprovenQueue.getLatestBlock();
        return result?.result.afterNetworkState;
    }
    async getProvenNetworkState() {
        const batch = await this.provenStorage.getLatestBlock();
        if (batch !== undefined) {
            const lastBlock = batch.bundles.at(-1);
            if (lastBlock === undefined) {
                throw new Error("Batches shouldn't be able to generate proofs without bundles");
            }
            const block = await this.unprovenStorage.getBlock(lastBlock);
            if (block === undefined) {
                throw new Error(`Highest block of latest batch not found in blockStorage (hash ${lastBlock})`);
            }
            return block.networkState.during; // TODO Probably metadata.after?
        }
        // TODO Replace by NetworkState.empty() across the whole application
        return undefined;
    }
};
BlockStorageNetworkStateModule = __decorate([
    injectable(),
    __param(0, inject("Sequencer")),
    __metadata("design:paramtypes", [Sequencer])
], BlockStorageNetworkStateModule);
