import { NetworkStateTransportModule, Sequencer, SequencerModulesRecord } from "@proto-kit/sequencer";
import { NetworkState } from "@proto-kit/protocol";
import { AppChainModule } from "../appChain/AppChainModule";
export declare class BlockStorageNetworkStateModule extends AppChainModule<Record<string, never>> implements NetworkStateTransportModule {
    private readonly sequencer;
    constructor(sequencer: Sequencer<SequencerModulesRecord>);
    private get unprovenQueue();
    private get unprovenStorage();
    private get provenStorage();
    getUnprovenNetworkState(): Promise<NetworkState | undefined>;
    /**
     * Staged network state is the networkstate after the latest unproven block
     * with afterBundle() hooks executed
     */
    getStagedNetworkState(): Promise<NetworkState | undefined>;
    getProvenNetworkState(): Promise<NetworkState | undefined>;
}
//# sourceMappingURL=BlockStorageNetworkStateModule.d.ts.map