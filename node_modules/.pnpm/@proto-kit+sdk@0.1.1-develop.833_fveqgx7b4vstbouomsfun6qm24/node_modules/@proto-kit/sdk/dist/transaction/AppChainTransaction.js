import { PendingTransaction, UnsignedTransaction } from "@proto-kit/sequencer";
export class AppChainTransaction {
    constructor(signer, transactionSender) {
        this.signer = signer;
        this.transactionSender = transactionSender;
    }
    withUnsignedTransaction(unsignedTransaction) {
        this.transaction = unsignedTransaction;
    }
    hasUnsignedTransaction(transaction) {
        const isUnsignedTransaction = transaction instanceof UnsignedTransaction;
        if (!isUnsignedTransaction) {
            throw new Error("Not an unsigned transaction");
        }
    }
    hasPendingTransaction(transaction) {
        const isUnsignedTransaction = transaction instanceof PendingTransaction;
        if (!isUnsignedTransaction) {
            throw new Error("Not a pending transaction");
        }
    }
    async sign() {
        this.hasUnsignedTransaction(this.transaction);
        const signatureData = this.transaction.getSignatureData();
        const signature = await this.signer.sign(signatureData);
        if (!signature.verify(this.transaction.sender, signatureData).toBoolean()) {
            throw new Error("Signer didn't provide correct signature for tx");
        }
        this.transaction = this.transaction.signed(signature);
    }
    async send() {
        this.hasPendingTransaction(this.transaction);
        await this.transactionSender.send(this.transaction);
    }
}
