import { TypedClass } from "@proto-kit/common";
import { RuntimeModulesRecord } from "@proto-kit/module";
import { MandatoryProtocolModulesRecord, ProtocolModulesRecord } from "@proto-kit/protocol";
import { SequencerModulesRecord } from "@proto-kit/sequencer";
import { GraphqlClient } from "../graphql/GraphqlClient";
import { GraphqlQueryTransportModule } from "../graphql/GraphqlQueryTransportModule";
import { GraphqlNetworkStateTransportModule } from "../graphql/GraphqlNetworkStateTransportModule";
import { GraphqlTransactionSender } from "../graphql/GraphqlTransactionSender";
import { Signer } from "../transaction/InMemorySigner";
import { AppChain, AppChainModulesRecord } from "./AppChain";
import { AppChainModule } from "./AppChainModule";
export declare class ClientAppChain<RuntimeModules extends RuntimeModulesRecord, ProtocolModules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord, SequencerModules extends SequencerModulesRecord, AppChainModules extends AppChainModulesRecord> extends AppChain<RuntimeModules, ProtocolModules, SequencerModules, AppChainModules> {
    static fromRuntime<RuntimeModules extends RuntimeModulesRecord, SignerType extends Signer & AppChainModule<unknown>>(runtimeModules: RuntimeModules, signer: TypedClass<SignerType>): ClientAppChain<{
        Balances: typeof import("@proto-kit/library").Balances;
    } & RuntimeModules, MandatoryProtocolModulesRecord & {
        TransactionFee: typeof import("@proto-kit/library").TransactionFeeHook;
    }, {}, {
        GraphqlClient: typeof GraphqlClient;
        Signer: TypedClass<SignerType>;
        TransactionSender: typeof GraphqlTransactionSender;
        QueryTransportModule: typeof GraphqlQueryTransportModule;
        NetworkStateTransportModule: typeof GraphqlNetworkStateTransportModule;
    }>;
    start(): Promise<void>;
}
//# sourceMappingURL=ClientAppChain.d.ts.map