import { ModuleContainer, ModulesConfig, ModulesRecord, TypedClass } from "@proto-kit/common";
import { Runtime, RuntimeModule, RuntimeModulesRecord } from "@proto-kit/module";
import { NetworkStateQuery, Query, Sequencer, SequencerModulesRecord } from "@proto-kit/sequencer";
import { Protocol, ProtocolModulesRecord, ProtocolModule, MandatoryProtocolModulesRecord } from "@proto-kit/protocol";
import { PublicKey } from "o1js";
import { DependencyContainer } from "tsyringe";
import { AppChainTransaction } from "../transaction/AppChainTransaction";
import { AppChainModule } from "./AppChainModule";
export type AppChainModulesRecord = ModulesRecord<TypedClass<AppChainModule<unknown>>>;
export interface AppChainDefinition<RuntimeModules extends RuntimeModulesRecord, ProtocolModules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord, SequencerModules extends SequencerModulesRecord, AppChainModules extends AppChainModulesRecord> {
    Runtime: TypedClass<Runtime<RuntimeModules>>;
    Protocol: TypedClass<Protocol<ProtocolModules>>;
    Sequencer: TypedClass<Sequencer<SequencerModules>>;
    modules: AppChainModules;
}
export type ExpandAppChainModules<RuntimeModules extends RuntimeModulesRecord, ProtocolModules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord, SequencerModules extends SequencerModulesRecord, AppChainModules extends AppChainModulesRecord> = AppChainModules & {
    Runtime: TypedClass<Runtime<RuntimeModules>>;
    Protocol: TypedClass<Protocol<ProtocolModules>>;
    Sequencer: TypedClass<Sequencer<SequencerModules>>;
};
export interface ExpandAppChainDefinition<RuntimeModules extends RuntimeModulesRecord, ProtocolModules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord, SequencerModules extends SequencerModulesRecord, AppChainModules extends AppChainModulesRecord> {
    modules: ExpandAppChainModules<RuntimeModules, ProtocolModules, SequencerModules, AppChainModules>;
}
/**
 * Definition of required arguments for AppChain
 */
export interface AppChainConfig<RuntimeModules extends RuntimeModulesRecord, ProtocolModules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord, SequencerModules extends SequencerModulesRecord, AppChainModules extends AppChainModulesRecord> {
    Runtime: ModulesConfig<RuntimeModules>;
    Protocol: ModulesConfig<ProtocolModules>;
    Sequencer: ModulesConfig<SequencerModules>;
    AppChain: ModulesConfig<AppChainModules>;
}
/**
 * AppChain acts as a wrapper connecting Runtime, Protocol and Sequencer
 */
export declare class AppChain<RuntimeModules extends RuntimeModulesRecord, ProtocolModules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord, SequencerModules extends SequencerModulesRecord, AppChainModules extends AppChainModulesRecord> extends ModuleContainer<ExpandAppChainModules<RuntimeModules, ProtocolModules, SequencerModules, AppChainModules>> {
    static from<RuntimeModules extends RuntimeModulesRecord, ProtocolModules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord, SequencerModules extends SequencerModulesRecord, AppChainModules extends AppChainModulesRecord>(definition: AppChainDefinition<RuntimeModules, ProtocolModules, SequencerModules, AppChainModules>): AppChain<RuntimeModules, ProtocolModules, SequencerModules, AppChainModules>;
    definition: ExpandAppChainDefinition<RuntimeModules, ProtocolModules, SequencerModules, AppChainModules>;
    constructor(definition: AppChainDefinition<RuntimeModules, ProtocolModules, SequencerModules, AppChainModules>);
    get query(): {
        runtime: Query<RuntimeModule<unknown>, RuntimeModules>;
        protocol: Query<ProtocolModule<unknown>, ProtocolModules>;
        network: NetworkStateQuery;
    };
    get runtime(): Runtime<RuntimeModules>;
    get sequencer(): Sequencer<SequencerModules>;
    get protocol(): Protocol<ProtocolModules>;
    transaction(sender: PublicKey, callback: () => Promise<void>, options?: {
        nonce?: number;
    }): Promise<AppChainTransaction>;
    /**
     * Starts the appchain and cross-registers runtime to sequencer
     */
    start(dependencyContainer?: DependencyContainer): Promise<void>;
}
//# sourceMappingURL=AppChain.d.ts.map