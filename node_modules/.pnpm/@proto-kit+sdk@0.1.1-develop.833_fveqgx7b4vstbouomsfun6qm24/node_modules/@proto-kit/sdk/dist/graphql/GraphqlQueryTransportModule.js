var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Field } from "o1js";
import { inject, injectable } from "tsyringe";
import { gql } from "@urql/core";
import { RollupMerkleTreeWitness } from "@proto-kit/common";
import { AppChainModule } from "../appChain/AppChainModule";
import { GraphqlClient } from "./GraphqlClient";
function assertStringArray(array) {
    if (array.length === undefined ||
        (array.length > 0 && typeof array[0] !== "string")) {
        throw new Error("Array is not a string[]");
    }
}
function assertBooleanArray(array) {
    if (array.length === undefined ||
        (array.length > 0 && typeof array[0] !== "boolean")) {
        throw new Error("Array is not a boolean[]");
    }
}
export let GraphqlQueryTransportModule = class GraphqlQueryTransportModule extends AppChainModule {
    constructor(graphqlClient) {
        super();
        this.graphqlClient = graphqlClient;
    }
    async get(key) {
        const query = gql `
      query StateRaw($path: String!) {
        state(path: $path)
      }
    `;
        const queryResult = await this.graphqlClient.client
            .query(query, { path: key.toString() })
            .toPromise();
        if (queryResult.error === undefined) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const stringArray = queryResult.data?.state;
            if (stringArray === undefined || stringArray === null) {
                return undefined;
            }
            assertStringArray(stringArray);
            return stringArray.map((string) => Field(string));
        }
        throw new Error(queryResult.error.message);
    }
    async merkleWitness(key) {
        const query = gql `
      query Witness($path: String!) {
        witness(path: $path) {
          siblings
          isLefts
        }
      }
    `;
        const queryResult = await this.graphqlClient.client
            .query(query, { path: key.toString() })
            .toPromise();
        if (queryResult.error === undefined) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const witnessJson = queryResult.data?.witness;
            if (witnessJson === undefined || witnessJson === null) {
                return undefined;
            }
            if (witnessJson.siblings === undefined ||
                witnessJson.isLefts === undefined) {
                throw new Error("Witness json object malformed");
            }
            assertStringArray(witnessJson.siblings);
            assertBooleanArray(witnessJson.isLefts);
            return new RollupMerkleTreeWitness(RollupMerkleTreeWitness.fromJSON({
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                path: witnessJson.siblings,
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                isLeft: witnessJson.isLefts,
            }));
        }
        throw new Error(queryResult.error.message);
    }
};
GraphqlQueryTransportModule = __decorate([
    injectable(),
    __param(0, inject("GraphqlClient")),
    __metadata("design:paramtypes", [GraphqlClient])
], GraphqlQueryTransportModule);
