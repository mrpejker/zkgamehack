var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { NetworkState } from "@proto-kit/protocol";
import { gql } from "@urql/core";
import { AppChainModule } from "../appChain/AppChainModule";
import { GraphqlClient } from "./GraphqlClient";
const errors = {
    receivedNoDataOrError: () => new Error("Received no data and no error"),
    receivedResultMalformed: (message) => new Error(`Received result malformed: ${message}`),
    uncatchableError: () => new Error("Uncatchable error"),
};
export let GraphqlNetworkStateTransportModule = class GraphqlNetworkStateTransportModule extends AppChainModule {
    constructor(graphqlClient) {
        super();
        this.graphqlClient = graphqlClient;
    }
    async retrieveNetworkState(path) {
        const query = gql `
      query NetworkState {
        network {
          ${path} {
            block {
              height
            }
            previous {
              rootHash
            }
          }
        }
      }
    `;
        const queryResult = await this.graphqlClient.client
            .query(query, {})
            .toPromise();
        if (queryResult.error === undefined) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const json = queryResult.data?.network?.unproven;
            if (json === undefined || json === null) {
                throw errors.receivedNoDataOrError();
            }
            try {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                return new NetworkState(NetworkState.fromJSON(json));
            }
            catch (e) {
                if (e instanceof Error) {
                    throw errors.receivedResultMalformed(e.message);
                }
                throw errors.uncatchableError();
            }
        }
        throw new Error(queryResult.error.message);
    }
    async getProvenNetworkState() {
        return await this.retrieveNetworkState("proven");
    }
    async getStagedNetworkState() {
        return await this.retrieveNetworkState("staged");
    }
    async getUnprovenNetworkState() {
        return await this.retrieveNetworkState("unproven");
    }
};
GraphqlNetworkStateTransportModule = __decorate([
    injectable(),
    __param(0, inject("GraphqlClient")),
    __metadata("design:paramtypes", [GraphqlClient])
], GraphqlNetworkStateTransportModule);
