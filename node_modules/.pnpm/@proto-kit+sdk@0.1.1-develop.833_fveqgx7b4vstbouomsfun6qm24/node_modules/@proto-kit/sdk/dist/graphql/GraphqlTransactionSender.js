var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable } from "tsyringe";
import { gql } from "@urql/core";
import { AppChainModule } from "../appChain/AppChainModule";
import { GraphqlClient } from "./GraphqlClient";
export let GraphqlTransactionSender = class GraphqlTransactionSender extends AppChainModule {
    constructor(graphqlClient) {
        super();
        this.graphqlClient = graphqlClient;
    }
    async send(transaction) {
        const query = gql `
      mutation SubmitTx($tx: TransactionObjectInput!) {
        submitTx(tx: $tx)
      }
    `;
        const tx = transaction.toJSON();
        const queryResult = await this.graphqlClient.client
            .mutation(query, { tx })
            .toPromise();
        if (queryResult.error === undefined) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const hash = queryResult.data?.submitTx;
            if (hash === undefined) {
                throw new Error("Mutation returned invalid result: submitTx");
            }
        }
        else {
            throw new Error(queryResult.error.message);
        }
    }
};
GraphqlTransactionSender = __decorate([
    injectable(),
    __param(0, inject("GraphqlClient")),
    __metadata("design:paramtypes", [GraphqlClient])
], GraphqlTransactionSender);
