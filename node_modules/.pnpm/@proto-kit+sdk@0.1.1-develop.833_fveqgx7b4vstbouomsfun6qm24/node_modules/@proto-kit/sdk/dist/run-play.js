import cluster from "node:cluster";
import process from "node:process";
import os from "node:os";
import { InMemoryMerkleTreeStorage, RollupMerkleTree, RollupMerkleWitness } from "@proto-kit/protocol";
import { Field } from "o1js";
console.log(`Cpus: ${os.availableParallelism()}`);
const key = 10n;
// function bigintsToNumbers(arr: bigint[]): number[]{
//
// }
function prepare() {
    const store = new InMemoryMerkleTreeStorage();
    const tree = new RollupMerkleTree(store);
    tree.setLeaf(5n, Field(123));
    tree.setLeaf(369395395n, Field(2343));
    const witness = tree.getWitness(key);
    return RollupMerkleWitness.toFields(witness).map(x => x.toString());
}
function calculate(ints) {
    const witness = RollupMerkleWitness.fromFields(ints.map(x => Field(x)));
    const result = new RollupMerkleWitness(witness).calculateRoot(Field(0));
    return result.toString();
}
if (cluster.isPrimary) {
    const start = Date.now();
    const worker = cluster.fork();
    // const prepared = prepare();
    const prepared = ["14336689655492458724029809999073719900904152209691277293321529104906289078142"];
    worker.send(prepared);
    worker.on("message", (message) => {
        console.log(`took ${Date.now() - start} ms`);
        console.log(`Result: ${message}`);
    });
}
else if (cluster.isWorker) {
    process.on("message", (message) => {
        // console.log("Worker received", message);
        // const result = calculate(message as string[]);
        const result = message;
        process.send(result);
        process.exit();
    });
}
// --
// const start = Date.now();
//
// // for(let i = 0; i < 30 ; i++) {
//   const result = calculate(prepare());
// // }
//
// console.log(`took ${(Date.now() - start)} ms`);
// console.log(`Result: ${result}`)
