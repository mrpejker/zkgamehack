var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var BlockModel_1;
import { inject } from "tsyringe";
import { Arg, Field, ObjectType, Query } from "type-graphql";
import { GraphqlModule, graphqlModule } from "../GraphqlModule";
import { BatchTransactionModel } from "./model/BatchTransactionModel";
export let BlockModel = BlockModel_1 = class BlockModel {
    static fromServiceLayerModel(block) {
        return new BlockModel_1(Number(block.networkState.during.block.height.toBigInt()), block.transactions.map((tx) => BatchTransactionModel.fromServiceLayerModel({
            tx: tx.tx,
            status: tx.status.toBoolean(),
            statusMessage: tx.statusMessage,
        })), block.transactionsHash.toString(), block.hash.toString(), block.previousBlockHash?.toString());
    }
    constructor(height, txs, transactionsHash, hash, previousBlockHash) {
        this.height = height;
        this.txs = txs;
        this.transactionsHash = transactionsHash;
        this.hash = hash;
        this.previousBlockHash = previousBlockHash;
    }
};
__decorate([
    Field(),
    __metadata("design:type", String)
], BlockModel.prototype, "hash", void 0);
__decorate([
    Field(() => String, { nullable: true }),
    __metadata("design:type", Object)
], BlockModel.prototype, "previousBlockHash", void 0);
__decorate([
    Field(),
    __metadata("design:type", Number)
], BlockModel.prototype, "height", void 0);
__decorate([
    Field(() => [BatchTransactionModel]),
    __metadata("design:type", Array)
], BlockModel.prototype, "txs", void 0);
__decorate([
    Field(),
    __metadata("design:type", String)
], BlockModel.prototype, "transactionsHash", void 0);
BlockModel = BlockModel_1 = __decorate([
    ObjectType(),
    __metadata("design:paramtypes", [Number, Array, String, String, Object])
], BlockModel);
export let BlockResolver = class BlockResolver extends GraphqlModule {
    constructor(blockStorage) {
        super();
        this.blockStorage = blockStorage;
    }
    async block(height, hash) {
        let block;
        if (hash !== undefined) {
            block = await this.blockStorage.getBlock(hash);
        }
        else {
            const blockHeight = height ?? (await this.blockStorage.getCurrentBlockHeight()) - 1;
            block = await this.blockStorage.getBlockAt(blockHeight);
        }
        if (block !== undefined) {
            return BlockModel.fromServiceLayerModel(block);
        }
        return undefined;
    }
};
__decorate([
    Query(() => BlockModel, {
        nullable: true,
        description: "Queries for blocks that have been sequenced and included into the chain",
    }),
    __param(0, Arg("height", () => Number, {
        nullable: true,
        description: "Filters the blocks for a specific height",
    })),
    __param(1, Arg("hash", () => String, {
        nullable: true,
        description: "Filters the blocks for a specific hash",
    })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], BlockResolver.prototype, "block", null);
BlockResolver = __decorate([
    graphqlModule(),
    __param(0, inject("BlockStorage")),
    __metadata("design:paramtypes", [Object])
], BlockResolver);
