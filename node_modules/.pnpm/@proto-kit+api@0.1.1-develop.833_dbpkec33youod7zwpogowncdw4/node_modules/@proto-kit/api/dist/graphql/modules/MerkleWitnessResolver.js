var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MerkleWitnessDTO_1;
import { Arg, Field, ObjectType, Query } from "type-graphql";
import { Length } from "class-validator";
import { inject } from "tsyringe";
import { RollupMerkleTree } from "@proto-kit/common";
import { CachedMerkleTreeStore, } from "@proto-kit/sequencer";
import { GraphqlModule, graphqlModule } from "../GraphqlModule";
export let MerkleWitnessDTO = MerkleWitnessDTO_1 = class MerkleWitnessDTO {
    static fromServiceLayerObject(witness) {
        const siblings = witness.path.map((item) => item.toString());
        const isLefts = witness.isLeft.map((item) => item.toBoolean());
        return new MerkleWitnessDTO_1(siblings, isLefts);
    }
    constructor(siblings, isLefts) {
        this.siblings = siblings;
        this.isLefts = isLefts;
    }
};
__decorate([
    Field(() => [String]),
    Length(255),
    __metadata("design:type", Array)
], MerkleWitnessDTO.prototype, "siblings", void 0);
__decorate([
    Field(() => [Boolean]),
    Length(255),
    __metadata("design:type", Array)
], MerkleWitnessDTO.prototype, "isLefts", void 0);
MerkleWitnessDTO = MerkleWitnessDTO_1 = __decorate([
    ObjectType(),
    __metadata("design:paramtypes", [Array, Array])
], MerkleWitnessDTO);
export let MerkleWitnessResolver = class MerkleWitnessResolver extends GraphqlModule {
    constructor(treeStore) {
        super();
        this.treeStore = treeStore;
    }
    async witness(path) {
        const syncStore = new CachedMerkleTreeStore(this.treeStore);
        await syncStore.preloadKey(BigInt(path));
        const tree = new RollupMerkleTree(syncStore);
        const witness = tree.getWitness(BigInt(path));
        return MerkleWitnessDTO.fromServiceLayerObject(witness);
    }
};
__decorate([
    Query(() => MerkleWitnessDTO, {
        description: "Allows retrieval of merkle witnesses corresponding to a specific path in the appchain's state tree. These proves are generally retrieved from the current 'proven' state",
    }),
    __param(0, Arg("path")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MerkleWitnessResolver.prototype, "witness", null);
MerkleWitnessResolver = __decorate([
    graphqlModule(),
    __param(0, inject("AsyncMerkleStore")),
    __metadata("design:paramtypes", [Object])
], MerkleWitnessResolver);
