var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ComputedBlockTransactionModel_1;
import { ObjectType, Field } from "type-graphql";
import { IsBoolean } from "class-validator";
import { TransactionObject } from "../MempoolResolver";
export let ComputedBlockTransactionModel = ComputedBlockTransactionModel_1 = class ComputedBlockTransactionModel {
    static fromServiceLayerModel(cbt) {
        const { tx, status, statusMessage } = cbt;
        return new ComputedBlockTransactionModel_1(TransactionObject.fromServiceLayerModel(tx), status, statusMessage);
    }
    constructor(tx, status, statusMessage) {
        this.tx = tx;
        this.status = status;
        this.statusMessage = statusMessage;
    }
};
__decorate([
    Field(() => TransactionObject),
    __metadata("design:type", TransactionObject)
], ComputedBlockTransactionModel.prototype, "tx", void 0);
__decorate([
    Field(),
    IsBoolean(),
    __metadata("design:type", Boolean)
], ComputedBlockTransactionModel.prototype, "status", void 0);
__decorate([
    Field(() => String, { nullable: true }),
    __metadata("design:type", Object)
], ComputedBlockTransactionModel.prototype, "statusMessage", void 0);
ComputedBlockTransactionModel = ComputedBlockTransactionModel_1 = __decorate([
    ObjectType(),
    __metadata("design:paramtypes", [TransactionObject, Boolean, Object])
], ComputedBlockTransactionModel);
