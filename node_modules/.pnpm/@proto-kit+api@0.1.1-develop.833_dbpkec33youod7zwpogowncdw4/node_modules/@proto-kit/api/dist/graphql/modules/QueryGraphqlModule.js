var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
// eslint-disable-next-line max-len
/* eslint-disable @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,guard-for-in,@typescript-eslint/consistent-type-assertions */
import { inject } from "tsyringe";
import { Arg, Query as GraphqlQuery } from "type-graphql";
import { GraphQLBoolean, GraphQLInputObjectType, GraphQLInt, GraphQLObjectType, GraphQLSchema, GraphQLString, GraphQLList, } from "graphql/type";
import { MethodParameterEncoder, Runtime, } from "@proto-kit/module";
import { NetworkState, Protocol, State, StateMap, } from "@proto-kit/protocol";
import { Field } from "o1js";
import { QueryBuilderFactory, NetworkStateQuery, } from "@proto-kit/sequencer";
import { log, range, } from "@proto-kit/common";
import isArray from "lodash/isArray";
import { graphqlModule, SchemaGeneratingGraphqlModule } from "../GraphqlModule";
export let QueryGraphqlModule = class QueryGraphqlModule extends SchemaGeneratingGraphqlModule {
    constructor(queryTransportModule, networkStateTransportModule, runtime, protocol, blockStorage) {
        super();
        this.queryTransportModule = queryTransportModule;
        this.networkStateTransportModule = networkStateTransportModule;
        this.runtime = runtime;
        this.protocol = protocol;
        this.blockStorage = blockStorage;
    }
    async state(path) {
        const value = await this.queryTransportModule.get(Field(path));
        return value?.map((field) => field.toString());
    }
    jsonPrimitiveToGraphqlType(value) {
        switch (typeof value) {
            case "symbol":
            case "string": {
                return GraphQLString;
            }
            case "boolean": {
                return GraphQLBoolean;
            }
            case "number": {
                return GraphQLInt;
            }
            case "bigint": {
                return GraphQLString;
            }
            default:
        }
        throw new Error(`Can't decode type ${typeof value}`);
    }
    inputArray(value, name) {
        if (value.length === undefined || value.length <= 0) {
            throw new Error("Dummy array not initialized correctly. Did you define Provable.Array() with length 0?");
        }
        const valueType = value[0];
        return new GraphQLList(
        // eslint-disable-next-line no-nested-ternary
        typeof valueType === "object"
            ? isArray(valueType)
                ? this.inputArray(valueType, `${name}_object`)
                : this.inputJsonToGraphQl(valueType, `${name}_object`)
            : this.jsonPrimitiveToGraphqlType(valueType));
    }
    inputJsonToGraphQl(json, name) {
        const fields = {};
        Object.entries(json).forEach(([key, value]) => {
            fields[key] = {
                type: 
                // eslint-disable-next-line no-nested-ternary
                typeof value === "object"
                    ? isArray(value)
                        ? this.inputArray(value, `${name}${key}`)
                        : this.inputJsonToGraphQl(value, `${name}${key}`)
                    : this.jsonPrimitiveToGraphqlType(value),
            };
        });
        return new GraphQLInputObjectType({
            name,
            fields,
        });
    }
    graphqlArray(value, name) {
        if (value.length === undefined || value.length <= 0) {
            throw new Error("Dummy array not initialized correctly. Did you define Provable.Array() with length 0?");
        }
        const valueType = value[0];
        return new GraphQLList(
        // eslint-disable-next-line no-nested-ternary
        typeof valueType === "object"
            ? isArray(valueType)
                ? this.graphqlArray(valueType, `${name}_object`)
                : this.jsonToGraphQl(valueType, `${name}_object`)
            : this.jsonPrimitiveToGraphqlType(valueType));
    }
    jsonToGraphQl(json, name) {
        const fields = {};
        Object.entries(json).forEach(([key, value]) => {
            fields[key] = {
                type: 
                // eslint-disable-next-line no-nested-ternary
                typeof value === "object"
                    ? isArray(value)
                        ? this.graphqlArray(value, `${name}${key}`)
                        : this.jsonToGraphQl(value, `${name}${key}`)
                    : this.jsonPrimitiveToGraphqlType(value),
            };
        });
        return new GraphQLObjectType({
            name,
            fields,
        });
    }
    flexiblePureToGraphql(type, name, jsonFunction) {
        const valueFieldLength = MethodParameterEncoder.fieldSize(type);
        const dummyValue = type.fromFields(range(0, valueFieldLength).map(() => Field(0)));
        const json = type.toValue(dummyValue);
        if (typeof json === "object") {
            return jsonFunction(json, name);
        }
        // json is a primitive
        return this.jsonPrimitiveToGraphqlType(json);
    }
    generateStateMapResolver(fieldKey, query, stateMap) {
        const valueType = this.flexiblePureToGraphql(stateMap.valueType, `${fieldKey}Value`, this.jsonToGraphQl.bind(this));
        const keyType = this.flexiblePureToGraphql(stateMap.keyType, `${fieldKey}Key`, this.inputJsonToGraphQl.bind(this));
        return {
            type: valueType,
            args: {
                key: {
                    type: keyType,
                },
            },
            resolve: async (source, args) => {
                try {
                    if (args.key === undefined) {
                        throw new Error("Specifying a key is mandatory");
                    }
                    const provableKey = stateMap.keyType.fromJSON(args.key);
                    const value = await query.get(provableKey);
                    return value !== undefined
                        ? stateMap.valueType.toJSON(value)
                        : undefined;
                }
                catch (error) {
                    log.error(error);
                    if (error instanceof Error) {
                        throw error;
                    }
                    return undefined;
                }
            },
        };
    }
    generateStateResolver(fieldKey, query, state) {
        const valueType = this.flexiblePureToGraphql(state.valueType, `${fieldKey}Value`, this.jsonToGraphQl.bind(this));
        return {
            type: valueType,
            args: {},
            // eslint-disable-next-line consistent-return
            resolve: async () => {
                try {
                    const value = await query.get();
                    return value !== undefined
                        ? state.valueType.toJSON(value)
                        : undefined;
                }
                catch (error) {
                    log.error(error);
                    if (error instanceof Error) {
                        throw error;
                    }
                }
            },
        };
    }
    generateSchemaForQuery(container, containerQuery, namePrefix) {
        const types = {};
        for (const key in container.definition.modules) {
            const query = containerQuery[key];
            const moduleTypes = {};
            for (const fieldKey in query) {
                const stateProperty = container.resolve(key)[fieldKey];
                if (stateProperty instanceof StateMap) {
                    // StateMap
                    moduleTypes[fieldKey] = this.generateStateMapResolver(`${namePrefix}${key}${fieldKey}`, query[fieldKey], stateProperty);
                }
                else if (stateProperty instanceof State) {
                    // State
                    moduleTypes[fieldKey] = this.generateStateResolver(`${namePrefix}${key}${fieldKey}`, query[fieldKey], stateProperty);
                }
            }
            // Only add object if module has one or more State properties
            if (Object.values(moduleTypes).length > 0) {
                types[key] = {
                    type: new GraphQLObjectType({
                        name: key,
                        fields: moduleTypes,
                    }),
                    resolve: () => true,
                };
            }
        }
        return types;
    }
    generateSchema() {
        const runtimeQuery = QueryBuilderFactory.fromRuntime(this.runtime, this.queryTransportModule);
        const runtimeFields = this.generateSchemaForQuery(this.runtime, runtimeQuery, "Runtime");
        const enableRuntime = Object.keys(runtimeFields).length > 0;
        const protocolQuery = QueryBuilderFactory.fromProtocol(this.protocol, this.queryTransportModule);
        const protocolFields = this.generateSchemaForQuery(this.protocol, protocolQuery, "Protocol");
        const enableProtocol = Object.keys(protocolFields).length > 0;
        const networkQuery = new NetworkStateQuery(this.networkStateTransportModule);
        const networkType = this.flexiblePureToGraphql(NetworkState, "Network", this.jsonToGraphQl.bind(this));
        let fieldsDefinition = {};
        if (enableRuntime) {
            fieldsDefinition = {
                ...fieldsDefinition,
                runtime: {
                    type: new GraphQLObjectType({
                        name: "Runtime",
                        fields: runtimeFields,
                    }),
                    resolve: () => true,
                },
            };
        }
        if (enableProtocol) {
            fieldsDefinition = {
                ...fieldsDefinition,
                protocol: {
                    type: new GraphQLObjectType({
                        name: "Protocol",
                        fields: protocolFields,
                    }),
                    resolve: () => true,
                },
            };
        }
        const query = new GraphQLObjectType({
            name: "Query",
            fields: {
                ...fieldsDefinition,
                network: {
                    type: new GraphQLObjectType({
                        name: "network",
                        fields: {
                            unproven: {
                                type: networkType,
                                resolve: () => networkQuery.unproven,
                            },
                            staged: {
                                type: networkType,
                                resolve: () => networkQuery.stagedUnproven,
                            },
                            proven: {
                                type: networkType,
                                resolve: () => networkQuery.proven,
                            },
                        },
                    }),
                    resolve: () => true,
                },
            },
        });
        return new GraphQLSchema({
            query,
            description: "Allows querying of the appchain's state. This includes runtime, protocol and network state and automatically updates based on your appchain's configuration and modules",
        });
    }
};
__decorate([
    GraphqlQuery(() => [String], {
        nullable: true,
        description: "Allows the raw querying of values inside a specific state slot. Returns a string[] that represents the field-encoding of the given value",
    }),
    __param(0, Arg("path", { description: "The path to the state slot to be queried" })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], QueryGraphqlModule.prototype, "state", null);
QueryGraphqlModule = __decorate([
    graphqlModule(),
    __param(0, inject("QueryTransportModule")),
    __param(1, inject("NetworkStateTransportModule")),
    __param(2, inject("Runtime")),
    __param(3, inject("Protocol")),
    __param(4, inject("BlockStorage")),
    __metadata("design:paramtypes", [Object, Object, Runtime,
        Protocol, Object])
], QueryGraphqlModule);
// eslint-disable-next-line max-len
/* eslint-enable @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,guard-for-in,@typescript-eslint/consistent-type-assertions */
