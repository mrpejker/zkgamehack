import { GraphQLFieldConfig, GraphQLObjectType, GraphQLScalarType, GraphQLSchema } from "graphql/type";
import { Runtime, RuntimeModulesRecord } from "@proto-kit/module";
import { MandatoryProtocolModulesRecord, Protocol, ProtocolModulesRecord, State, StateMap } from "@proto-kit/protocol";
import { Query, QueryGetterState, QueryGetterStateMap, QueryTransportModule, BlockStorage, HistoricalBlockStorage, NetworkStateTransportModule } from "@proto-kit/sequencer";
import { BaseModuleType, ModuleContainer, ModulesRecord } from "@proto-kit/common";
import { ObjMap } from "graphql/jsutils/ObjMap";
import { SchemaGeneratingGraphqlModule } from "../GraphqlModule";
export declare class QueryGraphqlModule<RuntimeModules extends RuntimeModulesRecord> extends SchemaGeneratingGraphqlModule {
    private readonly queryTransportModule;
    private readonly networkStateTransportModule;
    private readonly runtime;
    private readonly protocol;
    private readonly blockStorage;
    constructor(queryTransportModule: QueryTransportModule, networkStateTransportModule: NetworkStateTransportModule, runtime: Runtime<RuntimeModules>, protocol: Protocol<MandatoryProtocolModulesRecord & ProtocolModulesRecord>, blockStorage: BlockStorage & HistoricalBlockStorage);
    state(path: string): Promise<string[] | undefined>;
    private jsonPrimitiveToGraphqlType;
    private inputArray;
    private inputJsonToGraphQl;
    private graphqlArray;
    private jsonToGraphQl;
    private flexiblePureToGraphql;
    generateStateMapResolver<Key, Value>(fieldKey: string, query: QueryGetterStateMap<Key, Value>, stateMap: StateMap<Key, Value>): GraphQLFieldConfig<unknown, unknown>;
    generateStateResolver<Value>(fieldKey: string, query: QueryGetterState<Value>, state: State<Value>): {
        type: GraphQLScalarType<unknown, unknown> | GraphQLObjectType<any, any>;
        args: {};
        resolve: () => Promise<any>;
    };
    generateSchemaForQuery<ModuleType extends BaseModuleType, ContainerModulesRecord extends ModulesRecord>(container: ModuleContainer<ContainerModulesRecord>, containerQuery: Query<ModuleType, any>, namePrefix: string): ObjMap<GraphQLFieldConfig<unknown, unknown>>;
    generateSchema(): GraphQLSchema;
}
//# sourceMappingURL=QueryGraphqlModule.d.ts.map