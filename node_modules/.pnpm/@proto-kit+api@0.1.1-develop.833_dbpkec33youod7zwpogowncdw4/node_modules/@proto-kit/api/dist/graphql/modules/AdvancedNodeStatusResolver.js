var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ProcessInformationObject_1, NodeStatusObject_1;
import { Field, ObjectType, Query } from "type-graphql";
import { graphqlModule, GraphqlModule } from "../GraphqlModule";
import { NodeStatusService, } from "../services/NodeStatusService";
import { NodeInformationObject } from "./NodeStatusResolver";
export let ProcessInformationObject = ProcessInformationObject_1 = class ProcessInformationObject {
    static fromServiceLayerModel(process) {
        return new ProcessInformationObject_1(process);
    }
    constructor(process) {
        ({
            uptime: this.uptime,
            uptimeHumanReadable: this.uptimeHumanReadable,
            headTotal: this.headTotal,
            headUsed: this.headUsed,
            platform: this.platform,
            arch: this.arch,
            nodeVersion: this.nodeVersion,
        } = process);
    }
};
__decorate([
    Field(),
    __metadata("design:type", Number)
], ProcessInformationObject.prototype, "uptime", void 0);
__decorate([
    Field(),
    __metadata("design:type", String)
], ProcessInformationObject.prototype, "uptimeHumanReadable", void 0);
__decorate([
    Field(),
    __metadata("design:type", Number)
], ProcessInformationObject.prototype, "headUsed", void 0);
__decorate([
    Field(),
    __metadata("design:type", Number)
], ProcessInformationObject.prototype, "headTotal", void 0);
__decorate([
    Field(),
    __metadata("design:type", String)
], ProcessInformationObject.prototype, "nodeVersion", void 0);
__decorate([
    Field(),
    __metadata("design:type", String)
], ProcessInformationObject.prototype, "arch", void 0);
__decorate([
    Field(),
    __metadata("design:type", String)
], ProcessInformationObject.prototype, "platform", void 0);
ProcessInformationObject = ProcessInformationObject_1 = __decorate([
    ObjectType(),
    __metadata("design:paramtypes", [Object])
], ProcessInformationObject);
export let NodeStatusObject = NodeStatusObject_1 = class NodeStatusObject {
    static fromServiceLayerModel(node, process) {
        return new NodeStatusObject_1(node, process);
    }
    constructor(node, process) {
        this.process = ProcessInformationObject.fromServiceLayerModel(process);
        this.node = NodeInformationObject.fromServiceLayerModel(node);
    }
};
__decorate([
    Field(),
    __metadata("design:type", ProcessInformationObject)
], NodeStatusObject.prototype, "process", void 0);
__decorate([
    Field(),
    __metadata("design:type", NodeInformationObject)
], NodeStatusObject.prototype, "node", void 0);
NodeStatusObject = NodeStatusObject_1 = __decorate([
    ObjectType(),
    __metadata("design:paramtypes", [Object, Object])
], NodeStatusObject);
export let AdvancedNodeStatusResolver = class AdvancedNodeStatusResolver extends GraphqlModule {
    constructor(nodeStatusService) {
        super();
        this.nodeStatusService = nodeStatusService;
    }
    async node() {
        const node = await this.nodeStatusService.getNodeInformation();
        const process = this.nodeStatusService.getProcessInfo();
        return NodeStatusObject.fromServiceLayerModel(node, process);
    }
};
__decorate([
    Query(() => NodeStatusObject, {
        description: "Retrieves general and advanced information about the appchain and node process",
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AdvancedNodeStatusResolver.prototype, "node", null);
AdvancedNodeStatusResolver = __decorate([
    graphqlModule(),
    __metadata("design:paramtypes", [NodeStatusService])
], AdvancedNodeStatusResolver);
