var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ComputedBlockModel_1;
import { inject } from "tsyringe";
import { Arg, Field, ObjectType, Query } from "type-graphql";
import { MOCK_PROOF } from "@proto-kit/common";
import { graphqlModule, GraphqlModule } from "../GraphqlModule";
import { BlockModel, BlockResolver } from "./BlockResolver";
export let ComputedBlockModel = ComputedBlockModel_1 = class ComputedBlockModel {
    static fromServiceLayerModel({ bundles, proof }, blocks) {
        return new ComputedBlockModel_1(bundles.map((bundle) => blocks.find((block) => block?.hash === bundle)), proof.proof === MOCK_PROOF ? "mock-proof" : JSON.stringify(proof));
    }
    constructor(bundles, proof) {
        this.bundles = bundles;
        this.proof = proof;
    }
};
__decorate([
    Field(() => [BlockModel]),
    __metadata("design:type", Array)
], ComputedBlockModel.prototype, "bundles", void 0);
__decorate([
    Field(),
    __metadata("design:type", String)
], ComputedBlockModel.prototype, "proof", void 0);
ComputedBlockModel = ComputedBlockModel_1 = __decorate([
    ObjectType(),
    __metadata("design:paramtypes", [Array, String])
], ComputedBlockModel);
export let BatchStorageResolver = class BatchStorageResolver extends GraphqlModule {
    // TODO seperate these two block interfaces
    constructor(batchStorage, unprovenResolver) {
        super();
        this.batchStorage = batchStorage;
        this.unprovenResolver = unprovenResolver;
    }
    async batches(height) {
        const blockHeight = height ?? (await this.batchStorage.getCurrentBlockHeight()) - 1;
        const batch = await this.batchStorage.getBlockAt(blockHeight);
        if (batch !== undefined) {
            const blocks = await Promise.all(batch.bundles.map((bundle) => 
            // TODO Find a graphql-native way of doing this relational 1-n mapping
            this.unprovenResolver.block(undefined, bundle)));
            return ComputedBlockModel.fromServiceLayerModel(batch, blocks);
        }
        return undefined;
    }
};
__decorate([
    Query(() => ComputedBlockModel, {
        nullable: true,
        description: "Returns previously computed batches of blocks used for settlement",
    }),
    __param(0, Arg("height", () => Number, {
        nullable: true,
        description: "Filters the batches for a specific height",
    })),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], BatchStorageResolver.prototype, "batches", null);
BatchStorageResolver = __decorate([
    graphqlModule(),
    __param(0, inject("BlockStorage")),
    __metadata("design:paramtypes", [Object, BlockResolver])
], BatchStorageResolver);
