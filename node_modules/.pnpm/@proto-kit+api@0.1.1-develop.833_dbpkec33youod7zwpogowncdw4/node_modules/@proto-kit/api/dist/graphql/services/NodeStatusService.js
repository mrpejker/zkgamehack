var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import * as process from "node:process";
import { inject, injectable } from "tsyringe";
import humanizeDuration from "humanize-duration";
export let NodeStatusService = class NodeStatusService {
    constructor(blockStorage, batchStorage, settlementStorage) {
        this.blockStorage = blockStorage;
        this.batchStorage = batchStorage;
        this.settlementStorage = settlementStorage;
    }
    getProcessInfo() {
        const uptime = Math.floor(process.uptime() * 1000);
        const uptimeHumanReadable = humanizeDuration(uptime);
        const memory = process.memoryUsage();
        const nodeVersion = process.version;
        const { arch } = process;
        const { platform } = process;
        return {
            uptime,
            uptimeHumanReadable,
            headTotal: memory.heapTotal,
            headUsed: memory.heapUsed,
            nodeVersion,
            arch,
            platform,
        };
    }
    async getNodeInformation() {
        const blockHeight = await this.blockStorage.getCurrentBlockHeight();
        const batchHeight = await this.batchStorage.getCurrentBlockHeight();
        return {
            blockHeight,
            batchHeight,
        };
    }
};
NodeStatusService = __decorate([
    injectable(),
    __param(0, inject("BlockStorage")),
    __param(1, inject("BatchStorage")),
    __param(2, inject("SettlementStorage")),
    __metadata("design:paramtypes", [Object, Object, Object])
], NodeStatusService);
