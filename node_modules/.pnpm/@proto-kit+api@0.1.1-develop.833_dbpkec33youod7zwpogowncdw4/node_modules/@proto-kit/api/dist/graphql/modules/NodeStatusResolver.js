var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var NodeInformationObject_1;
import { Field, ObjectType, Query } from "type-graphql";
import { graphqlModule, GraphqlModule } from "../GraphqlModule";
import { NodeStatusService, } from "../services/NodeStatusService";
export let NodeInformationObject = NodeInformationObject_1 = class NodeInformationObject {
    static fromServiceLayerModel(status) {
        return new NodeInformationObject_1(status.blockHeight, status.batchHeight);
    }
    constructor(blockHeight, batchHeight) {
        this.blockHeight = blockHeight;
        this.batchHeight = batchHeight;
    }
};
__decorate([
    Field(),
    __metadata("design:type", Number)
], NodeInformationObject.prototype, "blockHeight", void 0);
__decorate([
    Field(),
    __metadata("design:type", Number)
], NodeInformationObject.prototype, "batchHeight", void 0);
NodeInformationObject = NodeInformationObject_1 = __decorate([
    ObjectType(),
    __metadata("design:paramtypes", [Number, Number])
], NodeInformationObject);
export let NodeStatusResolver = class NodeStatusResolver extends GraphqlModule {
    constructor(nodeStatusService) {
        super();
        this.nodeStatusService = nodeStatusService;
    }
    async node() {
        const status = await this.nodeStatusService.getNodeInformation();
        return NodeInformationObject.fromServiceLayerModel(status);
    }
};
__decorate([
    Query(() => NodeInformationObject, {
        description: "Retrieves general information about the appchain",
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NodeStatusResolver.prototype, "node", null);
NodeStatusResolver = __decorate([
    graphqlModule(),
    __metadata("design:paramtypes", [NodeStatusService])
], NodeStatusResolver);
