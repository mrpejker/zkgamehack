import { TaskPayload, Closeable, InstantiatedQueue, TaskQueue, SequencerModule } from "@proto-kit/sequencer";
export interface BullQueueConfig {
    redis: {
        host: string;
        port: number;
        username?: string;
        password?: string;
    };
    retryAttempts?: number;
}
/**
 * TaskQueue implementation for BullMQ
 */
export declare class BullQueue extends SequencerModule<BullQueueConfig> implements TaskQueue {
    createWorker(name: string, executor: (data: TaskPayload) => Promise<TaskPayload>, options?: {
        concurrency: number;
    }): Closeable;
    getQueue(queueName: string): Promise<InstantiatedQueue>;
    start(): Promise<void>;
}
//# sourceMappingURL=BullQueue.d.ts.map