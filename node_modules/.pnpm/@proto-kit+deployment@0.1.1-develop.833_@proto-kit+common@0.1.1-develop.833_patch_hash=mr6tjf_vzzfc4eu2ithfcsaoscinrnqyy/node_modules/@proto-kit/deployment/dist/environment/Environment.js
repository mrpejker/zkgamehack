import { log, assertValidTextLogLevel } from "@proto-kit/common";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
export class Environment {
    constructor(configurations) {
        this.configurations = configurations;
    }
    hasConfiguration(configurationName) {
        return Object.keys(this.configurations).includes(configurationName);
    }
    assertConfigurationProvided(configurationName) {
        if (!this.hasConfiguration(configurationName)) {
            throw new Error(`Configuration with name ${configurationName} does not exist`);
        }
    }
    getConfiguration(configurationName) {
        this.assertConfigurationProvided(configurationName);
        return this.configurations[configurationName];
    }
    static from(configurations) {
        return new Environment(configurations);
    }
    async start() {
        const { configuration, logLevel, prune } = await yargs(hideBin(process.argv))
            .env("PROTOKIT")
            .options({
            environment: {
                default: "default",
                requiresArg: true,
                alias: ["env"],
            },
            configuration: {
                default: "sequencer",
                requiresArg: true,
                alias: ["config"],
            },
            logLevel: {
                type: "string",
                requiresArg: false,
                default: "INFO",
            },
            prune: {
                type: "boolean",
                default: false,
            },
        })
            .parse();
        assertValidTextLogLevel(logLevel);
        log.info(`Setting log level to: ${logLevel}`);
        log.setLevel(logLevel);
        const appChain = this.getConfiguration(configuration ?? "sequencer");
        // TODO Temporary workaround
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        appChain.configurePartial({
            Sequencer: {
                DatabasePruneModule: {
                    pruneOnStartup: prune,
                },
            },
        });
        await appChain.start();
    }
}
