import { log, assertValidTextLogLevel } from "@proto-kit/common";
export class Environment {
    constructor(bundle) {
        this.bundle = bundle;
    }
    hasModule(configurationName) {
        return Object.keys(this.bundle).includes(configurationName);
    }
    assertModuleProvided(configurationName) {
        if (!this.hasModule(configurationName)) {
            throw new Error(`Configuration with name ${configurationName} does not exist`);
        }
    }
    getConfiguration(configurationName) {
        this.assertModuleProvided(configurationName);
        return this.bundle[configurationName];
    }
    async start(configurationName) {
        await this.getConfiguration(configurationName).start();
    }
    static from(bundle) {
        return new Environment(bundle);
    }
}
export class Environments {
    constructor(bundles) {
        this.bundles = bundles;
    }
    assertModuleProvided(environmentName) {
        if (!Object.keys(this.bundles).includes(environmentName)) {
            throw new Error(`Environment with name ${environmentName} does not exist`);
        }
    }
    getEnvironment(environmentName) {
        this.assertModuleProvided(environmentName);
        return this.bundles[environmentName];
    }
    async searchAndStart(configurationName) {
        const foundConfigurations = Object.entries(this.bundles).filter(([key, value]) => value.hasModule(configurationName));
        if (foundConfigurations.length > 1) {
            throw new Error(`Multiple configurations with name ${configurationName} exist in following environemnts: ${foundConfigurations.map(([key]) => key)}`);
        }
        else {
            await foundConfigurations[0][1].start(configurationName);
        }
    }
    static from(bundles) {
        return new Environments(bundles);
    }
    async start(args) {
        const { environment, configuration, logLevel, prune } = args;
        assertValidTextLogLevel(logLevel);
        // eslint-disable-next-line no-console
        console.log(`Setting log level to: ${logLevel}`);
        log.setLevel(logLevel);
        const appchain = this.getEnvironment(environment).getConfiguration(configuration ?? "sequencer");
        // TODO Temporary workaround
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        appchain.configurePartial({
            Sequencer: {
                DatabasePruneModule: {
                    pruneOnStartup: prune,
                },
            },
        });
        if (!(args.returnInsteadOfStarting ?? false)) {
            await appchain.start();
        }
        return appchain;
    }
}
