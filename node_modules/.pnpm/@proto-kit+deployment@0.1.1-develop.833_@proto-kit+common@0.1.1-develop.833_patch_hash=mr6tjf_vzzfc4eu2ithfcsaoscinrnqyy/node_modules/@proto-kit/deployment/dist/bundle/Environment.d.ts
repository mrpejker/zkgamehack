export interface Startable {
    start(): Promise<void>;
}
export type StartableEnvironment<T> = Record<string, T>;
export declare class Environment<T extends Startable> {
    private readonly bundle;
    constructor(bundle: StartableEnvironment<T>);
    hasModule(configurationName: string): configurationName is keyof StartableEnvironment<T>;
    private assertModuleProvided;
    getConfiguration(configurationName: string): T;
    start(configurationName: string): Promise<void>;
    static from<T extends Startable>(bundle: StartableEnvironment<T>): Environment<T>;
}
export declare class Environments<T extends Startable> {
    private readonly bundles;
    constructor(bundles: Record<string, Environment<T>>);
    private assertModuleProvided;
    getEnvironment(environmentName: string): Environment<T>;
    searchAndStart(configurationName: string): Promise<void>;
    static from<T extends Startable>(bundles: Record<string, Environment<T>>): Environments<T>;
    start(args: {
        environment: string;
        configuration?: string;
        logLevel: string;
        prune?: boolean;
        returnInsteadOfStarting?: boolean;
    }): Promise<T>;
}
//# sourceMappingURL=Environment.d.ts.map