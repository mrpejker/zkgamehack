import { Field, Poseidon, Provable } from "o1js";
/**
 * Utilities for creating a hash list from a given value type.
 */
export class ProvableHashList {
    constructor(valueType, commitment = Field(0)) {
        this.valueType = valueType;
        this.commitment = commitment;
    }
    /**
     * Converts the provided value to Field[] and appends it to
     * the current hashlist.
     *
     * @param value - Value to be appended to the hash list
     * @returns Current hash list.
     */
    push(value) {
        this.commitment = this.hash([
            this.commitment,
            ...this.valueType.toFields(value),
        ]);
        return this;
    }
    pushIf(value, condition) {
        const newCommitment = this.hash([
            this.commitment,
            ...this.valueType.toFields(value),
        ]);
        this.commitment = Provable.if(condition, newCommitment, this.commitment);
        return this;
    }
    /**
     * @returns Traling hash of the current hashlist.
     */
    toField() {
        return this.commitment;
    }
}
export class DefaultProvableHashList extends ProvableHashList {
    hash(elements) {
        return Poseidon.hash(elements);
    }
}
