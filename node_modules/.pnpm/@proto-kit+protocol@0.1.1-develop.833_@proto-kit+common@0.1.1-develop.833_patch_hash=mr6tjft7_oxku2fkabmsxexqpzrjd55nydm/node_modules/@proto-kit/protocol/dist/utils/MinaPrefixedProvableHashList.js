import { Field, Poseidon } from "o1js";
import { hashWithPrefix, prefixToField } from "@proto-kit/common";
import { ProvableHashList } from "./ProvableHashList";
function salt(prefix) {
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    return Poseidon.update([Field(0), Field(0), Field(0)], [prefixToField(prefix)]);
}
export const MINA_EVENT_PREFIXES = {
    event: "MinaZkappEvent******",
    events: "MinaZkappEvents*****",
    sequenceEvents: "MinaZkappSeqEvents**",
};
export function emptyActions() {
    return salt("MinaZkappActionsEmpty")[0];
}
export function emptyEvents() {
    return salt("MinaZkappEventsEmpty")[0];
}
export class MinaActions {
    static actionHash(action, previousHash = emptyActions()) {
        const actionDataHash = hashWithPrefix(MINA_EVENT_PREFIXES.event, action);
        return hashWithPrefix(MINA_EVENT_PREFIXES.sequenceEvents, [
            previousHash,
            actionDataHash,
        ]);
    }
}
export class MinaEvents {
    static eventHash(event, previousHash = emptyEvents()) {
        const actionDataHash = hashWithPrefix(MINA_EVENT_PREFIXES.event, event);
        return hashWithPrefix(MINA_EVENT_PREFIXES.events, [
            previousHash,
            actionDataHash,
        ]);
    }
}
export class MinaPrefixedProvableHashList extends ProvableHashList {
    constructor(valueType, prefix, internalCommitment = Field(0)) {
        super(valueType, internalCommitment);
        this.prefix = prefix;
    }
    hash(elements) {
        const init = salt(this.prefix);
        const digest = Poseidon.update(init, elements);
        return digest[0];
    }
}
export class MinaActionsHashList extends MinaPrefixedProvableHashList {
    constructor(internalCommitment = Field(0)) {
        super(Field, MINA_EVENT_PREFIXES.sequenceEvents, internalCommitment);
    }
}
