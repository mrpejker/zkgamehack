import { Proof } from "o1js";
import { WithZkProgrammable } from "@proto-kit/common";
import { StateTransitionProvableBatch } from "../../model/StateTransitionProvableBatch";
import { StateTransitionWitnessProviderReference } from "./StateTransitionWitnessProviderReference";
declare const StateTransitionProverPublicInput_base: (new (value: {
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    stateRoot: import("o1js/dist/node/lib/provable/field").Field;
    protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
}) => {
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    stateRoot: import("o1js/dist/node/lib/provable/field").Field;
    protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    stateRoot: import("o1js/dist/node/lib/provable/field").Field;
    protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
}, {
    stateTransitionsHash: bigint;
    protocolTransitionsHash: bigint;
    stateRoot: bigint;
    protocolStateRoot: bigint;
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
} & {
    fromValue: (value: {
        stateTransitionsHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
    toInput: (x: {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        stateTransitionsHash: string;
        protocolTransitionsHash: string;
        stateRoot: string;
        protocolStateRoot: string;
    };
    fromJSON: (x: {
        stateTransitionsHash: string;
        protocolTransitionsHash: string;
        stateRoot: string;
        protocolStateRoot: string;
    }) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
    empty: () => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
};
export declare class StateTransitionProverPublicInput extends StateTransitionProverPublicInput_base {
}
declare const StateTransitionProverPublicOutput_base: (new (value: {
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    stateRoot: import("o1js/dist/node/lib/provable/field").Field;
    protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
}) => {
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    stateRoot: import("o1js/dist/node/lib/provable/field").Field;
    protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    stateRoot: import("o1js/dist/node/lib/provable/field").Field;
    protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
}, {
    stateTransitionsHash: bigint;
    protocolTransitionsHash: bigint;
    stateRoot: bigint;
    protocolStateRoot: bigint;
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
} & {
    fromValue: (value: {
        stateTransitionsHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
    toInput: (x: {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        stateTransitionsHash: string;
        protocolTransitionsHash: string;
        stateRoot: string;
        protocolStateRoot: string;
    };
    fromJSON: (x: {
        stateTransitionsHash: string;
        protocolTransitionsHash: string;
        stateRoot: string;
        protocolStateRoot: string;
    }) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
    empty: () => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        protocolTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        stateRoot: import("o1js/dist/node/lib/provable/field").Field;
        protocolStateRoot: import("o1js/dist/node/lib/provable/field").Field;
    };
};
export declare class StateTransitionProverPublicOutput extends StateTransitionProverPublicOutput_base {
}
export type StateTransitionProof = Proof<StateTransitionProverPublicInput, StateTransitionProverPublicOutput>;
export interface StateTransitionProvable extends WithZkProgrammable<StateTransitionProverPublicInput, StateTransitionProverPublicOutput> {
    witnessProviderReference: StateTransitionWitnessProviderReference;
    runBatch: (publicInput: StateTransitionProverPublicInput, batch: StateTransitionProvableBatch) => Promise<StateTransitionProverPublicOutput>;
    merge: (publicInput: StateTransitionProverPublicInput, proof1: StateTransitionProof, proof2: StateTransitionProof) => Promise<StateTransitionProverPublicOutput>;
}
export {};
//# sourceMappingURL=StateTransitionProvable.d.ts.map