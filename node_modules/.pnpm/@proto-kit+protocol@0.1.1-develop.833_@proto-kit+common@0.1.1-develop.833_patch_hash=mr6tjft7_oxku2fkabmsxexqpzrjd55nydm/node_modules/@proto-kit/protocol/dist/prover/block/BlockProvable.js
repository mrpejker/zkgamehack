import { Bool, Field, Signature, Struct } from "o1js";
import { RuntimeTransaction } from "../../model/transaction/RuntimeTransaction";
import { NetworkState } from "../../model/network/NetworkState";
export class BlockProverPublicInput extends Struct({
    transactionsHash: Field,
    stateRoot: Field,
    networkStateHash: Field,
    blockHashRoot: Field,
    eternalTransactionsHash: Field,
    incomingMessagesHash: Field,
}) {
}
export class BlockProverPublicOutput extends Struct({
    transactionsHash: Field,
    stateRoot: Field,
    networkStateHash: Field,
    blockHashRoot: Field,
    eternalTransactionsHash: Field,
    incomingMessagesHash: Field,
    closed: Bool,
    blockNumber: Field,
}) {
    equals(input, closed, blockNumber) {
        const output2 = BlockProverPublicOutput.toFields({
            ...input,
            closed,
            blockNumber,
        });
        const output1 = BlockProverPublicOutput.toFields(this);
        return output1
            .map((value1, index) => value1.equals(output2[index]))
            .reduce((a, b) => a.and(b));
    }
}
export class BlockProverExecutionData extends Struct({
    transaction: RuntimeTransaction,
    signature: Signature,
    networkState: NetworkState,
}) {
}
