import { Field } from "o1js";
declare const BlockHashMerkleTree_base: import("@proto-kit/common").AbstractMerkleTreeClass;
export declare class BlockHashMerkleTree extends BlockHashMerkleTree_base {
}
export declare class BlockHashMerkleTreeWitness extends BlockHashMerkleTree.WITNESS {
}
declare const BlockHashTreeEntry_base: (new (value: {
    blockHash: import("o1js/dist/node/lib/provable/field").Field;
    closed: import("o1js/dist/node/lib/provable/bool").Bool;
}) => {
    blockHash: import("o1js/dist/node/lib/provable/field").Field;
    closed: import("o1js/dist/node/lib/provable/bool").Bool;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    blockHash: import("o1js/dist/node/lib/provable/field").Field;
    closed: import("o1js/dist/node/lib/provable/bool").Bool;
}, {
    blockHash: bigint;
    closed: boolean;
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        blockHash: import("o1js/dist/node/lib/provable/field").Field;
        closed: import("o1js/dist/node/lib/provable/bool").Bool;
    };
} & {
    fromValue: (value: {
        blockHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        closed: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        blockHash: import("o1js/dist/node/lib/provable/field").Field;
        closed: import("o1js/dist/node/lib/provable/bool").Bool;
    };
    toInput: (x: {
        blockHash: import("o1js/dist/node/lib/provable/field").Field;
        closed: import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        blockHash: import("o1js/dist/node/lib/provable/field").Field;
        closed: import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        blockHash: string;
        closed: boolean;
    };
    fromJSON: (x: {
        blockHash: string;
        closed: boolean;
    }) => {
        blockHash: import("o1js/dist/node/lib/provable/field").Field;
        closed: import("o1js/dist/node/lib/provable/bool").Bool;
    };
    empty: () => {
        blockHash: import("o1js/dist/node/lib/provable/field").Field;
        closed: import("o1js/dist/node/lib/provable/bool").Bool;
    };
};
export declare class BlockHashTreeEntry extends BlockHashTreeEntry_base {
    hash(): Field;
}
export {};
//# sourceMappingURL=BlockHashMerkleTree.d.ts.map