import type { Field, FlexibleProvablePure } from "o1js";
import { Option } from "../model/Option";
import { WithStateServiceProvider, WithPath } from "./State";
declare const StateMap_base: import("ts-mixer/dist/types/types").Class<any[], WithPath & WithStateServiceProvider, typeof WithPath & typeof WithStateServiceProvider>;
/**
 * Map-like wrapper for state
 */
export declare class StateMap<KeyType, ValueType> extends StateMap_base {
    keyType: FlexibleProvablePure<KeyType>;
    valueType: FlexibleProvablePure<ValueType>;
    /**
     * Create a new state map with the given key and value types
     *
     * @param keyType - Type to be used as a key
     * @param valueType - Type to be stored as a value
     * @returns State map with provided key and value types.
     */
    static from<KeyType, ValueType>(keyType: FlexibleProvablePure<KeyType>, valueType: FlexibleProvablePure<ValueType>): StateMap<KeyType, ValueType>;
    constructor(keyType: FlexibleProvablePure<KeyType>, valueType: FlexibleProvablePure<ValueType>);
    getPath(key: KeyType): Field;
    /**
     * Obtains a value for the provided key in the current state map.
     *
     * @param key - Key to obtain the state for
     * @returns Value for the provided key.
     */
    get(key: KeyType): Promise<Option<ValueType>>;
    /**
     * Sets a value for the given key in the current state map.
     *
     * @param key - Key to store the value under
     * @param value - Value to be stored under the given key
     */
    set(key: KeyType, value: ValueType): Promise<void>;
}
export {};
//# sourceMappingURL=StateMap.d.ts.map