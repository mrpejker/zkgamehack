var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { injectable } from "tsyringe";
import { log } from "@proto-kit/common";
const errors = {
    stateServiceNotSet: () => new Error("StateService has not been set yet. Be sure to either call your runtime or protocol function by creating them with an AppChain or by setting the stateService manually."),
};
export let StateServiceProvider = class StateServiceProvider {
    constructor() {
        this.stateServiceStack = [];
    }
    get stateService() {
        if (this.stateServiceStack.length === 0) {
            throw errors.stateServiceNotSet();
        }
        // Assertion here is ok, because we check that the array is not empty above
        return this.stateServiceStack.at(-1);
    }
    setCurrentStateService(service) {
        this.stateServiceStack.push(service);
    }
    popCurrentStateService() {
        if (this.stateServiceStack.length === 0) {
            log.trace("Trying to pop from empty state-service stack");
            return;
        }
        this.stateServiceStack.pop();
    }
};
StateServiceProvider = __decorate([
    injectable()
], StateServiceProvider);
