import { Mixin } from "ts-mixer";
import { Path } from "../model/Path";
import { State, WithStateServiceProvider, WithPath } from "./State";
/**
 * Map-like wrapper for state
 */
export class StateMap extends Mixin(WithPath, WithStateServiceProvider) {
    /**
     * Create a new state map with the given key and value types
     *
     * @param keyType - Type to be used as a key
     * @param valueType - Type to be stored as a value
     * @returns State map with provided key and value types.
     */
    static from(keyType, valueType) {
        return new StateMap(keyType, valueType);
    }
    constructor(keyType, valueType) {
        super();
        this.keyType = keyType;
        this.valueType = valueType;
    }
    getPath(key) {
        this.hasPathOrFail();
        return Path.fromKey(this.path, this.keyType, key);
    }
    /**
     * Obtains a value for the provided key in the current state map.
     *
     * @param key - Key to obtain the state for
     * @returns Value for the provided key.
     */
    async get(key) {
        const state = State.from(this.valueType);
        this.hasPathOrFail();
        this.hasStateServiceOrFail();
        state.path = this.getPath(key);
        state.stateServiceProvider = this.stateServiceProvider;
        return await state.get();
    }
    /**
     * Sets a value for the given key in the current state map.
     *
     * @param key - Key to store the value under
     * @param value - Value to be stored under the given key
     */
    async set(key, value) {
        const state = State.from(this.valueType);
        this.hasPathOrFail();
        this.hasStateServiceOrFail();
        state.path = Path.fromKey(this.path, this.keyType, key);
        state.stateServiceProvider = this.stateServiceProvider;
        return await state.set(value);
    }
}
