import { AreProofsEnabled, ChildContainerProvider, ModuleContainer, ModulesConfig, ModulesRecord, StringKeyOf, TypedClass } from "@proto-kit/common";
import { DependencyContainer } from "tsyringe";
import { BlockProvable } from "../prover/block/BlockProvable";
import { StateTransitionProvable } from "../prover/statetransition/StateTransitionProvable";
import { StateServiceProvider } from "../state/StateServiceProvider";
import { SimpleAsyncStateService } from "../state/StateService";
import { BlockHeightHook } from "../hooks/BlockHeightHook";
import { LastStateRootBlockHook } from "../hooks/LastStateRootBlockHook";
import { AccountStateHook } from "../hooks/AccountStateHook";
import { ProtocolModule } from "./ProtocolModule";
import { ProtocolEnvironment } from "./ProtocolEnvironment";
export type ProtocolModulesRecord = ModulesRecord<TypedClass<ProtocolModule<unknown>>>;
export interface BlockProverType extends ProtocolModule, BlockProvable {
}
export interface StateTransitionProverType extends ProtocolModule, StateTransitionProvable {
}
export type MandatoryProtocolModulesRecord = {
    BlockProver: TypedClass<BlockProverType>;
    StateTransitionProver: TypedClass<StateTransitionProverType>;
    AccountState: TypedClass<AccountStateHook>;
    BlockHeight: TypedClass<BlockHeightHook>;
    LastStateRoot: TypedClass<LastStateRootBlockHook>;
};
export interface ProtocolDefinition<Modules extends ProtocolModulesRecord> {
    modules: Modules;
    config?: ModulesConfig<Modules>;
}
export declare class Protocol<Modules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord> extends ModuleContainer<Modules> implements ProtocolEnvironment {
    static from<Modules extends ProtocolModulesRecord & MandatoryProtocolModulesRecord>(modules: ProtocolDefinition<Modules>): TypedClass<Protocol<Modules>>;
    definition: ProtocolDefinition<Modules>;
    constructor(definition: ProtocolDefinition<Modules>);
    get stateService(): SimpleAsyncStateService;
    get stateServiceProvider(): StateServiceProvider;
    decorateModule(moduleName: StringKeyOf<Modules>, containedModule: InstanceType<Modules[StringKeyOf<Modules>]>): void;
    get dependencyContainer(): DependencyContainer;
    private isModule;
    get blockProver(): BlockProvable;
    get stateTransitionProver(): StateTransitionProvable;
    getAreProofsEnabled(): AreProofsEnabled;
    create(childContainerProvider: ChildContainerProvider): void;
    start(): Promise<void>;
}
//# sourceMappingURL=Protocol.d.ts.map