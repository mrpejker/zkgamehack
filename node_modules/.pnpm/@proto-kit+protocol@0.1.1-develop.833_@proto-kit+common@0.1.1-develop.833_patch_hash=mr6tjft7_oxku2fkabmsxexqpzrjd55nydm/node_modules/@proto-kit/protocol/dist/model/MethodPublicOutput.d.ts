declare const MethodPublicOutput_base: (new (value: {
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    status: import("o1js/dist/node/lib/provable/bool").Bool;
    transactionHash: import("o1js/dist/node/lib/provable/field").Field;
    networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
    isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
}) => {
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    status: import("o1js/dist/node/lib/provable/bool").Bool;
    transactionHash: import("o1js/dist/node/lib/provable/field").Field;
    networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
    isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
    status: import("o1js/dist/node/lib/provable/bool").Bool;
    transactionHash: import("o1js/dist/node/lib/provable/field").Field;
    networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
    isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
}, {
    stateTransitionsHash: bigint;
    status: boolean;
    transactionHash: bigint;
    networkStateHash: bigint;
    isMessage: boolean;
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        status: import("o1js/dist/node/lib/provable/bool").Bool;
        transactionHash: import("o1js/dist/node/lib/provable/field").Field;
        networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
        isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
    };
} & {
    fromValue: (value: {
        stateTransitionsHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        status: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
        transactionHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        networkStateHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        isMessage: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        status: import("o1js/dist/node/lib/provable/bool").Bool;
        transactionHash: import("o1js/dist/node/lib/provable/field").Field;
        networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
        isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
    };
    toInput: (x: {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        status: import("o1js/dist/node/lib/provable/bool").Bool;
        transactionHash: import("o1js/dist/node/lib/provable/field").Field;
        networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
        isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        status: import("o1js/dist/node/lib/provable/bool").Bool;
        transactionHash: import("o1js/dist/node/lib/provable/field").Field;
        networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
        isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        stateTransitionsHash: string;
        status: boolean;
        transactionHash: string;
        networkStateHash: string;
        isMessage: boolean;
    };
    fromJSON: (x: {
        stateTransitionsHash: string;
        status: boolean;
        transactionHash: string;
        networkStateHash: string;
        isMessage: boolean;
    }) => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        status: import("o1js/dist/node/lib/provable/bool").Bool;
        transactionHash: import("o1js/dist/node/lib/provable/field").Field;
        networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
        isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
    };
    empty: () => {
        stateTransitionsHash: import("o1js/dist/node/lib/provable/field").Field;
        status: import("o1js/dist/node/lib/provable/bool").Bool;
        transactionHash: import("o1js/dist/node/lib/provable/field").Field;
        networkStateHash: import("o1js/dist/node/lib/provable/field").Field;
        isMessage: import("o1js/dist/node/lib/provable/bool").Bool;
    };
};
/**
 * Public input used to link in-circuit execution with
 * the proof's public input.
 */
export declare class MethodPublicOutput extends MethodPublicOutput_base {
}
export {};
//# sourceMappingURL=MethodPublicOutput.d.ts.map