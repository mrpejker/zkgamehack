import { Bool, Field, Signature, UInt64 } from "o1js";
import { RuntimeTransaction } from "./RuntimeTransaction";
declare const SignedTransaction_base: (new (value: {
    transaction: RuntimeTransaction;
    signature: Signature;
}) => {
    transaction: RuntimeTransaction;
    signature: Signature;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/lib/provable/provable").Provable<{
    transaction: RuntimeTransaction;
    signature: Signature;
}, {
    transaction: {
        methodId: bigint;
        argsHash: bigint;
        nonce: {
            isSome: boolean;
            value: any;
        };
        sender: {
            isSome: boolean;
            value: any;
        };
    };
    signature: any;
}> & {
    fromValue: (value: {
        transaction: RuntimeTransaction | {
            methodId: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
            argsHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
            nonce: import("./ValueOption").UInt64Option | {
                isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
                value: any;
            };
            sender: import("./ValueOption").PublicKeyOption | {
                isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
                value: any;
            };
        };
        signature: any;
    }) => {
        transaction: RuntimeTransaction;
        signature: Signature;
    };
    toInput: (x: {
        transaction: RuntimeTransaction;
        signature: Signature;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        transaction: RuntimeTransaction;
        signature: Signature;
    }) => {
        transaction: {
            methodId: string;
            argsHash: string;
            nonce: {
                isSome: boolean;
                value: any;
            };
            sender: {
                isSome: boolean;
                value: any;
            };
        };
        signature: any;
    };
    fromJSON: (x: {
        transaction: {
            methodId: string;
            argsHash: string;
            nonce: {
                isSome: boolean;
                value: any;
            };
            sender: {
                isSome: boolean;
                value: any;
            };
        };
        signature: any;
    }) => {
        transaction: RuntimeTransaction;
        signature: Signature;
    };
    empty: () => {
        transaction: RuntimeTransaction;
        signature: Signature;
    };
};
export declare class SignedTransaction extends SignedTransaction_base {
    static getSignatureData(args: {
        methodId: Field;
        nonce: UInt64;
        argsHash: Field;
    }): Field[];
    static dummy(): SignedTransaction;
    hash(): Field;
    getSignatureData(): Field[];
    validateSignature(): Bool;
}
export {};
//# sourceMappingURL=SignedTransaction.d.ts.map