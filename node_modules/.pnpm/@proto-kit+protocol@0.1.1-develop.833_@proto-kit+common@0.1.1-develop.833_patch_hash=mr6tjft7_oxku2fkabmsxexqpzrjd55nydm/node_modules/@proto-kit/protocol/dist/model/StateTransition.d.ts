import { Field } from "o1js";
import { Option, ProvableOption } from "./Option";
declare const ProvableStateTransition_base: (new (value: {
    path: import("o1js/dist/node/lib/provable/field").Field;
    from: ProvableOption;
    to: ProvableOption;
}) => {
    path: import("o1js/dist/node/lib/provable/field").Field;
    from: ProvableOption;
    to: ProvableOption;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    path: import("o1js/dist/node/lib/provable/field").Field;
    from: ProvableOption;
    to: ProvableOption;
}, {
    path: bigint;
    from: {
        isSome: boolean;
        value: bigint;
    };
    to: {
        isSome: boolean;
        value: bigint;
    };
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        path: import("o1js/dist/node/lib/provable/field").Field;
        from: ProvableOption;
        to: ProvableOption;
    };
} & {
    fromValue: (value: {
        path: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        from: ProvableOption | {
            isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
            value: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        };
        to: ProvableOption | {
            isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
            value: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        };
    }) => {
        path: import("o1js/dist/node/lib/provable/field").Field;
        from: ProvableOption;
        to: ProvableOption;
    };
    toInput: (x: {
        path: import("o1js/dist/node/lib/provable/field").Field;
        from: ProvableOption;
        to: ProvableOption;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        path: import("o1js/dist/node/lib/provable/field").Field;
        from: ProvableOption;
        to: ProvableOption;
    }) => {
        path: string;
        from: {
            isSome: boolean;
            value: string;
        };
        to: {
            isSome: boolean;
            value: string;
        };
    };
    fromJSON: (x: {
        path: string;
        from: {
            isSome: boolean;
            value: string;
        };
        to: {
            isSome: boolean;
            value: string;
        };
    }) => {
        path: import("o1js/dist/node/lib/provable/field").Field;
        from: ProvableOption;
        to: ProvableOption;
    };
    empty: () => {
        path: import("o1js/dist/node/lib/provable/field").Field;
        from: ProvableOption;
        to: ProvableOption;
    };
};
/**
 * Provable representation of a State Transition, used to
 * normalize state transitions of various value types for
 * the state transition circuit.
 */
export declare class ProvableStateTransition extends ProvableStateTransition_base {
    static dummy(): ProvableStateTransition;
}
/**
 * Generic state transition that constraints the current method circuit
 * to external state, by providing a state anchor.
 */
export declare class StateTransition<Value> {
    path: Field;
    fromValue: Option<Value>;
    toValue: Option<Field> | Option<Value>;
    static from<Value>(path: Field, fromValue: Option<Value>): StateTransition<Value>;
    static fromTo<Value>(path: Field, fromValue: Option<Value>, toValue: Option<Value>): StateTransition<Value>;
    constructor(path: Field, fromValue: Option<Value>, toValue: Option<Field> | Option<Value>);
    get from(): Option<Value>;
    get to(): Option<import("o1js/dist/node/lib/provable/field").Field> | Option<Value>;
    /**
     * Converts a StateTransition to a ProvableStateTransition,
     * while enforcing the 'from' property to be 'Some' in all cases.
     */
    toProvable(): ProvableStateTransition;
    toJSON(): {
        path: string;
        from: {
            isSome: boolean;
            isForcedSome: boolean;
            value: string[];
        };
        to: {
            isSome: boolean;
            isForcedSome: boolean;
            value: string[];
        };
    };
    toConstant(): StateTransition<Value>;
}
export {};
//# sourceMappingURL=StateTransition.d.ts.map