import { Field, UInt64 } from "o1js";
declare const CurrentBlock_base: (new (value: {
    height: UInt64;
}) => {
    height: UInt64;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    height: UInt64;
}, {
    height: bigint;
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        height: UInt64;
    };
} & {
    fromValue: (value: {
        height: bigint | UInt64;
    }) => {
        height: UInt64;
    };
    toInput: (x: {
        height: UInt64;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        height: UInt64;
    }) => {
        height: string;
    };
    fromJSON: (x: {
        height: string;
    }) => {
        height: UInt64;
    };
    empty: () => {
        height: UInt64;
    };
};
export declare class CurrentBlock extends CurrentBlock_base {
}
declare const PreviousBlock_base: (new (value: {
    rootHash: import("o1js/dist/node/lib/provable/field").Field;
}) => {
    rootHash: import("o1js/dist/node/lib/provable/field").Field;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    rootHash: import("o1js/dist/node/lib/provable/field").Field;
}, {
    rootHash: bigint;
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        rootHash: import("o1js/dist/node/lib/provable/field").Field;
    };
} & {
    fromValue: (value: {
        rootHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        rootHash: import("o1js/dist/node/lib/provable/field").Field;
    };
    toInput: (x: {
        rootHash: import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        rootHash: import("o1js/dist/node/lib/provable/field").Field;
    }) => {
        rootHash: string;
    };
    fromJSON: (x: {
        rootHash: string;
    }) => {
        rootHash: import("o1js/dist/node/lib/provable/field").Field;
    };
    empty: () => {
        rootHash: import("o1js/dist/node/lib/provable/field").Field;
    };
};
export declare class PreviousBlock extends PreviousBlock_base {
}
declare const NetworkState_base: (new (value: {
    block: CurrentBlock;
    previous: PreviousBlock;
}) => {
    block: CurrentBlock;
    previous: PreviousBlock;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    block: CurrentBlock;
    previous: PreviousBlock;
}, {
    block: {
        height: bigint;
    };
    previous: {
        rootHash: bigint;
    };
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        block: CurrentBlock;
        previous: PreviousBlock;
    };
} & {
    fromValue: (value: {
        block: CurrentBlock | {
            height: bigint | UInt64;
        };
        previous: PreviousBlock | {
            rootHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        };
    }) => {
        block: CurrentBlock;
        previous: PreviousBlock;
    };
    toInput: (x: {
        block: CurrentBlock;
        previous: PreviousBlock;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        block: CurrentBlock;
        previous: PreviousBlock;
    }) => {
        block: {
            height: string;
        };
        previous: {
            rootHash: string;
        };
    };
    fromJSON: (x: {
        block: {
            height: string;
        };
        previous: {
            rootHash: string;
        };
    }) => {
        block: CurrentBlock;
        previous: PreviousBlock;
    };
    empty: () => {
        block: CurrentBlock;
        previous: PreviousBlock;
    };
};
export declare class NetworkState extends NetworkState_base {
    hash(): Field;
    static empty(): NetworkState;
}
export {};
//# sourceMappingURL=NetworkState.d.ts.map