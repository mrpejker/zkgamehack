import { Bool, Field, PublicKey, UInt64 } from "o1js";
import { PublicKeyOption, UInt64Option } from "./ValueOption";
declare const RuntimeTransaction_base: (new (value: {
    methodId: import("o1js/dist/node/lib/provable/field").Field;
    argsHash: import("o1js/dist/node/lib/provable/field").Field;
    nonce: UInt64Option;
    sender: PublicKeyOption;
}) => {
    methodId: import("o1js/dist/node/lib/provable/field").Field;
    argsHash: import("o1js/dist/node/lib/provable/field").Field;
    nonce: UInt64Option;
    sender: PublicKeyOption;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/lib/provable/provable").Provable<{
    methodId: import("o1js/dist/node/lib/provable/field").Field;
    argsHash: import("o1js/dist/node/lib/provable/field").Field;
    nonce: UInt64Option;
    sender: PublicKeyOption;
}, {
    methodId: bigint;
    argsHash: bigint;
    nonce: {
        isSome: boolean;
        value: any;
    };
    sender: {
        isSome: boolean;
        value: any;
    };
}> & {
    fromValue: (value: {
        methodId: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        argsHash: string | number | bigint | import("o1js/dist/node/lib/provable/field").Field;
        nonce: UInt64Option | {
            isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
            value: any;
        };
        sender: PublicKeyOption | {
            isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
            value: any;
        };
    }) => {
        methodId: import("o1js/dist/node/lib/provable/field").Field;
        argsHash: import("o1js/dist/node/lib/provable/field").Field;
        nonce: UInt64Option;
        sender: PublicKeyOption;
    };
    toInput: (x: {
        methodId: import("o1js/dist/node/lib/provable/field").Field;
        argsHash: import("o1js/dist/node/lib/provable/field").Field;
        nonce: UInt64Option;
        sender: PublicKeyOption;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        methodId: import("o1js/dist/node/lib/provable/field").Field;
        argsHash: import("o1js/dist/node/lib/provable/field").Field;
        nonce: UInt64Option;
        sender: PublicKeyOption;
    }) => {
        methodId: string;
        argsHash: string;
        nonce: {
            isSome: boolean;
            value: any;
        };
        sender: {
            isSome: boolean;
            value: any;
        };
    };
    fromJSON: (x: {
        methodId: string;
        argsHash: string;
        nonce: {
            isSome: boolean;
            value: any;
        };
        sender: {
            isSome: boolean;
            value: any;
        };
    }) => {
        methodId: import("o1js/dist/node/lib/provable/field").Field;
        argsHash: import("o1js/dist/node/lib/provable/field").Field;
        nonce: UInt64Option;
        sender: PublicKeyOption;
    };
    empty: () => {
        methodId: import("o1js/dist/node/lib/provable/field").Field;
        argsHash: import("o1js/dist/node/lib/provable/field").Field;
        nonce: UInt64Option;
        sender: PublicKeyOption;
    };
};
/**
 * This struct is used to expose transaction information to the runtime method
 * execution. This class has not all data included in transactions on purpose.
 * For example, we don't want to expose the signature or args as fields.
 */
export declare class RuntimeTransaction extends RuntimeTransaction_base {
    static fromTransaction(input: {
        methodId: Field;
        argsHash: Field;
        nonce: UInt64;
        sender: PublicKey;
    }): RuntimeTransaction;
    static fromMessage({ methodId, argsHash, }: {
        methodId: Field;
        argsHash: Field;
    }): RuntimeTransaction;
    static dummyTransaction(): RuntimeTransaction;
    assertTransactionType(isMessage: Bool): void;
    hashData(): Field[];
    static fromHashData(fields: Field[]): RuntimeTransaction;
    hash(): Field;
}
export {};
//# sourceMappingURL=RuntimeTransaction.d.ts.map