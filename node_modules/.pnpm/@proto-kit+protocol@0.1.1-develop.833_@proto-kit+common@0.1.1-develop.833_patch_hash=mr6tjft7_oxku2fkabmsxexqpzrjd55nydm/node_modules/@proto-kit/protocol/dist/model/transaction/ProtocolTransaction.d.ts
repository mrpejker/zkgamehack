import { Bool, Field, PublicKey, Signature, UInt64 } from "o1js";
declare const ProtocolTransaction_base: (new (value: {
    methodId: import("o1js/dist/node/lib/field").Field;
    nonce: UInt64;
    sender: PublicKey;
    argsHash: import("o1js/dist/node/lib/field").Field;
    signature: Signature;
}) => {
    methodId: import("o1js/dist/node/lib/field").Field;
    nonce: UInt64;
    sender: PublicKey;
    argsHash: import("o1js/dist/node/lib/field").Field;
    signature: Signature;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky").ProvablePure<{
    methodId: import("o1js/dist/node/lib/field").Field;
    nonce: UInt64;
    sender: PublicKey;
    argsHash: import("o1js/dist/node/lib/field").Field;
    signature: Signature;
}> & {
    toInput: (x: {
        methodId: import("o1js/dist/node/lib/field").Field;
        nonce: UInt64;
        sender: PublicKey;
        argsHash: import("o1js/dist/node/lib/field").Field;
        signature: Signature;
    }) => {
        fields?: import("o1js/dist/node/lib/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        methodId: import("o1js/dist/node/lib/field").Field;
        nonce: UInt64;
        sender: PublicKey;
        argsHash: import("o1js/dist/node/lib/field").Field;
        signature: Signature;
    }) => {
        methodId: string;
        nonce: string;
        sender: string;
        argsHash: string;
        signature: any;
    };
    fromJSON: (x: {
        methodId: string;
        nonce: string;
        sender: string;
        argsHash: string;
        signature: any;
    }) => {
        methodId: import("o1js/dist/node/lib/field").Field;
        nonce: UInt64;
        sender: PublicKey;
        argsHash: import("o1js/dist/node/lib/field").Field;
        signature: Signature;
    };
};
export declare class ProtocolTransaction extends ProtocolTransaction_base {
    static getSignatureData(args: {
        methodId: Field;
        nonce: UInt64;
        argsHash: Field;
    }): Field[];
    getSignatureData(): Field[];
    validateSignature(): Bool;
}
export {};
//# sourceMappingURL=ProtocolTransaction.d.ts.map