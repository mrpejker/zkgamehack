import { PublicKey, UInt64 } from "o1js";
declare const UInt64Option_base: {
    new (value: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    }): {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    };
    fromSome(value: UInt64): {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    };
    none(value: UInt64): {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    };
    _isStruct: true;
    toFields: (value: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    }) => import("o1js/dist/node/lib/provable/field").Field[];
    toAuxiliary: (value?: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    } | undefined) => any[];
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[], aux: any[]) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    };
    sizeInFields(): number;
    check: (value: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    }) => void;
    toValue: (x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    }) => {
        isSome: boolean;
        value: any;
    };
    fromValue: ((x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    } | {
        isSome: boolean;
        value: any;
    }) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    }) & ((value: {
        isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
        value: any;
    }) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    });
    toInput: (x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    }) => {
        isSome: boolean;
        value: any;
    };
    fromJSON: (x: {
        isSome: boolean;
        value: any;
    }) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    };
    empty: () => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: UInt64;
    };
};
export declare class UInt64Option extends UInt64Option_base {
}
declare const PublicKeyOption_base: {
    new (value: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    }): {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    };
    fromSome(value: PublicKey): {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    };
    none(value: PublicKey): {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    };
    _isStruct: true;
    toFields: (value: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    }) => import("o1js/dist/node/lib/provable/field").Field[];
    toAuxiliary: (value?: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    } | undefined) => any[];
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[], aux: any[]) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    };
    sizeInFields(): number;
    check: (value: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    }) => void;
    toValue: (x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    }) => {
        isSome: boolean;
        value: any;
    };
    fromValue: ((x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    } | {
        isSome: boolean;
        value: any;
    }) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    }) & ((value: {
        isSome: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
        value: any;
    }) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    });
    toInput: (x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    }) => {
        isSome: boolean;
        value: any;
    };
    fromJSON: (x: {
        isSome: boolean;
        value: any;
    }) => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    };
    empty: () => {
        isSome: import("o1js/dist/node/lib/provable/bool").Bool;
        value: PublicKey;
    };
};
export declare class PublicKeyOption extends PublicKeyOption_base {
}
export {};
//# sourceMappingURL=ValueOption.d.ts.map