import { Bool } from "o1js";
import { ProvableStateTransition } from "./StateTransition.js";
export declare class StateTransitionType {
    static readonly normal = true;
    static readonly protocol = false;
    static isNormal(type: boolean): boolean;
    static isProtocol(type: boolean): boolean;
}
declare const ProvableStateTransitionType_base: (new (value: {
    type: import("o1js/dist/node/lib/provable/bool").Bool;
}) => {
    type: import("o1js/dist/node/lib/provable/bool").Bool;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    type: import("o1js/dist/node/lib/provable/bool").Bool;
}, {
    type: boolean;
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        type: import("o1js/dist/node/lib/provable/bool").Bool;
    };
} & {
    fromValue: (value: {
        type: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        type: import("o1js/dist/node/lib/provable/bool").Bool;
    };
    toInput: (x: {
        type: import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        type: import("o1js/dist/node/lib/provable/bool").Bool;
    }) => {
        type: boolean;
    };
    fromJSON: (x: {
        type: boolean;
    }) => {
        type: import("o1js/dist/node/lib/provable/bool").Bool;
    };
    empty: () => {
        type: import("o1js/dist/node/lib/provable/bool").Bool;
    };
};
export declare class ProvableStateTransitionType extends ProvableStateTransitionType_base {
    static get normal(): ProvableStateTransitionType;
    static get protocol(): ProvableStateTransitionType;
    isNormal(): Bool;
    isProtocol(): Bool;
}
declare const StateTransitionProvableBatch_base: (new (value: {
    batch: ProvableStateTransition[];
    transitionTypes: ProvableStateTransitionType[];
}) => {
    batch: ProvableStateTransition[];
    transitionTypes: ProvableStateTransitionType[];
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    batch: ProvableStateTransition[];
    transitionTypes: ProvableStateTransitionType[];
}, {
    batch: {
        path: bigint;
        from: {
            isSome: boolean;
            value: bigint;
        };
        to: {
            isSome: boolean;
            value: bigint;
        };
    }[];
    transitionTypes: {
        type: boolean;
    }[];
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        batch: ProvableStateTransition[];
        transitionTypes: ProvableStateTransitionType[];
    };
} & {
    fromValue: (value: {
        batch: ProvableStateTransition[] | {
            path: bigint;
            from: {
                isSome: boolean;
                value: bigint;
            };
            to: {
                isSome: boolean;
                value: bigint;
            };
        }[];
        transitionTypes: ProvableStateTransitionType[] | {
            type: boolean;
        }[];
    }) => {
        batch: ProvableStateTransition[];
        transitionTypes: ProvableStateTransitionType[];
    };
    toInput: (x: {
        batch: ProvableStateTransition[];
        transitionTypes: ProvableStateTransitionType[];
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        batch: ProvableStateTransition[];
        transitionTypes: ProvableStateTransitionType[];
    }) => {
        batch: {
            path: string;
            from: {
                isSome: boolean;
                value: string;
            };
            to: {
                isSome: boolean;
                value: string;
            };
        }[];
        transitionTypes: {
            type: boolean;
        }[];
    };
    fromJSON: (x: {
        batch: {
            path: string;
            from: {
                isSome: boolean;
                value: string;
            };
            to: {
                isSome: boolean;
                value: string;
            };
        }[];
        transitionTypes: {
            type: boolean;
        }[];
    }) => {
        batch: ProvableStateTransition[];
        transitionTypes: ProvableStateTransitionType[];
    };
    empty: () => {
        batch: ProvableStateTransition[];
        transitionTypes: ProvableStateTransitionType[];
    };
};
/**
 * A Batch of StateTransitions to be consumed by the StateTransitionProver
 * to prove multiple STs at once
 *
 * transitionType:
 * true == normal ST, false == protocol ST
 */
export declare class StateTransitionProvableBatch extends StateTransitionProvableBatch_base {
    static fromMappings(transitions: {
        transition: ProvableStateTransition;
        type: ProvableStateTransitionType;
    }[]): StateTransitionProvableBatch;
    static fromTransitions(transitions: ProvableStateTransition[], protocolTransitions: ProvableStateTransition[]): StateTransitionProvableBatch;
    private constructor();
}
export {};
//# sourceMappingURL=StateTransitionProvableBatch.d.ts.map