import { Field, Struct } from "o1js";
import { Option, ProvableOption } from "./Option";
/**
 * Provable representation of a State Transition, used to
 * normalize state transitions of various value types for
 * the state transition circuit.
 */
export class ProvableStateTransition extends Struct({
    path: Field,
    // must be applied even if `None`
    from: ProvableOption,
    // must be ignored if `None`
    to: ProvableOption,
}) {
    static dummy() {
        return new ProvableStateTransition({
            path: Field(0),
            from: Option.none().toProvable(),
            to: Option.none().toProvable(),
        });
    }
}
/**
 * Generic state transition that constraints the current method circuit
 * to external state, by providing a state anchor.
 */
export class StateTransition {
    static from(path, fromValue) {
        return new StateTransition(path, fromValue, Option.none());
    }
    static fromTo(path, fromValue, toValue) {
        return new StateTransition(path, fromValue, toValue);
    }
    constructor(path, fromValue, toValue) {
        this.path = path;
        this.fromValue = fromValue;
        this.toValue = toValue;
    }
    get from() {
        const from = this.fromValue.clone();
        from.forceSome();
        return from;
    }
    get to() {
        return this.toValue.clone();
    }
    /**
     * Converts a StateTransition to a ProvableStateTransition,
     * while enforcing the 'from' property to be 'Some' in all cases.
     */
    toProvable() {
        return new ProvableStateTransition({
            path: this.path,
            from: this.from.toProvable(),
            to: this.to.toProvable(),
        });
    }
    toJSON() {
        return {
            path: this.path.toString(),
            from: this.fromValue.toJSON(),
            to: this.toValue.toJSON(),
        };
    }
    toConstant() {
        return new StateTransition(this.path.toConstant(), this.fromValue.toConstant(), this.toValue.toConstant());
    }
}
