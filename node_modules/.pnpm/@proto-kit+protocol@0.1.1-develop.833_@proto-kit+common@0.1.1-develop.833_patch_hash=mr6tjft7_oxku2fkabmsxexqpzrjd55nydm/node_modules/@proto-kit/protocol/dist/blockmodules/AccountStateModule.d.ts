import { PublicKey, UInt64 } from "o1js";
import { BlockProverExecutionData } from "../prover/block/BlockProvable";
import { StateMap } from "../state/StateMap";
import { ProvableTransactionHook } from "../protocol/ProvableTransactionHook";
declare const AccountState_base: (new (value: {
    nonce: UInt64;
}) => {
    nonce: UInt64;
}) & {
    _isStruct: true;
} & import("o1js/dist/node/snarky").ProvablePure<{
    nonce: UInt64;
}> & {
    toInput: (x: {
        nonce: UInt64;
    }) => {
        fields?: import("o1js/dist/node/lib/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        nonce: UInt64;
    }) => {
        nonce: string;
    };
    fromJSON: (x: {
        nonce: string;
    }) => {
        nonce: UInt64;
    };
};
export declare class AccountState extends AccountState_base {
}
export declare class AccountStateModule extends ProvableTransactionHook {
    accountState: StateMap<PublicKey, AccountState>;
    onTransaction({ transaction }: BlockProverExecutionData): void;
}
export {};
//# sourceMappingURL=AccountStateModule.d.ts.map