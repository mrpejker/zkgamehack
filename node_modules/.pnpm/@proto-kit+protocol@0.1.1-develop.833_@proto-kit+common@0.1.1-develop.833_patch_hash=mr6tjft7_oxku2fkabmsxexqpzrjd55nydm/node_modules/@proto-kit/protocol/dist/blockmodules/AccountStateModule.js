var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { PublicKey, Struct, UInt64 } from "o1js";
import { StateMap } from "../state/StateMap";
import { protocolState } from "../state/protocol/ProtocolState";
import { ProvableTransactionHook } from "../protocol/ProvableTransactionHook";
import { assert } from "../state/assert/assert";
export class AccountState extends Struct({
    nonce: UInt64,
}) {
}
export class AccountStateModule extends ProvableTransactionHook {
    constructor() {
        super(...arguments);
        this.accountState = StateMap.from(PublicKey, AccountState);
    }
    onTransaction({ transaction }) {
        const sender = transaction.sender.value;
        const accountState = this.accountState
            .get(sender)
            .orElse(new AccountState({ nonce: UInt64.zero }));
        const currentNonce = accountState.nonce;
        // Either the nonce matches or the tx is a message, in which case we don't care
        assert(currentNonce
            .equals(transaction.nonce.value)
            .or(transaction.sender.isSome.not()), "Nonce not matching");
        // Optimized version of transaction.sender.isSome ? currentNonce.add(1) : Field(0)
        // Bcs Bool(true).toField() == 1
        const newNonce = UInt64.from(currentNonce.value.add(1).mul(transaction.sender.isSome.toField()));
        this.accountState.set(sender, new AccountState({ nonce: newNonce }));
    }
}
__decorate([
    protocolState(),
    __metadata("design:type", Object)
], AccountStateModule.prototype, "accountState", void 0);
