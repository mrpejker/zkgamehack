import { RollupMerkleTreeWitness } from "@proto-kit/common";
import { Withdrawal } from "./Withdrawal";
export declare const OUTGOING_MESSAGE_BATCH_SIZE = 1;
declare const OutgoingMessageArgument_base: (new (value: {
    witness: RollupMerkleTreeWitness;
    value: Withdrawal;
}) => {
    witness: RollupMerkleTreeWitness;
    value: Withdrawal;
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    witness: RollupMerkleTreeWitness;
    value: Withdrawal;
}, {
    witness: {
        path: bigint[];
        isLeft: boolean[];
    };
    value: {
        address: {
            x: bigint;
            isOdd: boolean;
        };
        amount: bigint;
    };
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        witness: RollupMerkleTreeWitness;
        value: Withdrawal;
    };
} & {
    fromValue: (value: {
        witness: RollupMerkleTreeWitness | {
            path: import("o1js/dist/node/lib/provable/field").Field[] | bigint[];
            isLeft: import("o1js/dist/node/lib/provable/bool").Bool[] | boolean[];
        };
        value: Withdrawal | {
            address: import("o1js/dist/node/lib/provable/crypto/signature").PublicKey | {
                x: bigint | import("o1js/dist/node/lib/provable/field").Field;
                isOdd: boolean | import("o1js/dist/node/lib/provable/bool").Bool;
            };
            amount: bigint | import("o1js/dist/node/lib/provable/int").UInt64;
        };
    }) => {
        witness: RollupMerkleTreeWitness;
        value: Withdrawal;
    };
    toInput: (x: {
        witness: RollupMerkleTreeWitness;
        value: Withdrawal;
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        witness: RollupMerkleTreeWitness;
        value: Withdrawal;
    }) => {
        witness: {
            path: string[];
            isLeft: boolean[];
        };
        value: {
            address: string;
            amount: string;
        };
    };
    fromJSON: (x: {
        witness: {
            path: string[];
            isLeft: boolean[];
        };
        value: {
            address: string;
            amount: string;
        };
    }) => {
        witness: RollupMerkleTreeWitness;
        value: Withdrawal;
    };
    empty: () => {
        witness: RollupMerkleTreeWitness;
        value: Withdrawal;
    };
};
export declare class OutgoingMessageArgument extends OutgoingMessageArgument_base {
    static dummy(): OutgoingMessageArgument;
}
declare const OutgoingMessageArgumentBatch_base: (new (value: {
    arguments: OutgoingMessageArgument[];
    isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
}) => {
    arguments: OutgoingMessageArgument[];
    isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
}) & {
    _isStruct: true;
} & Omit<import("o1js/dist/node/lib/provable/types/provable-intf").Provable<{
    arguments: OutgoingMessageArgument[];
    isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
}, {
    arguments: {
        witness: {
            path: bigint[];
            isLeft: boolean[];
        };
        value: {
            address: {
                x: bigint;
                isOdd: boolean;
            };
            amount: bigint;
        };
    }[];
    isDummys: boolean[];
}>, "fromFields"> & {
    fromFields: (fields: import("o1js/dist/node/lib/provable/field").Field[]) => {
        arguments: OutgoingMessageArgument[];
        isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
    };
} & {
    fromValue: (value: {
        arguments: OutgoingMessageArgument[] | {
            witness: {
                path: bigint[];
                isLeft: boolean[];
            };
            value: {
                address: {
                    x: bigint;
                    isOdd: boolean;
                };
                amount: bigint;
            };
        }[];
        isDummys: import("o1js/dist/node/lib/provable/bool").Bool[] | boolean[];
    }) => {
        arguments: OutgoingMessageArgument[];
        isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
    };
    toInput: (x: {
        arguments: OutgoingMessageArgument[];
        isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
    }) => {
        fields?: import("o1js/dist/node/lib/provable/field").Field[] | undefined;
        packed?: [import("o1js/dist/node/lib/provable/field").Field, number][] | undefined;
    };
    toJSON: (x: {
        arguments: OutgoingMessageArgument[];
        isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
    }) => {
        arguments: {
            witness: {
                path: string[];
                isLeft: boolean[];
            };
            value: {
                address: string;
                amount: string;
            };
        }[];
        isDummys: boolean[];
    };
    fromJSON: (x: {
        arguments: {
            witness: {
                path: string[];
                isLeft: boolean[];
            };
            value: {
                address: string;
                amount: string;
            };
        }[];
        isDummys: boolean[];
    }) => {
        arguments: OutgoingMessageArgument[];
        isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
    };
    empty: () => {
        arguments: OutgoingMessageArgument[];
        isDummys: import("o1js/dist/node/lib/provable/bool").Bool[];
    };
};
export declare class OutgoingMessageArgumentBatch extends OutgoingMessageArgumentBatch_base {
    static fromMessages(providedArguments: OutgoingMessageArgument[]): OutgoingMessageArgumentBatch;
}
export {};
//# sourceMappingURL=OutgoingMessageArgument.d.ts.map