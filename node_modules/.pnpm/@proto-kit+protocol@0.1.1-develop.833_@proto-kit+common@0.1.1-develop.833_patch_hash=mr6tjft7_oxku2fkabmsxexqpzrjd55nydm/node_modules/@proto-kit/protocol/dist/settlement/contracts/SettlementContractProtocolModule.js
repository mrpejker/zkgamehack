var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { inject, injectable, injectAll } from "tsyringe";
import { ContractModule, } from "../ContractModule";
import { LazyBlockProof, SettlementSmartContract, } from "./SettlementSmartContract";
// 24 hours
const DEFAULT_ESCAPE_HATCH = (60 / 3) * 24;
export let SettlementContractProtocolModule = class SettlementContractProtocolModule extends ContractModule {
    constructor(hooks, blockProver) {
        LazyBlockProof.tag = blockProver.zkProgrammable.zkProgram.Proof.tag;
        super();
        this.hooks = hooks;
        this.blockProver = blockProver;
    }
    contractFactory(dispatchContract) {
        const { hooks, config } = this;
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        const withdrawalStatePathSplit = config.withdrawalStatePath.split(".");
        const escapeHatchSlotsInterval = config.escapeHatchSlotsInterval ?? DEFAULT_ESCAPE_HATCH;
        SettlementSmartContract.args = {
            DispatchContract: dispatchContract,
            hooks,
            withdrawalStatePath: withdrawalStatePathSplit,
            escapeHatchSlotsInterval,
        };
        return SettlementSmartContract;
    }
};
SettlementContractProtocolModule = __decorate([
    injectable(),
    __param(0, injectAll("ProvableSettlementHook")),
    __param(1, inject("BlockProver")),
    __metadata("design:paramtypes", [Array, Object])
], SettlementContractProtocolModule);
