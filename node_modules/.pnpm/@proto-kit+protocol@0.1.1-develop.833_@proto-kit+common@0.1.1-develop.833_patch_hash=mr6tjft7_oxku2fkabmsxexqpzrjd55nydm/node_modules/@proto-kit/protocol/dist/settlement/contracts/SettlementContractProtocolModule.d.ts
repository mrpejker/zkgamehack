import { TypedClass } from "@proto-kit/common";
import { SmartContract } from "o1js";
import { BlockProvable } from "../../prover/block/BlockProvable";
import { ContractModule, SmartContractClassFromInterface } from "../ContractModule";
import { ProvableSettlementHook } from "../modularity/ProvableSettlementHook";
import { DispatchContractType } from "./DispatchSmartContract";
import { SettlementContractType } from "./SettlementSmartContract";
export type SettlementContractConfig = {
    escapeHatchSlotsInterval?: number;
    withdrawalStatePath: `${string}.${string}`;
    withdrawalMethodPath: `${string}.${string}`;
};
export declare class SettlementContractProtocolModule extends ContractModule<SettlementContractType, TypedClass<DispatchContractType & SmartContract>, SettlementContractConfig> {
    private readonly hooks;
    private readonly blockProver;
    constructor(hooks: ProvableSettlementHook<unknown>[], blockProver: BlockProvable);
    contractFactory(dispatchContract: TypedClass<DispatchContractType & SmartContract>): SmartContractClassFromInterface<SettlementContractType>;
}
//# sourceMappingURL=SettlementContractProtocolModule.d.ts.map