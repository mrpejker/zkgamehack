var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var SettlementContractModule_1;
import { ModuleContainer, noop, } from "@proto-kit/common";
import { injectable } from "tsyringe";
import { DispatchContractProtocolModule } from "./contracts/DispatchContractProtocolModule";
import { SettlementContractProtocolModule, } from "./contracts/SettlementContractProtocolModule";
export let SettlementContractModule = SettlementContractModule_1 = class SettlementContractModule extends ModuleContainer {
    constructor(definition) {
        super(definition);
    }
    static from(modules) {
        return class ScopedSettlementContractModule extends SettlementContractModule_1 {
            constructor() {
                super({ modules });
            }
        };
    }
    static fromDefaults() {
        return SettlementContractModule_1.from({
            SettlementContract: SettlementContractProtocolModule,
            DispatchContract: DispatchContractProtocolModule,
        });
    }
    get appChain() {
        return this.protocol?.getAreProofsEnabled();
    }
    // **
    create(childContainerProvider) {
        super.create(childContainerProvider);
    }
    async start() {
        noop();
    }
    getContractClasses() {
        const settlementContractKey = "SettlementContract";
        const dispatchContractKey = "DispatchContract";
        this.assertIsValidModuleName(settlementContractKey);
        this.assertIsValidModuleName(dispatchContractKey);
        const settlementModule = this.resolve(settlementContractKey);
        const dispatchModule = this.resolve(dispatchContractKey);
        const dispatch = dispatchModule.contractFactory(undefined);
        const settlement = settlementModule.contractFactory(dispatch);
        return {
            settlement,
            dispatch,
        };
    }
    createContracts(addresses) {
        const { dispatch, settlement } = this.getContractClasses();
        // eslint-disable-next-line new-cap
        const dispatchInstance = new dispatch(addresses.dispatch);
        // eslint-disable-next-line new-cap
        const settlementInstance = new settlement(addresses.settlement);
        return {
            dispatch: dispatchInstance,
            settlement: settlementInstance,
        };
    }
};
SettlementContractModule = SettlementContractModule_1 = __decorate([
    injectable(),
    __metadata("design:paramtypes", [Object])
], SettlementContractModule);
