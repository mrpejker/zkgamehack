import { TypedClass } from "@proto-kit/common";
import { AccountUpdate, Field, Proof, PublicKey, Signature, SmartContract, State, UInt32, TokenContract, AccountUpdateForest } from "o1js";
import { NetworkState } from "../../model/network/NetworkState";
import { BlockProverPublicInput, BlockProverPublicOutput } from "../../prover/block/BlockProvable";
import { OutgoingMessageArgumentBatch } from "../messages/OutgoingMessageArgument";
import { ProvableSettlementHook } from "../modularity/ProvableSettlementHook";
import { DispatchContractType } from "./DispatchSmartContract";
export declare class LazyBlockProof extends Proof<BlockProverPublicInput, BlockProverPublicOutput> {
    static publicInputType: typeof BlockProverPublicInput;
    static publicOutputType: typeof BlockProverPublicOutput;
    static tag: () => {
        name: string;
    };
}
export interface SettlementContractType {
    initialize: (sequencer: PublicKey, dispatchContract: PublicKey) => Promise<void>;
    settle: (blockProof: LazyBlockProof, signature: Signature, dispatchContractAddress: PublicKey, publicKey: PublicKey, inputNetworkState: NetworkState, outputNetworkState: NetworkState, newPromisedMessagesHash: Field) => Promise<void>;
    rollupOutgoingMessages: (batch: OutgoingMessageArgumentBatch) => Promise<void>;
    redeem: (additionUpdate: AccountUpdate) => Promise<void>;
}
export declare const BATCH_SIGNATURE_PREFIX: import("o1js/dist/node/lib/provable/field").Field;
export declare class SettlementSmartContract extends TokenContract implements SettlementContractType {
    static args: {
        DispatchContract: TypedClass<DispatchContractType & SmartContract>;
        hooks: ProvableSettlementHook<unknown>[];
        withdrawalStatePath: [string, string];
        escapeHatchSlotsInterval: number;
    };
    sequencerKey: State<import("o1js/dist/node/lib/provable/field").Field>;
    lastSettlementL1Block: State<UInt32>;
    stateRoot: State<import("o1js/dist/node/lib/provable/field").Field>;
    networkStateHash: State<import("o1js/dist/node/lib/provable/field").Field>;
    blockHashRoot: State<import("o1js/dist/node/lib/provable/field").Field>;
    dispatchContractAddressX: State<import("o1js/dist/node/lib/provable/field").Field>;
    outgoingMessageCursor: State<import("o1js/dist/node/lib/provable/field").Field>;
    approveBase(forest: AccountUpdateForest): Promise<void>;
    initialize(sequencer: PublicKey, dispatchContract: PublicKey): Promise<void>;
    settle(blockProof: LazyBlockProof, signature: Signature, dispatchContractAddress: PublicKey, publicKey: PublicKey, inputNetworkState: NetworkState, outputNetworkState: NetworkState, newPromisedMessagesHash: Field): Promise<void>;
    rollupOutgoingMessages(batch: OutgoingMessageArgumentBatch): Promise<void>;
    redeem(additionUpdate: AccountUpdate): Promise<void>;
}
//# sourceMappingURL=SettlementSmartContract.d.ts.map