'use strict';

var node_stream = require('node:stream');

class SliceStream extends node_stream.Transform {
    _transform(chunk, _, done) {
        this.indexOffset += chunk.length;
        if (!this.emitUp && this.indexOffset >= this.startIndex) {
            this.emitUp = true;
            const start = chunk.length - (this.indexOffset - this.startIndex);
            if (this.indexOffset > this.endIndex) {
                const end = chunk.length - (this.indexOffset - this.endIndex);
                this.emitDown = true;
                this.push(chunk.slice(start, end));
            } else {
                this.push(chunk.slice(start, chunk.length));
            }
            done();
            return;
        }
        if (this.emitUp && !this.emitDown) {
            if (this.indexOffset >= this.endIndex) {
                this.emitDown = true;
                this.push(chunk.slice(0, chunk.length - (this.indexOffset - this.endIndex)));
            } else {
                this.push(chunk);
            }
            done();
            return;
        }
        done();
    }
    constructor(startIndex = 0, endIndex = Infinity){
        super();
        this.startIndex = startIndex;
        this.endIndex = endIndex;
        this.indexOffset = 0;
        this.emitUp = false;
        this.emitDown = false;
    }
}
function streamSlice(startIndex = 0, endIndex = Infinity) {
    return new SliceStream(startIndex, endIndex);
}

exports.streamSlice = streamSlice;
