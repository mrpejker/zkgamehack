import type { ErrorHandlerOptions } from '../../unstable-core-do-not-import/procedure';
import type { CallerOverride } from '../../unstable-core-do-not-import/procedureBuilder';
import type { MaybePromise, Simplify } from '../../unstable-core-do-not-import/types';
type ContextCallback<TContext> = object extends TContext ? {
    createContext?: () => MaybePromise<TContext>;
} : {
    createContext: () => MaybePromise<TContext>;
};
/**
 * Create a caller that works with Next.js React Server Components & Server Actions
 */
export declare function nextAppDirCaller<TContext>(config: Simplify<{
    /**
     * Transform form data to a `Record` before passing it to the procedure
     * @default true
     */
    normalizeFormData?: boolean;
    /**
     * Called when an error occurs in the handler
     */
    onError?: (opts: ErrorHandlerOptions<TContext>) => void;
} & ContextCallback<TContext>>): CallerOverride<TContext>;
export {};
//# sourceMappingURL=nextAppDirCaller.d.ts.map