function composeUploadHandlers(...handlers) {
    return async (part)=>{
        for (const handler of handlers){
            const value = await handler(part);
            if (typeof value !== 'undefined' && value !== null) {
                return value;
            }
        }
        return undefined;
    };
}
class MaxPartSizeExceededError extends Error {
    constructor(field, maxBytes){
        super(`Field "${field}" exceeded upload size of ${maxBytes} bytes.`);
        this.field = field;
        this.maxBytes = maxBytes;
    }
}
class MaxBodySizeExceededError extends Error {
    constructor(maxBytes){
        super(`Body exceeded upload size of ${maxBytes} bytes.`);
        this.maxBytes = maxBytes;
    }
}

export { MaxBodySizeExceededError, MaxPartSizeExceededError, composeUploadHandlers };
