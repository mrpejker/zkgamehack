import loglevel from "loglevel";
import { Provable } from "o1js";
/* eslint-disable @typescript-eslint/no-unsafe-argument */
function logProvable(logFunction, ...args) {
    Provable.asProver(() => {
        const prettyArguments = [];
        args.forEach((argument) => {
            if (argument?.toPretty !== undefined) {
                prettyArguments.push(argument.toPretty());
            }
            else {
                try {
                    prettyArguments.push(JSON.parse(JSON.stringify(argument)));
                }
                catch {
                    prettyArguments.push(argument);
                }
            }
        });
        logFunction(...prettyArguments);
    });
}
/* eslint-enable */
export const log = {
    provable: {
        info: (...args) => {
            logProvable(loglevel.info, ...args);
        },
        debug: (...args) => {
            logProvable(loglevel.debug, ...args);
        },
        error: (...args) => {
            logProvable(loglevel.error, ...args);
        },
        trace: (...args) => {
            logProvable(log.trace, ...args);
        },
        warn: (...args) => {
            logProvable(loglevel.warn, ...args);
        },
    },
    info: (...args) => {
        loglevel.info(...args);
    },
    debug: (...args) => {
        loglevel.debug(...args);
    },
    error: (...args) => {
        loglevel.error(...args);
    },
    trace: (...args) => {
        // Loglevel prints the stack trace by default. To still be able to use trace
        // inside out application, we use the level, but call debug() under the hood
        if (loglevel.getLevel() <= loglevel.levels.TRACE) {
            loglevel.debug(...args);
        }
    },
    warn: (...args) => {
        loglevel.warn(...args);
    },
    setLevel: (level) => {
        loglevel.setLevel(level);
    },
    get levels() {
        return loglevel.levels;
    },
    getLevel: () => loglevel.getLevel(),
};
const validLogLevels = ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "SILENT"];
export function assertValidTextLogLevel(level) {
    if (typeof level === "number" ||
        !validLogLevels.includes(level.toUpperCase())) {
        throw new Error(`${level} is not a valid loglevel`);
    }
}
