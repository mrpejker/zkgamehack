var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Field } from "o1js";
import { Memoize } from "typescript-memoize";
import { log } from "../log";
import { MOCK_PROOF } from "./provableMethod";
const errors = {
    appChainNotSet: (name) => new Error(`Appchain was not injected for: ${name}`),
};
export function verifyToMockable(verify, { areProofsEnabled }) {
    return async (proof) => {
        if (areProofsEnabled) {
            let verified = false;
            try {
                verified = await verify(proof);
            }
            catch (error) {
                // silently fail verification
                log.error(error);
                verified = false;
            }
            return verified;
        }
        return proof.proof === MOCK_PROOF;
    };
}
export const MOCK_VERIFICATION_KEY = {
    data: "mock-verification-key",
    hash: Field(0),
};
export function compileToMockable(compile, { areProofsEnabled }) {
    return async () => {
        if (areProofsEnabled) {
            return await compile();
        }
        return {
            verificationKey: MOCK_VERIFICATION_KEY,
        };
    };
}
export class ZkProgrammable {
    get zkProgram() {
        const zkProgram = this.zkProgramFactory();
        if (!this.appChain) {
            throw errors.appChainNotSet(this.constructor.name);
        }
        return {
            ...zkProgram,
            verify: verifyToMockable(zkProgram.verify, this.appChain),
            compile: compileToMockable(zkProgram.compile, this.appChain),
        };
    }
}
__decorate([
    Memoize(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [])
], ZkProgrammable.prototype, "zkProgram", null);
