export class EventEmitter {
    constructor() {
        this.listeners = {};
        this.wildcardListeners = [];
    }
    emit(event, ...parameters) {
        const listeners = this.listeners[event];
        if (listeners !== undefined) {
            listeners.forEach((listener) => {
                listener(...parameters);
            });
        }
        this.wildcardListeners.forEach((wildcardListener) => {
            wildcardListener(event, parameters);
        });
    }
    onAll(listener) {
        this.wildcardListeners.push(listener);
    }
    on(event, listener) {
        var _a;
        ((_a = this.listeners)[event] ?? (_a[event] = [])).push(listener);
    }
    /**
     * Primitive .off() with identity comparison for now.
     * Could be replaced by returning an id in .on() and using that.
     */
    off(event, listener) {
        const events = this.listeners[event];
        if (events !== undefined) {
            this.listeners[event] = events.filter((candidate) => candidate !== listener);
        }
    }
}
