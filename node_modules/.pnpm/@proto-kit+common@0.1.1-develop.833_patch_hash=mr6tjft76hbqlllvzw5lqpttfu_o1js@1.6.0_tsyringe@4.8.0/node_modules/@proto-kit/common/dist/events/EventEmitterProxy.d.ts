import type { BaseModuleType, ModuleContainer, ModulesRecord } from "../config/ModuleContainer";
import { StringKeyOf, UnionToIntersection } from "../types";
import { EventEmitter } from "./EventEmitter";
import { EventEmittingComponent, EventsRecord } from "./EventEmittingComponent";
export type CastToEventsRecord<Record> = Record extends EventsRecord ? Record : {};
export type ModuleEvents<ModuleType extends BaseModuleType> = InstanceType<ModuleType> extends EventEmittingComponent<infer Events> ? Events : InstanceType<ModuleType> extends ModuleContainer<infer NestedModules> ? CastToEventsRecord<ContainerEvents<NestedModules>> : EventsRecord;
export type ContainerEvents<Modules extends ModulesRecord> = {
    [Key in StringKeyOf<Modules>]: ModuleEvents<Modules[Key]>;
};
export type FlattenObject<Target extends Record<string, EventsRecord>> = UnionToIntersection<Target[keyof Target]>;
export type FlattenedContainerEvents<Modules extends ModulesRecord> = FlattenObject<ContainerEvents<Modules>>;
export declare class EventEmitterProxy<Modules extends ModulesRecord> extends EventEmitter<CastToEventsRecord<FlattenedContainerEvents<Modules>>> {
    private readonly container;
    constructor(container: ModuleContainer<Modules>);
    private isEventEmitter;
}
//# sourceMappingURL=EventEmitterProxy.d.ts.map