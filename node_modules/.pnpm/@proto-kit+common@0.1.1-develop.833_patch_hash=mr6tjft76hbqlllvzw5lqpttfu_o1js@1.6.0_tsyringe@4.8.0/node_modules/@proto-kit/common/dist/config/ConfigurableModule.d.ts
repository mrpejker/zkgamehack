import { ChildContainerProvider } from "./ChildContainerProvider";
import type { BaseModuleInstanceType } from "./ModuleContainer";
export type Preset<Config> = Config | ((...args: unknown[]) => Config);
export type Presets<Config> = Record<string, Preset<Config>>;
export interface Configurable<Config> {
    config: Config;
}
export type NoConfig = Record<never, never>;
/**
 * Used by various module sub-types that may need to be configured
 */
export declare class ConfigurableModule<Config = NoConfig> implements BaseModuleInstanceType {
    /**
     * Store the config separately, so that we can apply additional
     * checks when retrieving it via the getter
     */
    protected currentConfig: Config | undefined;
    get config(): Config;
    set config(config: Config);
    create(childContainerProvider: ChildContainerProvider): void;
}
export interface StaticConfigurableModule<Config> {
    presets: Presets<Config>;
}
//# sourceMappingURL=ConfigurableModule.d.ts.map