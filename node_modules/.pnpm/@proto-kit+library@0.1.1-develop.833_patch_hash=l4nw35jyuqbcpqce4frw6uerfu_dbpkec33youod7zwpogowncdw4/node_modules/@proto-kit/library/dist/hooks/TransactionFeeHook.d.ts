import { Runtime, RuntimeModulesRecord } from "@proto-kit/module";
import { ProvableTransactionHook, BlockProverExecutionData, PublicKeyOption } from "@proto-kit/protocol";
import { PublicKey } from "o1js";
import { UInt64 } from "../math/UInt64";
import { Balance, TokenId } from "../runtime/Balances";
import { MethodFeeConfigData, RuntimeFeeAnalyzerService, RuntimeFeeAnalyzerServiceConfig } from "./RuntimeFeeAnalyzerService";
interface Balances {
    transfer: (tokenId: TokenId, from: PublicKey, to: PublicKey, amount: Balance) => Promise<void>;
}
export interface TransactionFeeHookConfig extends RuntimeFeeAnalyzerServiceConfig {
}
/**
 * Transaction hook for deducting transaction fees from the sender's balance.
 */
export declare class TransactionFeeHook extends ProvableTransactionHook<TransactionFeeHookConfig> {
    runtime: Runtime<RuntimeModulesRecord>;
    constructor(runtime: Runtime<RuntimeModulesRecord>);
    protected persistedFeeAnalyzer: RuntimeFeeAnalyzerService | undefined;
    verifyConfig(): void;
    start(): Promise<void>;
    get config(): TransactionFeeHookConfig;
    set config(value: TransactionFeeHookConfig);
    get balances(): Balances;
    get feeAnalyzer(): RuntimeFeeAnalyzerService;
    transferFee(from: PublicKeyOption, fee: UInt64): Promise<void>;
    getFee(feeConfig: MethodFeeConfigData): import("..").UInt<64>;
    /**
     * Determine the transaction fee for the given transaction, and transfer it
     * from the transaction sender to the fee recipient.
     *
     * @param executionData
     */
    onTransaction(executionData: BlockProverExecutionData): Promise<void>;
}
export {};
//# sourceMappingURL=TransactionFeeHook.d.ts.map