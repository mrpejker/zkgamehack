import { Field, UInt32, UInt64 as o1UInt64 } from "o1js";
import { UIntX } from "./UInt";
export class UInt64 extends UIntX {
    /**
     * Static method to create a {@link UIntX} with value `0`.
     */
    static get zero() {
        return UInt64.from(Field(0));
    }
    /**
     * Static method to create a {@link UIntX} with value `1`.
     */
    static get one() {
        return UInt64.from(Field(1));
    }
    static MAXINT() {
        return new UInt64(UIntX.maxIntField(UInt64.NUM_BITS));
    }
    static check(x) {
        const actual = x.value.rangeCheckHelper(UInt64.NUM_BITS);
        UIntX.assertionFunction(actual.equals(x.value));
    }
    static from(x) {
        if (x instanceof UInt64 || x instanceof UInt32 || x instanceof o1UInt64) {
            x = x.value;
        }
        return new UInt64(UInt64.checkConstant(Field(x), UInt64.NUM_BITS));
    }
    constructor(value) {
        super(value, UInt64.NUM_BITS, {
            creator: (x) => new UInt64(x),
            from: (x) => UInt64.from(x),
        });
    }
}
// eslint-disable-next-line @typescript-eslint/no-magic-numbers
UInt64.NUM_BITS = 64;
