import { Field, UInt32, UInt64 } from "o1js";
import { UIntX } from "./UInt";
export class UInt112 extends UIntX {
    /**
     * Static method to create a {@link UIntX} with value `0`.
     */
    static get zero() {
        return UInt112.from(Field(0));
    }
    /**
     * Static method to create a {@link UIntX} with value `1`.
     */
    static get one() {
        return UInt112.from(Field(1));
    }
    static MAXINT() {
        return new UInt112(UIntX.maxIntField(UInt112.NUM_BITS));
    }
    static check(x) {
        const actual = x.value.rangeCheckHelper(UInt112.NUM_BITS);
        UIntX.assertionFunction(actual.equals(x.value));
    }
    static from(x) {
        if (x instanceof UInt64 || x instanceof UInt32 || x instanceof UInt112) {
            x = x.value;
        }
        return new UInt112(UInt112.checkConstant(Field(x), UInt112.NUM_BITS));
    }
    constructor(value) {
        super(value, UInt112.NUM_BITS, {
            creator: (x) => new UInt112(x),
            from: (x) => UInt112.from(x),
        });
    }
}
// eslint-disable-next-line @typescript-eslint/no-magic-numbers
UInt112.NUM_BITS = 112;
