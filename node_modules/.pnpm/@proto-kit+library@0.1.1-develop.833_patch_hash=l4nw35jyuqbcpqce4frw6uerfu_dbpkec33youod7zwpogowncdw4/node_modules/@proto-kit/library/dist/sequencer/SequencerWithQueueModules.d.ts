import { BlockProducerModule, InMemoryDatabase, LocalTaskWorkerModule, NoopBaseLayer, PrivateMempool, SequencerModulesRecord, UnprovenProducerModule, TaskQueue, TimedBlockTrigger } from "@proto-kit/sequencer";
import { TypedClass } from "@proto-kit/common";
export type SequencerWithQueueModulesRecord = {
    Database: typeof InMemoryDatabase;
    Mempool: typeof PrivateMempool;
    BaseLayer: typeof NoopBaseLayer;
    BlockProducerModule: typeof BlockProducerModule;
    UnprovenProducerModule: typeof UnprovenProducerModule;
    BlockTrigger: typeof TimedBlockTrigger;
};
export declare class SequencerWithQueueModules {
    static with<QueueModule extends TaskQueue, SequencerModules extends SequencerModulesRecord>(queue: TypedClass<QueueModule>, additionalModules: SequencerModules): {
        Database: typeof InMemoryDatabase;
        Mempool: typeof PrivateMempool;
        BaseLayer: typeof NoopBaseLayer;
        BlockProducerModule: typeof BlockProducerModule;
        UnprovenProducerModule: typeof UnprovenProducerModule;
        BlockTrigger: typeof TimedBlockTrigger;
        TaskQueue: TypedClass<QueueModule>;
    } & SequencerModules;
    static worker<QueueModule extends TaskQueue, SequencerModules extends SequencerModulesRecord>(queue: TypedClass<QueueModule>, additionalModules: SequencerModules): {
        LocalTaskWorkerModule: TypedClass<LocalTaskWorkerModule<{
            StateTransitionTask: typeof import("@proto-kit/sequencer").StateTransitionTask;
            StateTransitionReductionTask: typeof import("@proto-kit/sequencer").StateTransitionReductionTask;
            RuntimeProvingTask: typeof import("@proto-kit/sequencer").RuntimeProvingTask;
            BlockProvingTask: typeof import("@proto-kit/sequencer").BlockProvingTask;
            BlockReductionTask: typeof import("@proto-kit/sequencer").BlockReductionTask;
            BlockBuildingTask: typeof import("@proto-kit/sequencer").NewBlockTask;
        }>>;
        TaskQueue: TypedClass<QueueModule>;
    } & SequencerModules;
}
//# sourceMappingURL=SequencerWithQueueModules.d.ts.map