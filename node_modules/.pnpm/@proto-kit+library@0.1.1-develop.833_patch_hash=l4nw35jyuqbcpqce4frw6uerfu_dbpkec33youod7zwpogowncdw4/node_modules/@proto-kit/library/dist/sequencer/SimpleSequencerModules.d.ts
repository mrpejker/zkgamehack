import { BatchProducerModule, LocalTaskWorkerModule, PrivateMempool, SequencerModulesRecord, BlockProducerModule, VanillaTaskWorkerModules, TaskQueue, BaseLayer, BlockTrigger, Database, SequencerModule } from "@proto-kit/sequencer";
import { TypedClass } from "@proto-kit/common";
type PreconfiguredSimpleSequencerModulesRecord = {
    Mempool: typeof PrivateMempool;
    BatchProducerModule: typeof BatchProducerModule;
    BlockProducerModule: typeof BlockProducerModule;
};
export type MinimumAdditionalSequencerModules = {
    TaskQueue: TypedClass<TaskQueue & SequencerModule<unknown>>;
    Database: TypedClass<Database & SequencerModule<unknown>>;
    BaseLayer: TypedClass<BaseLayer & SequencerModule<unknown>>;
    BlockTrigger: TypedClass<BlockTrigger & SequencerModule<unknown>>;
};
export type SimpleSequencerModulesRecord = MinimumAdditionalSequencerModules & PreconfiguredSimpleSequencerModulesRecord;
export type AdditionalSequencerModules = SequencerModulesRecord & MinimumAdditionalSequencerModules;
export type SimpleSequencerWorkerModulesRecord = {
    LocalTaskWorkerModule: TypedClass<LocalTaskWorkerModule<ReturnType<typeof VanillaTaskWorkerModules.allTasks>>>;
    TaskQueue: TypedClass<TaskQueue>;
};
export declare class SimpleSequencerModules {
    static worker<QueueModule extends TaskQueue, SequencerModules extends SequencerModulesRecord>(queue: TypedClass<QueueModule>, additionalModules: SequencerModules): {
        LocalTaskWorkerModule: TypedClass<LocalTaskWorkerModule<{
            SettlementProvingTask: typeof import("@proto-kit/sequencer").SettlementProvingTask;
            StateTransitionTask: typeof import("@proto-kit/sequencer").StateTransitionTask;
            StateTransitionReductionTask: typeof import("@proto-kit/sequencer").StateTransitionReductionTask;
            RuntimeProvingTask: typeof import("@proto-kit/sequencer").RuntimeProvingTask;
            BlockProvingTask: typeof import("@proto-kit/sequencer").BlockProvingTask;
            BlockReductionTask: typeof import("@proto-kit/sequencer").BlockReductionTask;
            BlockBuildingTask: typeof import("@proto-kit/sequencer").NewBlockTask;
        }>>;
        TaskQueue: TypedClass<QueueModule>;
    } & SequencerModules;
    static with<SequencerModules extends AdditionalSequencerModules>(additionalModules: SequencerModules): {
        Database: TypedClass<Database & SequencerModule<unknown>>;
        Mempool: typeof PrivateMempool;
        BaseLayer: TypedClass<BaseLayer & SequencerModule<unknown>>;
        BatchProducerModule: typeof BatchProducerModule;
        BlockProducerModule: typeof BlockProducerModule;
        BlockTrigger: TypedClass<BlockTrigger & SequencerModule<unknown>>;
        TaskQueue: TypedClass<TaskQueue & SequencerModule<unknown>>;
    } & Omit<SequencerModules, "Database" | "BlockTrigger" | "TaskQueue" | "BaseLayer" | "DatabasePruneModule">;
    static defaultConfig(): {
        BlockProducerModule: {
            allowEmptyBlock: true;
        };
        Mempool: {};
        BatchProducerModule: {};
    };
    static defaultWorkerConfig(): {
        LocalTaskWorkerModule: {
            StateTransitionTask: {};
            RuntimeProvingTask: {};
            BlockProvingTask: {};
            BlockReductionTask: {};
            BlockBuildingTask: {};
            StateTransitionReductionTask: {};
            SettlementProvingTask: {};
        };
    };
}
export {};
//# sourceMappingURL=SimpleSequencerModules.d.ts.map