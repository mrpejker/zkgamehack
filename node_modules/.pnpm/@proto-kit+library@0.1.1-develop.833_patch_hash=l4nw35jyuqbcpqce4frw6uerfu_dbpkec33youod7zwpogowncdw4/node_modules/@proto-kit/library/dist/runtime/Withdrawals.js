var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { runtimeModule, RuntimeModule, state } from "@proto-kit/module";
import { State, StateMap, Withdrawal } from "@proto-kit/protocol";
import { Field } from "o1js";
import { inject } from "tsyringe";
import { UInt64 } from "../math/UInt64";
import { Balances, TokenId } from "./Balances";
export let Withdrawals = class Withdrawals extends RuntimeModule {
    constructor(balances) {
        super();
        this.balances = balances;
        this.withdrawalCounter = State.from(Field);
        this.withdrawals = StateMap.from(Field, Withdrawal);
    }
    async queueWithdrawal(withdrawal) {
        const counter = (await this.withdrawalCounter.get()).orElse(Field(0));
        this.withdrawals.set(counter, withdrawal);
        this.withdrawalCounter.set(counter.add(1));
    }
    async withdraw(address, amount) {
        const balance = await this.balances.getBalance(TokenId.from(0), address);
        const accountCreationFee = UInt64.Unsafe.fromField(Field(1n).mul(1e9));
        amount.assertGreaterThanOrEqual(accountCreationFee, "Minimum withdrawal amount not met");
        balance.assertGreaterThanOrEqual(amount, "Not enough balance");
        // Deduct balance from user
        this.balances.setBalance(TokenId.from(0), address, balance.sub(amount));
        // Add withdrawal to queue
        this.queueWithdrawal(new Withdrawal({
            address,
            // Has to be o1js UInt since the withdrawal will be processed in a o1js SmartContract
            amount: amount.toO1UInt64(),
        }));
    }
};
__decorate([
    state(),
    __metadata("design:type", Object)
], Withdrawals.prototype, "withdrawalCounter", void 0);
__decorate([
    state(),
    __metadata("design:type", Object)
], Withdrawals.prototype, "withdrawals", void 0);
Withdrawals = __decorate([
    runtimeModule(),
    __param(0, inject("Balances")),
    __metadata("design:paramtypes", [Balances])
], Withdrawals);
