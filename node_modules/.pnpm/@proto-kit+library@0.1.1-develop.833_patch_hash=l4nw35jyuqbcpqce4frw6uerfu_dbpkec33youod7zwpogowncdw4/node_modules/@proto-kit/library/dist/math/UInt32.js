import { Field, Gadgets } from "o1js";
import { UInt } from "./UInt";
import { UInt64 } from "./UInt64";
export class UInt32 extends UInt {
    static check(x) {
        UInt.assertionFunction(Gadgets.isDefinitelyInRangeN(32, x.value));
    }
    static from(x) {
        if (x instanceof UInt32) {
            return x;
        }
        return new UInt32({ value: UInt.checkConstant(Field(x), 32) });
    }
    static get zero() {
        return UInt32.Unsafe.fromField(Field(0));
    }
    static get max() {
        return UInt32.Unsafe.fromField(UInt.maxIntField(32));
    }
    constructorReference() {
        return UInt32;
    }
    numBits() {
        return 32;
    }
    toUInt64() {
        return UInt64.Unsafe.fromField(this.value);
    }
}
UInt32.Unsafe = {
    fromField(value) {
        return new UInt32({ value });
    },
};
UInt32.Safe = {
    fromField(value) {
        const uint = new UInt32({ value });
        UInt32.check(uint);
        return uint;
    },
};
